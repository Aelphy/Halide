module name=train_cost_model, target=x86-64-osx-avx-avx2-f16c-fma-no_runtime-sse41
external_plus_metadata func train_cost_model (num_stages, batch_size, num_cores, pipeline_features, schedule_features, head1_filter, head1_bias, head2_filter, head2_bias, filter1, bias1, learning_rate, timestep, reference, true_runtime, updated_head1_filter, updated_head1_bias, updated_head2_filter, updated_head2_bias, updated_filter1, updated_bias1, prediction_output, loss_output) {
assert((uint64)reinterpret((halide_buffer_t *)updated_head2_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head2_filter"))
assert((uint64)reinterpret((halide_buffer_t *)updated_head2_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head2_bias"))
assert((uint64)reinterpret((halide_buffer_t *)updated_head1_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head1_filter"))
assert((uint64)reinterpret((halide_buffer_t *)updated_head1_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head1_bias"))
assert((uint64)reinterpret((halide_buffer_t *)updated_filter1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_filter1"))
assert((uint64)reinterpret((halide_buffer_t *)updated_bias1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_bias1"))
assert((uint64)reinterpret((halide_buffer_t *)true_runtime.buffer) != (uint64)0, halide_error_buffer_argument_is_null("true_runtime"))
assert((uint64)reinterpret((halide_buffer_t *)schedule_features.buffer) != (uint64)0, halide_error_buffer_argument_is_null("schedule_features"))
assert((uint64)reinterpret((halide_buffer_t *)prediction_output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("prediction_output"))
assert((uint64)reinterpret((halide_buffer_t *)pipeline_features.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pipeline_features"))
assert((uint64)reinterpret((halide_buffer_t *)loss_output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("loss_output"))
assert((uint64)reinterpret((halide_buffer_t *)head2_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head2_filter"))
assert((uint64)reinterpret((halide_buffer_t *)head2_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head2_bias"))
assert((uint64)reinterpret((halide_buffer_t *)head1_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head1_filter"))
assert((uint64)reinterpret((halide_buffer_t *)head1_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head1_bias"))
assert((uint64)reinterpret((halide_buffer_t *)filter1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("filter1"))
assert((uint64)reinterpret((halide_buffer_t *)bias1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("bias1"))
let bias1 = (void *)_halide_buffer_get_host((halide_buffer_t *)bias1.buffer)
let bias1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)bias1.buffer)
let bias1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)bias1.buffer)
let bias1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)bias1.buffer)
let bias1.min.0 = _halide_buffer_get_min((halide_buffer_t *)bias1.buffer, 0)
let bias1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)bias1.buffer, 0)
let bias1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)bias1.buffer, 0)
let filter1 = (void *)_halide_buffer_get_host((halide_buffer_t *)filter1.buffer)
let filter1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)filter1.buffer)
let filter1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)filter1.buffer)
let filter1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)filter1.buffer)
let filter1.min.0 = _halide_buffer_get_min((halide_buffer_t *)filter1.buffer, 0)
let filter1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)filter1.buffer, 0)
let filter1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)filter1.buffer, 0)
let filter1.min.1 = _halide_buffer_get_min((halide_buffer_t *)filter1.buffer, 1)
let filter1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)filter1.buffer, 1)
let filter1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)filter1.buffer, 1)
let head1_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)head1_bias.buffer)
let head1_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head1_bias.buffer)
let head1_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head1_bias.buffer)
let head1_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head1_bias.buffer)
let head1_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)head1_bias.buffer, 0)
let head1_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head1_bias.buffer, 0)
let head1_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head1_bias.buffer, 0)
let head1_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)head1_filter.buffer)
let head1_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head1_filter.buffer)
let head1_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head1_filter.buffer)
let head1_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head1_filter.buffer)
let head1_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)head1_filter.buffer, 0)
let head1_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head1_filter.buffer, 0)
let head1_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head1_filter.buffer, 0)
let head1_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)head1_filter.buffer, 1)
let head1_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)head1_filter.buffer, 1)
let head1_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)head1_filter.buffer, 1)
let head1_filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)head1_filter.buffer, 2)
let head1_filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)head1_filter.buffer, 2)
let head1_filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)head1_filter.buffer, 2)
let head2_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)head2_bias.buffer)
let head2_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head2_bias.buffer)
let head2_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head2_bias.buffer)
let head2_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head2_bias.buffer)
let head2_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)head2_bias.buffer, 0)
let head2_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head2_bias.buffer, 0)
let head2_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head2_bias.buffer, 0)
let head2_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)head2_filter.buffer)
let head2_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head2_filter.buffer)
let head2_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head2_filter.buffer)
let head2_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head2_filter.buffer)
let head2_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)head2_filter.buffer, 0)
let head2_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head2_filter.buffer, 0)
let head2_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head2_filter.buffer, 0)
let head2_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)head2_filter.buffer, 1)
let head2_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)head2_filter.buffer, 1)
let head2_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)head2_filter.buffer, 1)
let loss_output = (void *)_halide_buffer_get_host((halide_buffer_t *)loss_output.buffer)
let loss_output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)loss_output.buffer)
let loss_output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)loss_output.buffer)
let loss_output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)loss_output.buffer)
let pipeline_features = (void *)_halide_buffer_get_host((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.min.0 = _halide_buffer_get_min((halide_buffer_t *)pipeline_features.buffer, 0)
let pipeline_features.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pipeline_features.buffer, 0)
let pipeline_features.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pipeline_features.buffer, 0)
let pipeline_features.min.1 = _halide_buffer_get_min((halide_buffer_t *)pipeline_features.buffer, 1)
let pipeline_features.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)pipeline_features.buffer, 1)
let pipeline_features.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)pipeline_features.buffer, 1)
let pipeline_features.min.2 = _halide_buffer_get_min((halide_buffer_t *)pipeline_features.buffer, 2)
let pipeline_features.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)pipeline_features.buffer, 2)
let pipeline_features.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)pipeline_features.buffer, 2)
let prediction_output = (void *)_halide_buffer_get_host((halide_buffer_t *)prediction_output.buffer)
let prediction_output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)prediction_output.buffer)
let prediction_output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)prediction_output.buffer)
let prediction_output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)prediction_output.buffer)
let prediction_output.min.0 = _halide_buffer_get_min((halide_buffer_t *)prediction_output.buffer, 0)
let prediction_output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)prediction_output.buffer, 0)
let prediction_output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)prediction_output.buffer, 0)
let schedule_features = (void *)_halide_buffer_get_host((halide_buffer_t *)schedule_features.buffer)
let schedule_features.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)schedule_features.buffer)
let schedule_features.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)schedule_features.buffer)
let schedule_features.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)schedule_features.buffer)
let schedule_features.min.0 = _halide_buffer_get_min((halide_buffer_t *)schedule_features.buffer, 0)
let schedule_features.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)schedule_features.buffer, 0)
let schedule_features.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)schedule_features.buffer, 0)
let schedule_features.min.1 = _halide_buffer_get_min((halide_buffer_t *)schedule_features.buffer, 1)
let schedule_features.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)schedule_features.buffer, 1)
let schedule_features.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)schedule_features.buffer, 1)
let schedule_features.min.2 = _halide_buffer_get_min((halide_buffer_t *)schedule_features.buffer, 2)
let schedule_features.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)schedule_features.buffer, 2)
let schedule_features.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)schedule_features.buffer, 2)
let true_runtime = (void *)_halide_buffer_get_host((halide_buffer_t *)true_runtime.buffer)
let true_runtime.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)true_runtime.buffer)
let true_runtime.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)true_runtime.buffer)
let true_runtime.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)true_runtime.buffer)
let true_runtime.min.0 = _halide_buffer_get_min((halide_buffer_t *)true_runtime.buffer, 0)
let true_runtime.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)true_runtime.buffer, 0)
let true_runtime.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)true_runtime.buffer, 0)
let updated_bias1 = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_bias1.buffer, 0)
let updated_bias1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_bias1.buffer, 0)
let updated_bias1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_bias1.buffer, 0)
let updated_bias1.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_bias1.buffer, 1)
let updated_bias1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_bias1.buffer, 1)
let updated_bias1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_bias1.buffer, 1)
let updated_filter1 = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_filter1.buffer, 0)
let updated_filter1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_filter1.buffer, 0)
let updated_filter1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_filter1.buffer, 0)
let updated_filter1.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_filter1.buffer, 1)
let updated_filter1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_filter1.buffer, 1)
let updated_filter1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_filter1.buffer, 1)
let updated_filter1.min.2 = _halide_buffer_get_min((halide_buffer_t *)updated_filter1.buffer, 2)
let updated_filter1.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)updated_filter1.buffer, 2)
let updated_filter1.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)updated_filter1.buffer, 2)
let updated_head1_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_bias.buffer, 0)
let updated_head1_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_bias.buffer, 0)
let updated_head1_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_bias.buffer, 0)
let updated_head1_bias.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_bias.buffer, 1)
let updated_head1_bias.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_bias.buffer, 1)
let updated_head1_bias.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_bias.buffer, 1)
let updated_head1_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 0)
let updated_head1_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 0)
let updated_head1_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 0)
let updated_head1_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 1)
let updated_head1_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 1)
let updated_head1_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 1)
let updated_head1_filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 2)
let updated_head1_filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 2)
let updated_head1_filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 2)
let updated_head1_filter.min.3 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 3)
let updated_head1_filter.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 3)
let updated_head1_filter.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 3)
let updated_head2_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_bias.buffer, 0)
let updated_head2_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_bias.buffer, 0)
let updated_head2_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_bias.buffer, 0)
let updated_head2_bias.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_bias.buffer, 1)
let updated_head2_bias.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_bias.buffer, 1)
let updated_head2_bias.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_bias.buffer, 1)
let updated_head2_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_filter.buffer, 0)
let updated_head2_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_filter.buffer, 0)
let updated_head2_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_filter.buffer, 0)
let updated_head2_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_filter.buffer, 1)
let updated_head2_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_filter.buffer, 1)
let updated_head2_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_filter.buffer, 1)
let updated_head2_filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_filter.buffer, 2)
let updated_head2_filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_filter.buffer, 2)
let updated_head2_filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_filter.buffer, 2)
let f1.s1.n.max.s = max(prediction_output.extent.0 + prediction_output.min.0, batch_size)
let conv1_stage2.s1.n.max.s = max(batch_size, f1.s1.n.max.s)
let head2_relu.s0.n.max.s = max(batch_size, conv1_stage2.s1.n.max.s)
let head2_conv.s1.n.max.s = max(batch_size, head2_relu.s0.n.max.s)
let normalized_schedule_features.s0.n.max.s = max(batch_size, head2_conv.s1.n.max.s)
let filter1.extent.1.required.s = max(head1_filter.extent.0, 8) - min(head1_filter.extent.0, 0)
let pipeline_features.extent.2.required.s = max(num_stages, 1) - min(num_stages, 1)
let prediction_output.extent.0.required = min(min(prediction_output.extent.0, 8) + (((prediction_output.extent.0 + -1)/8)*8), prediction_output.extent.0)
let schedule_features.extent.0.required = let t9897 = (max(normalized_schedule_features.s0.n.max.s, 1) - min(prediction_output.min.0, 0)) in (let t9899 = (max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (max(max(max(min(max(normalized_schedule_features.s0.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9897 + -1)/8)*8), max(normalized_schedule_features.s0.n.max.s, 1) + -1) + min(t9897, 8)), min(max(f1.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9899 + -1)/8)*8), max(f1.s1.n.max.s, 1) + -1) + min(t9899, 8))), min(min(batch_size, 8) + (min(max(max(-8 - batch_size, batch_size + -1)/8, 0), (batch_size + -1)/8)*8), batch_size)), 1) - min(prediction_output.min.0, 0)))
let true_runtime.extent.0.required = let t9900.s = max(-8 - batch_size, batch_size + -1) in (let t9901 = min((max(t9900.s/8, 0)*8) + 8, batch_size) in (let t9902 = min(max(t9900.s/8, 0), (t9901 + -1)/8) in max(max(min(max(min(min((t9902*8) + 8, batch_size), min(t9901, 8) + ((((t9901 + -1)/8) + t9902)*8)) + -1, reference), batch_size + -1), 0) + 1, batch_size)))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter1.buffer) || ((0 <= head1_filter.extent.0) && ((min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) <= 8)), halide_error_constraints_make_required_region_smaller("Input buffer filter1", 1, 0, 31, min(head1_filter.extent.0, 0), (min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) + 23))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)bias1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)bias1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, 32, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)filter1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)filter1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 32, 1, 0, 0, 32, 32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head1_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head1_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, 8, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head1_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head1_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 8, 1, 0, 0, 40, 8, 0, 0, 7, 320, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head2_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head2_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, 24, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head2_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head2_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 24, 1, 0, 0, 39, 24, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)loss_output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)loss_output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)loss_output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pipeline_features.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pipeline_features.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pipeline_features.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 40, 1, 0, 0, 7, 40, 0, min(num_stages, 1) + -1, pipeline_features.extent.2.required.s + 1, 280, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)prediction_output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)prediction_output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)prediction_output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(prediction_output.min.0, prediction_output.extent.0.required, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)schedule_features.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)schedule_features.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)schedule_features.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(min(prediction_output.min.0, 0), schedule_features.extent.0.required, 1, 0, 0, 39, schedule_features.extent.0.required, 0, 0, max(num_stages, 1), schedule_features.extent.0.required*39, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)true_runtime.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)true_runtime.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)true_runtime.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, true_runtime.extent.0.required, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_bias1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_bias1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_bias1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 32, 1, 0, 0, 4, 32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_filter1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_filter1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_filter1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 32, 1, 0, 0, 32, 32, 0, 0, 4, 1024, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head1_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head1_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 8, 1, 0, 0, 4, 8, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head1_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head1_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 4, (halide_dimension_t *)make_struct(0, 8, 1, 0, 0, 40, 8, 0, 0, 7, 320, 0, 0, 4, 2240, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head2_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head2_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 24, 1, 0, 0, 4, 24, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head2_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head2_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 24, 1, 0, 0, 39, 24, 0, 0, 4, 936, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_filter1.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_bias1.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)true_runtime.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)schedule_features.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)prediction_output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pipeline_features.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)loss_output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias1.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter1.buffer)))))))))))))))))) {
 assert(bias1.type == (uint32)73730, halide_error_bad_type("Input buffer bias1", bias1.type, (uint32)73730))
 assert(bias1.dimensions == 1, halide_error_bad_dimensions("Input buffer bias1", bias1.dimensions, 1))
 assert(filter1.type == (uint32)73730, halide_error_bad_type("Input buffer filter1", filter1.type, (uint32)73730))
 assert(filter1.dimensions == 2, halide_error_bad_dimensions("Input buffer filter1", filter1.dimensions, 2))
 assert(head1_bias.type == (uint32)73730, halide_error_bad_type("Input buffer head1_bias", head1_bias.type, (uint32)73730))
 assert(head1_bias.dimensions == 1, halide_error_bad_dimensions("Input buffer head1_bias", head1_bias.dimensions, 1))
 assert(head1_filter.type == (uint32)73730, halide_error_bad_type("Input buffer head1_filter", head1_filter.type, (uint32)73730))
 assert(head1_filter.dimensions == 3, halide_error_bad_dimensions("Input buffer head1_filter", head1_filter.dimensions, 3))
 assert(head2_bias.type == (uint32)73730, halide_error_bad_type("Input buffer head2_bias", head2_bias.type, (uint32)73730))
 assert(head2_bias.dimensions == 1, halide_error_bad_dimensions("Input buffer head2_bias", head2_bias.dimensions, 1))
 assert(head2_filter.type == (uint32)73730, halide_error_bad_type("Input buffer head2_filter", head2_filter.type, (uint32)73730))
 assert(head2_filter.dimensions == 2, halide_error_bad_dimensions("Input buffer head2_filter", head2_filter.dimensions, 2))
 assert(loss_output.type == (uint32)73730, halide_error_bad_type("Output buffer loss_output", loss_output.type, (uint32)73730))
 assert(loss_output.dimensions == 0, halide_error_bad_dimensions("Output buffer loss_output", loss_output.dimensions, 0))
 assert(pipeline_features.type == (uint32)73730, halide_error_bad_type("Input buffer pipeline_features", pipeline_features.type, (uint32)73730))
 assert(pipeline_features.dimensions == 3, halide_error_bad_dimensions("Input buffer pipeline_features", pipeline_features.dimensions, 3))
 assert(prediction_output.type == (uint32)73730, halide_error_bad_type("Output buffer prediction_output", prediction_output.type, (uint32)73730))
 assert(prediction_output.dimensions == 1, halide_error_bad_dimensions("Output buffer prediction_output", prediction_output.dimensions, 1))
 assert(schedule_features.type == (uint32)73730, halide_error_bad_type("Input buffer schedule_features", schedule_features.type, (uint32)73730))
 assert(schedule_features.dimensions == 3, halide_error_bad_dimensions("Input buffer schedule_features", schedule_features.dimensions, 3))
 assert(true_runtime.type == (uint32)73730, halide_error_bad_type("Input buffer true_runtime", true_runtime.type, (uint32)73730))
 assert(true_runtime.dimensions == 1, halide_error_bad_dimensions("Input buffer true_runtime", true_runtime.dimensions, 1))
 assert(updated_bias1.type == (uint32)73730, halide_error_bad_type("Output buffer updated_bias1", updated_bias1.type, (uint32)73730))
 assert(updated_bias1.dimensions == 2, halide_error_bad_dimensions("Output buffer updated_bias1", updated_bias1.dimensions, 2))
 assert(updated_filter1.type == (uint32)73730, halide_error_bad_type("Output buffer updated_filter1", updated_filter1.type, (uint32)73730))
 assert(updated_filter1.dimensions == 3, halide_error_bad_dimensions("Output buffer updated_filter1", updated_filter1.dimensions, 3))
 assert(updated_head1_bias.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head1_bias", updated_head1_bias.type, (uint32)73730))
 assert(updated_head1_bias.dimensions == 2, halide_error_bad_dimensions("Output buffer updated_head1_bias", updated_head1_bias.dimensions, 2))
 assert(updated_head1_filter.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head1_filter", updated_head1_filter.type, (uint32)73730))
 assert(updated_head1_filter.dimensions == 4, halide_error_bad_dimensions("Output buffer updated_head1_filter", updated_head1_filter.dimensions, 4))
 assert(updated_head2_bias.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head2_bias", updated_head2_bias.type, (uint32)73730))
 assert(updated_head2_bias.dimensions == 2, halide_error_bad_dimensions("Output buffer updated_head2_bias", updated_head2_bias.dimensions, 2))
 assert(updated_head2_filter.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head2_filter", updated_head2_filter.type, (uint32)73730))
 assert(updated_head2_filter.dimensions == 3, halide_error_bad_dimensions("Output buffer updated_head2_filter", updated_head2_filter.dimensions, 3))
 assert((bias1.min.0 <= 0) && (32 <= (bias1.extent.0 + bias1.min.0)), halide_error_access_out_of_bounds("Input buffer bias1", 0, 0, 31, bias1.min.0, (bias1.extent.0 + bias1.min.0) + -1))
 assert(0 <= bias1.extent.0, halide_error_buffer_extents_negative("Input buffer bias1", 0, bias1.extent.0))
 assert((filter1.min.0 <= 0) && (32 <= (filter1.extent.0 + filter1.min.0)), halide_error_access_out_of_bounds("Input buffer filter1", 0, 0, 31, filter1.min.0, (filter1.extent.0 + filter1.min.0) + -1))
 assert(0 <= filter1.extent.0, halide_error_buffer_extents_negative("Input buffer filter1", 0, filter1.extent.0))
 assert((filter1.min.1 <= min(head1_filter.extent.0, 0)) && (((min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) + 24) <= (filter1.extent.1 + filter1.min.1)), halide_error_access_out_of_bounds("Input buffer filter1", 1, min(head1_filter.extent.0, 0), (min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) + 23, filter1.min.1, (filter1.extent.1 + filter1.min.1) + -1))
 assert(0 <= filter1.extent.1, halide_error_buffer_extents_negative("Input buffer filter1", 1, filter1.extent.1))
 assert((head1_bias.min.0 <= 0) && (8 <= (head1_bias.extent.0 + head1_bias.min.0)), halide_error_access_out_of_bounds("Input buffer head1_bias", 0, 0, 7, head1_bias.min.0, (head1_bias.extent.0 + head1_bias.min.0) + -1))
 assert(0 <= head1_bias.extent.0, halide_error_buffer_extents_negative("Input buffer head1_bias", 0, head1_bias.extent.0))
 assert((head1_filter.min.0 <= 0) && (8 <= (head1_filter.extent.0 + head1_filter.min.0)), halide_error_access_out_of_bounds("Input buffer head1_filter", 0, 0, 7, head1_filter.min.0, (head1_filter.extent.0 + head1_filter.min.0) + -1))
 assert(0 <= head1_filter.extent.0, halide_error_buffer_extents_negative("Input buffer head1_filter", 0, head1_filter.extent.0))
 assert((head1_filter.min.1 <= 0) && (40 <= (head1_filter.extent.1 + head1_filter.min.1)), halide_error_access_out_of_bounds("Input buffer head1_filter", 1, 0, 39, head1_filter.min.1, (head1_filter.extent.1 + head1_filter.min.1) + -1))
 assert(0 <= head1_filter.extent.1, halide_error_buffer_extents_negative("Input buffer head1_filter", 1, head1_filter.extent.1))
 assert((head1_filter.min.2 <= 0) && (7 <= (head1_filter.extent.2 + head1_filter.min.2)), halide_error_access_out_of_bounds("Input buffer head1_filter", 2, 0, 6, head1_filter.min.2, (head1_filter.extent.2 + head1_filter.min.2) + -1))
 assert(0 <= head1_filter.extent.2, halide_error_buffer_extents_negative("Input buffer head1_filter", 2, head1_filter.extent.2))
 assert((head2_bias.min.0 <= 0) && (24 <= (head2_bias.extent.0 + head2_bias.min.0)), halide_error_access_out_of_bounds("Input buffer head2_bias", 0, 0, 23, head2_bias.min.0, (head2_bias.extent.0 + head2_bias.min.0) + -1))
 assert(0 <= head2_bias.extent.0, halide_error_buffer_extents_negative("Input buffer head2_bias", 0, head2_bias.extent.0))
 assert((head2_filter.min.0 <= 0) && (24 <= (head2_filter.extent.0 + head2_filter.min.0)), halide_error_access_out_of_bounds("Input buffer head2_filter", 0, 0, 23, head2_filter.min.0, (head2_filter.extent.0 + head2_filter.min.0) + -1))
 assert(0 <= head2_filter.extent.0, halide_error_buffer_extents_negative("Input buffer head2_filter", 0, head2_filter.extent.0))
 assert((head2_filter.min.1 <= 0) && (39 <= (head2_filter.extent.1 + head2_filter.min.1)), halide_error_access_out_of_bounds("Input buffer head2_filter", 1, 0, 38, head2_filter.min.1, (head2_filter.extent.1 + head2_filter.min.1) + -1))
 assert(0 <= head2_filter.extent.1, halide_error_buffer_extents_negative("Input buffer head2_filter", 1, head2_filter.extent.1))
 assert((pipeline_features.min.0 <= 0) && (40 <= (pipeline_features.extent.0 + pipeline_features.min.0)), halide_error_access_out_of_bounds("Input buffer pipeline_features", 0, 0, 39, pipeline_features.min.0, (pipeline_features.extent.0 + pipeline_features.min.0) + -1))
 assert(0 <= pipeline_features.extent.0, halide_error_buffer_extents_negative("Input buffer pipeline_features", 0, pipeline_features.extent.0))
 assert((pipeline_features.min.1 <= 0) && (7 <= (pipeline_features.extent.1 + pipeline_features.min.1)), halide_error_access_out_of_bounds("Input buffer pipeline_features", 1, 0, 6, pipeline_features.min.1, (pipeline_features.extent.1 + pipeline_features.min.1) + -1))
 assert(0 <= pipeline_features.extent.1, halide_error_buffer_extents_negative("Input buffer pipeline_features", 1, pipeline_features.extent.1))
 assert(((pipeline_features.min.2 + 1) <= min(num_stages, 1)) && ((min(num_stages, 1) + pipeline_features.extent.2.required.s) <= (pipeline_features.extent.2 + pipeline_features.min.2)), halide_error_access_out_of_bounds("Input buffer pipeline_features", 2, min(num_stages, 1) + -1, (min(num_stages, 1) + pipeline_features.extent.2.required.s) + -1, pipeline_features.min.2, (pipeline_features.extent.2 + pipeline_features.min.2) + -1))
 assert(0 <= pipeline_features.extent.2, halide_error_buffer_extents_negative("Input buffer pipeline_features", 2, pipeline_features.extent.2))
 assert(prediction_output.extent.0.required <= prediction_output.extent.0, halide_error_access_out_of_bounds("Output buffer prediction_output", 0, prediction_output.min.0, (prediction_output.extent.0.required + prediction_output.min.0) + -1, prediction_output.min.0, (prediction_output.extent.0 + prediction_output.min.0) + -1))
 assert(0 <= prediction_output.extent.0, halide_error_buffer_extents_negative("Output buffer prediction_output", 0, prediction_output.extent.0))
 assert((schedule_features.min.0 <= min(prediction_output.min.0, 0)) && ((min(prediction_output.min.0, 0) + schedule_features.extent.0.required) <= (schedule_features.extent.0 + schedule_features.min.0)), halide_error_access_out_of_bounds("Input buffer schedule_features", 0, min(prediction_output.min.0, 0), (min(prediction_output.min.0, 0) + schedule_features.extent.0.required) + -1, schedule_features.min.0, (schedule_features.extent.0 + schedule_features.min.0) + -1))
 assert(0 <= schedule_features.extent.0, halide_error_buffer_extents_negative("Input buffer schedule_features", 0, schedule_features.extent.0))
 assert((schedule_features.min.1 <= 0) && (39 <= (schedule_features.extent.1 + schedule_features.min.1)), halide_error_access_out_of_bounds("Input buffer schedule_features", 1, 0, 38, schedule_features.min.1, (schedule_features.extent.1 + schedule_features.min.1) + -1))
 assert(0 <= schedule_features.extent.1, halide_error_buffer_extents_negative("Input buffer schedule_features", 1, schedule_features.extent.1))
 assert((schedule_features.min.2 <= 0) && (max(num_stages, 1) <= (schedule_features.extent.2 + schedule_features.min.2)), halide_error_access_out_of_bounds("Input buffer schedule_features", 2, 0, max(num_stages, 1) + -1, schedule_features.min.2, (schedule_features.extent.2 + schedule_features.min.2) + -1))
 assert(0 <= schedule_features.extent.2, halide_error_buffer_extents_negative("Input buffer schedule_features", 2, schedule_features.extent.2))
 assert((true_runtime.min.0 <= 0) && (true_runtime.extent.0.required <= (true_runtime.extent.0 + true_runtime.min.0)), halide_error_access_out_of_bounds("Input buffer true_runtime", 0, 0, true_runtime.extent.0.required + -1, true_runtime.min.0, (true_runtime.extent.0 + true_runtime.min.0) + -1))
 assert(0 <= true_runtime.extent.0, halide_error_buffer_extents_negative("Input buffer true_runtime", 0, true_runtime.extent.0))
 assert((updated_bias1.min.0 <= 0) && (32 <= (updated_bias1.extent.0 + updated_bias1.min.0)), halide_error_access_out_of_bounds("Output buffer updated_bias1", 0, 0, 31, updated_bias1.min.0, (updated_bias1.extent.0 + updated_bias1.min.0) + -1))
 assert(0 <= updated_bias1.extent.0, halide_error_buffer_extents_negative("Output buffer updated_bias1", 0, updated_bias1.extent.0))
 assert((updated_bias1.min.1 <= 0) && (4 <= (updated_bias1.extent.1 + updated_bias1.min.1)), halide_error_access_out_of_bounds("Output buffer updated_bias1", 1, 0, 3, updated_bias1.min.1, (updated_bias1.extent.1 + updated_bias1.min.1) + -1))
 assert(0 <= updated_bias1.extent.1, halide_error_buffer_extents_negative("Output buffer updated_bias1", 1, updated_bias1.extent.1))
 assert((updated_filter1.min.0 <= 0) && (32 <= (updated_filter1.extent.0 + updated_filter1.min.0)), halide_error_access_out_of_bounds("Output buffer updated_filter1", 0, 0, 31, updated_filter1.min.0, (updated_filter1.extent.0 + updated_filter1.min.0) + -1))
 assert(0 <= updated_filter1.extent.0, halide_error_buffer_extents_negative("Output buffer updated_filter1", 0, updated_filter1.extent.0))
 assert((updated_filter1.min.1 <= 0) && (32 <= (updated_filter1.extent.1 + updated_filter1.min.1)), halide_error_access_out_of_bounds("Output buffer updated_filter1", 1, 0, 31, updated_filter1.min.1, (updated_filter1.extent.1 + updated_filter1.min.1) + -1))
 assert(0 <= updated_filter1.extent.1, halide_error_buffer_extents_negative("Output buffer updated_filter1", 1, updated_filter1.extent.1))
 assert((updated_filter1.min.2 <= 0) && (4 <= (updated_filter1.extent.2 + updated_filter1.min.2)), halide_error_access_out_of_bounds("Output buffer updated_filter1", 2, 0, 3, updated_filter1.min.2, (updated_filter1.extent.2 + updated_filter1.min.2) + -1))
 assert(0 <= updated_filter1.extent.2, halide_error_buffer_extents_negative("Output buffer updated_filter1", 2, updated_filter1.extent.2))
 assert((updated_head1_bias.min.0 <= 0) && (8 <= (updated_head1_bias.extent.0 + updated_head1_bias.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head1_bias", 0, 0, 7, updated_head1_bias.min.0, (updated_head1_bias.extent.0 + updated_head1_bias.min.0) + -1))
 assert(0 <= updated_head1_bias.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head1_bias", 0, updated_head1_bias.extent.0))
 assert((updated_head1_bias.min.1 <= 0) && (4 <= (updated_head1_bias.extent.1 + updated_head1_bias.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head1_bias", 1, 0, 3, updated_head1_bias.min.1, (updated_head1_bias.extent.1 + updated_head1_bias.min.1) + -1))
 assert(0 <= updated_head1_bias.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head1_bias", 1, updated_head1_bias.extent.1))
 assert((updated_head1_filter.min.0 <= 0) && (8 <= (updated_head1_filter.extent.0 + updated_head1_filter.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 0, 0, 7, updated_head1_filter.min.0, (updated_head1_filter.extent.0 + updated_head1_filter.min.0) + -1))
 assert(0 <= updated_head1_filter.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 0, updated_head1_filter.extent.0))
 assert((updated_head1_filter.min.1 <= 0) && (40 <= (updated_head1_filter.extent.1 + updated_head1_filter.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 1, 0, 39, updated_head1_filter.min.1, (updated_head1_filter.extent.1 + updated_head1_filter.min.1) + -1))
 assert(0 <= updated_head1_filter.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 1, updated_head1_filter.extent.1))
 assert((updated_head1_filter.min.2 <= 0) && (7 <= (updated_head1_filter.extent.2 + updated_head1_filter.min.2)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 2, 0, 6, updated_head1_filter.min.2, (updated_head1_filter.extent.2 + updated_head1_filter.min.2) + -1))
 assert(0 <= updated_head1_filter.extent.2, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 2, updated_head1_filter.extent.2))
 assert((updated_head1_filter.min.3 <= 0) && (4 <= (updated_head1_filter.extent.3 + updated_head1_filter.min.3)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 3, 0, 3, updated_head1_filter.min.3, (updated_head1_filter.extent.3 + updated_head1_filter.min.3) + -1))
 assert(0 <= updated_head1_filter.extent.3, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 3, updated_head1_filter.extent.3))
 assert((updated_head2_bias.min.0 <= 0) && (24 <= (updated_head2_bias.extent.0 + updated_head2_bias.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head2_bias", 0, 0, 23, updated_head2_bias.min.0, (updated_head2_bias.extent.0 + updated_head2_bias.min.0) + -1))
 assert(0 <= updated_head2_bias.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head2_bias", 0, updated_head2_bias.extent.0))
 assert((updated_head2_bias.min.1 <= 0) && (4 <= (updated_head2_bias.extent.1 + updated_head2_bias.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head2_bias", 1, 0, 3, updated_head2_bias.min.1, (updated_head2_bias.extent.1 + updated_head2_bias.min.1) + -1))
 assert(0 <= updated_head2_bias.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head2_bias", 1, updated_head2_bias.extent.1))
 assert((updated_head2_filter.min.0 <= 0) && (24 <= (updated_head2_filter.extent.0 + updated_head2_filter.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head2_filter", 0, 0, 23, updated_head2_filter.min.0, (updated_head2_filter.extent.0 + updated_head2_filter.min.0) + -1))
 assert(0 <= updated_head2_filter.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head2_filter", 0, updated_head2_filter.extent.0))
 assert((updated_head2_filter.min.1 <= 0) && (39 <= (updated_head2_filter.extent.1 + updated_head2_filter.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head2_filter", 1, 0, 38, updated_head2_filter.min.1, (updated_head2_filter.extent.1 + updated_head2_filter.min.1) + -1))
 assert(0 <= updated_head2_filter.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head2_filter", 1, updated_head2_filter.extent.1))
 assert((updated_head2_filter.min.2 <= 0) && (4 <= (updated_head2_filter.extent.2 + updated_head2_filter.min.2)), halide_error_access_out_of_bounds("Output buffer updated_head2_filter", 2, 0, 3, updated_head2_filter.min.2, (updated_head2_filter.extent.2 + updated_head2_filter.min.2) + -1))
 assert(0 <= updated_head2_filter.extent.2, halide_error_buffer_extents_negative("Output buffer updated_head2_filter", 2, updated_head2_filter.extent.2))
 assert(bias1.stride.0 == 1, halide_error_constraint_violated("bias1.stride.0", bias1.stride.0, "1", 1))
 assert(bias1.min.0 == 0, halide_error_constraint_violated("bias1.min.0", bias1.min.0, "0", 0))
 assert(bias1.extent.0 == 32, halide_error_constraint_violated("bias1.extent.0", bias1.extent.0, "32", 32))
 assert(filter1.stride.0 == 1, halide_error_constraint_violated("filter1.stride.0", filter1.stride.0, "1", 1))
 assert(filter1.min.0 == 0, halide_error_constraint_violated("filter1.min.0", filter1.min.0, "0", 0))
 assert(filter1.extent.0 == 32, halide_error_constraint_violated("filter1.extent.0", filter1.extent.0, "32", 32))
 assert(filter1.min.1 == 0, halide_error_constraint_violated("filter1.min.1", filter1.min.1, "0", 0))
 assert(filter1.extent.1 == 32, halide_error_constraint_violated("filter1.extent.1", filter1.extent.1, "32", 32))
 assert(head1_bias.stride.0 == 1, halide_error_constraint_violated("head1_bias.stride.0", head1_bias.stride.0, "1", 1))
 assert(head1_bias.min.0 == 0, halide_error_constraint_violated("head1_bias.min.0", head1_bias.min.0, "0", 0))
 assert(head1_bias.extent.0 == 8, halide_error_constraint_violated("head1_bias.extent.0", head1_bias.extent.0, "8", 8))
 assert(head1_filter.stride.0 == 1, halide_error_constraint_violated("head1_filter.stride.0", head1_filter.stride.0, "1", 1))
 assert(head1_filter.min.0 == 0, halide_error_constraint_violated("head1_filter.min.0", head1_filter.min.0, "0", 0))
 assert(head1_filter.extent.0 == 8, halide_error_constraint_violated("head1_filter.extent.0", head1_filter.extent.0, "8", 8))
 assert(head1_filter.min.1 == 0, halide_error_constraint_violated("head1_filter.min.1", head1_filter.min.1, "0", 0))
 assert(head1_filter.extent.1 == 40, halide_error_constraint_violated("head1_filter.extent.1", head1_filter.extent.1, "40", 40))
 assert(head1_filter.min.2 == 0, halide_error_constraint_violated("head1_filter.min.2", head1_filter.min.2, "0", 0))
 assert(head1_filter.extent.2 == 7, halide_error_constraint_violated("head1_filter.extent.2", head1_filter.extent.2, "7", 7))
 assert(head2_bias.stride.0 == 1, halide_error_constraint_violated("head2_bias.stride.0", head2_bias.stride.0, "1", 1))
 assert(head2_bias.min.0 == 0, halide_error_constraint_violated("head2_bias.min.0", head2_bias.min.0, "0", 0))
 assert(head2_bias.extent.0 == 24, halide_error_constraint_violated("head2_bias.extent.0", head2_bias.extent.0, "24", 24))
 assert(head2_filter.stride.0 == 1, halide_error_constraint_violated("head2_filter.stride.0", head2_filter.stride.0, "1", 1))
 assert(head2_filter.min.0 == 0, halide_error_constraint_violated("head2_filter.min.0", head2_filter.min.0, "0", 0))
 assert(head2_filter.extent.0 == 24, halide_error_constraint_violated("head2_filter.extent.0", head2_filter.extent.0, "24", 24))
 assert(head2_filter.min.1 == 0, halide_error_constraint_violated("head2_filter.min.1", head2_filter.min.1, "0", 0))
 assert(head2_filter.extent.1 == 39, halide_error_constraint_violated("head2_filter.extent.1", head2_filter.extent.1, "39", 39))
 assert(pipeline_features.stride.0 == 1, halide_error_constraint_violated("pipeline_features.stride.0", pipeline_features.stride.0, "1", 1))
 assert(prediction_output.stride.0 == 1, halide_error_constraint_violated("prediction_output.stride.0", prediction_output.stride.0, "1", 1))
 assert(schedule_features.stride.0 == 1, halide_error_constraint_violated("schedule_features.stride.0", schedule_features.stride.0, "1", 1))
 assert(true_runtime.stride.0 == 1, halide_error_constraint_violated("true_runtime.stride.0", true_runtime.stride.0, "1", 1))
 assert(updated_bias1.stride.0 == 1, halide_error_constraint_violated("updated_bias1.stride.0", updated_bias1.stride.0, "1", 1))
 assert(updated_bias1.min.0 == 0, halide_error_constraint_violated("updated_bias1.min.0", updated_bias1.min.0, "0", 0))
 assert(updated_bias1.extent.0 == 32, halide_error_constraint_violated("updated_bias1.extent.0", updated_bias1.extent.0, "32", 32))
 assert(updated_bias1.min.1 == 0, halide_error_constraint_violated("updated_bias1.min.1", updated_bias1.min.1, "0", 0))
 assert(updated_bias1.extent.1 == 4, halide_error_constraint_violated("updated_bias1.extent.1", updated_bias1.extent.1, "4", 4))
 assert(updated_filter1.stride.0 == 1, halide_error_constraint_violated("updated_filter1.stride.0", updated_filter1.stride.0, "1", 1))
 assert(updated_filter1.min.0 == 0, halide_error_constraint_violated("updated_filter1.min.0", updated_filter1.min.0, "0", 0))
 assert(updated_filter1.extent.0 == 32, halide_error_constraint_violated("updated_filter1.extent.0", updated_filter1.extent.0, "32", 32))
 assert(updated_filter1.min.1 == 0, halide_error_constraint_violated("updated_filter1.min.1", updated_filter1.min.1, "0", 0))
 assert(updated_filter1.extent.1 == 32, halide_error_constraint_violated("updated_filter1.extent.1", updated_filter1.extent.1, "32", 32))
 assert(updated_filter1.min.2 == 0, halide_error_constraint_violated("updated_filter1.min.2", updated_filter1.min.2, "0", 0))
 assert(updated_filter1.extent.2 == 4, halide_error_constraint_violated("updated_filter1.extent.2", updated_filter1.extent.2, "4", 4))
 assert(updated_head1_bias.stride.0 == 1, halide_error_constraint_violated("updated_head1_bias.stride.0", updated_head1_bias.stride.0, "1", 1))
 assert(updated_head1_bias.min.0 == 0, halide_error_constraint_violated("updated_head1_bias.min.0", updated_head1_bias.min.0, "0", 0))
 assert(updated_head1_bias.extent.0 == 8, halide_error_constraint_violated("updated_head1_bias.extent.0", updated_head1_bias.extent.0, "8", 8))
 assert(updated_head1_bias.min.1 == 0, halide_error_constraint_violated("updated_head1_bias.min.1", updated_head1_bias.min.1, "0", 0))
 assert(updated_head1_bias.extent.1 == 4, halide_error_constraint_violated("updated_head1_bias.extent.1", updated_head1_bias.extent.1, "4", 4))
 assert(updated_head1_filter.stride.0 == 1, halide_error_constraint_violated("updated_head1_filter.stride.0", updated_head1_filter.stride.0, "1", 1))
 assert(updated_head1_filter.min.0 == 0, halide_error_constraint_violated("updated_head1_filter.min.0", updated_head1_filter.min.0, "0", 0))
 assert(updated_head1_filter.extent.0 == 8, halide_error_constraint_violated("updated_head1_filter.extent.0", updated_head1_filter.extent.0, "8", 8))
 assert(updated_head1_filter.min.1 == 0, halide_error_constraint_violated("updated_head1_filter.min.1", updated_head1_filter.min.1, "0", 0))
 assert(updated_head1_filter.extent.1 == 40, halide_error_constraint_violated("updated_head1_filter.extent.1", updated_head1_filter.extent.1, "40", 40))
 assert(updated_head1_filter.min.2 == 0, halide_error_constraint_violated("updated_head1_filter.min.2", updated_head1_filter.min.2, "0", 0))
 assert(updated_head1_filter.extent.2 == 7, halide_error_constraint_violated("updated_head1_filter.extent.2", updated_head1_filter.extent.2, "7", 7))
 assert(updated_head1_filter.min.3 == 0, halide_error_constraint_violated("updated_head1_filter.min.3", updated_head1_filter.min.3, "0", 0))
 assert(updated_head1_filter.extent.3 == 4, halide_error_constraint_violated("updated_head1_filter.extent.3", updated_head1_filter.extent.3, "4", 4))
 assert(updated_head2_bias.stride.0 == 1, halide_error_constraint_violated("updated_head2_bias.stride.0", updated_head2_bias.stride.0, "1", 1))
 assert(updated_head2_bias.min.0 == 0, halide_error_constraint_violated("updated_head2_bias.min.0", updated_head2_bias.min.0, "0", 0))
 assert(updated_head2_bias.extent.0 == 24, halide_error_constraint_violated("updated_head2_bias.extent.0", updated_head2_bias.extent.0, "24", 24))
 assert(updated_head2_bias.min.1 == 0, halide_error_constraint_violated("updated_head2_bias.min.1", updated_head2_bias.min.1, "0", 0))
 assert(updated_head2_bias.extent.1 == 4, halide_error_constraint_violated("updated_head2_bias.extent.1", updated_head2_bias.extent.1, "4", 4))
 assert(updated_head2_filter.stride.0 == 1, halide_error_constraint_violated("updated_head2_filter.stride.0", updated_head2_filter.stride.0, "1", 1))
 assert(updated_head2_filter.min.0 == 0, halide_error_constraint_violated("updated_head2_filter.min.0", updated_head2_filter.min.0, "0", 0))
 assert(updated_head2_filter.extent.0 == 24, halide_error_constraint_violated("updated_head2_filter.extent.0", updated_head2_filter.extent.0, "24", 24))
 assert(updated_head2_filter.min.1 == 0, halide_error_constraint_violated("updated_head2_filter.min.1", updated_head2_filter.min.1, "0", 0))
 assert(updated_head2_filter.extent.1 == 39, halide_error_constraint_violated("updated_head2_filter.extent.1", updated_head2_filter.extent.1, "39", 39))
 assert(updated_head2_filter.min.2 == 0, halide_error_constraint_violated("updated_head2_filter.min.2", updated_head2_filter.min.2, "0", 0))
 assert(updated_head2_filter.extent.2 == 4, halide_error_constraint_violated("updated_head2_filter.extent.2", updated_head2_filter.extent.2, "4", 4))
 let pipeline_features.total_extent.1 = int64(pipeline_features.extent.1)*int64(pipeline_features.extent.0)
 let pipeline_features.total_extent.2 = pipeline_features.total_extent.1*int64(pipeline_features.extent.2)
 let schedule_features.total_extent.1 = int64(schedule_features.extent.1)*int64(schedule_features.extent.0)
 let schedule_features.total_extent.2 = schedule_features.total_extent.1*int64(schedule_features.extent.2)
 assert((uint64)abs(int64(filter1.stride.1)*(int64)32) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter1", (uint64)abs(int64(filter1.stride.1)*(int64)32), (uint64)2147483647))
 assert((uint64)abs(int64(head1_filter.stride.1)*(int64)40) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("head1_filter", (uint64)abs(int64(head1_filter.stride.1)*(int64)40), (uint64)2147483647))
 assert((uint64)abs(int64(head1_filter.stride.2)*(int64)7) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("head1_filter", (uint64)abs(int64(head1_filter.stride.2)*(int64)7), (uint64)2147483647))
 assert((uint64)abs(int64(head2_filter.stride.1)*(int64)39) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("head2_filter", (uint64)abs(int64(head2_filter.stride.1)*(int64)39), (uint64)2147483647))
 assert(uint64(pipeline_features.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pipeline_features", uint64(pipeline_features.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(pipeline_features.extent.1)*int64(pipeline_features.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pipeline_features", (uint64)abs(int64(pipeline_features.extent.1)*int64(pipeline_features.stride.1)), (uint64)2147483647))
 assert(pipeline_features.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("pipeline_features", pipeline_features.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(pipeline_features.extent.2)*int64(pipeline_features.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pipeline_features", (uint64)abs(int64(pipeline_features.extent.2)*int64(pipeline_features.stride.2)), (uint64)2147483647))
 assert(pipeline_features.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("pipeline_features", pipeline_features.total_extent.2, (int64)2147483647))
 assert(uint64(prediction_output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("prediction_output", uint64(prediction_output.extent.0), (uint64)2147483647))
 assert(uint64(schedule_features.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("schedule_features", uint64(schedule_features.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(schedule_features.extent.1)*int64(schedule_features.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("schedule_features", (uint64)abs(int64(schedule_features.extent.1)*int64(schedule_features.stride.1)), (uint64)2147483647))
 assert(schedule_features.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("schedule_features", schedule_features.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(schedule_features.extent.2)*int64(schedule_features.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("schedule_features", (uint64)abs(int64(schedule_features.extent.2)*int64(schedule_features.stride.2)), (uint64)2147483647))
 assert(schedule_features.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("schedule_features", schedule_features.total_extent.2, (int64)2147483647))
 assert(uint64(true_runtime.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("true_runtime", uint64(true_runtime.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(updated_bias1.stride.1)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_bias1", (uint64)abs(int64(updated_bias1.stride.1)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_filter1.stride.1)*(int64)32) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_filter1", (uint64)abs(int64(updated_filter1.stride.1)*(int64)32), (uint64)2147483647))
 assert((uint64)abs(int64(updated_filter1.stride.2)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_filter1", (uint64)abs(int64(updated_filter1.stride.2)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_bias.stride.1)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_bias", (uint64)abs(int64(updated_head1_bias.stride.1)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_filter.stride.1)*(int64)40) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_filter", (uint64)abs(int64(updated_head1_filter.stride.1)*(int64)40), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_filter.stride.2)*(int64)7) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_filter", (uint64)abs(int64(updated_head1_filter.stride.2)*(int64)7), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_filter.stride.3)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_filter", (uint64)abs(int64(updated_head1_filter.stride.3)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head2_bias.stride.1)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head2_bias", (uint64)abs(int64(updated_head2_bias.stride.1)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head2_filter.stride.1)*(int64)39) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head2_filter", (uint64)abs(int64(updated_head2_filter.stride.1)*(int64)39), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head2_filter.stride.2)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head2_filter", (uint64)abs(int64(updated_head2_filter.stride.2)*(int64)4), (uint64)2147483647))
 assert(!bias1.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer bias1"))
 assert(!filter1.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer filter1"))
 assert(!head1_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head1_bias"))
 assert(!head1_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head1_filter"))
 assert(!head2_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head2_bias"))
 assert(!head2_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head2_filter"))
 assert(!loss_output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer loss_output"))
 assert(!pipeline_features.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pipeline_features"))
 assert(!prediction_output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer prediction_output"))
 assert(!schedule_features.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer schedule_features"))
 assert(!true_runtime.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer true_runtime"))
 assert(!updated_bias1.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_bias1"))
 assert(!updated_filter1.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_filter1"))
 assert(!updated_head1_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head1_bias"))
 assert(!updated_head1_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head1_filter"))
 assert(!updated_head2_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head2_bias"))
 assert(!updated_head2_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head2_filter"))
 assert(bias1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer bias1"))
 assert(filter1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer filter1"))
 assert(head1_bias != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer head1_bias"))
 assert(head1_filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer head1_filter"))
 assert(head2_bias != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer head2_bias"))
 assert(head2_filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer head2_filter"))
 assert(loss_output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer loss_output"))
 assert(pipeline_features != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer pipeline_features"))
 assert(prediction_output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer prediction_output"))
 assert(schedule_features != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer schedule_features"))
 assert(true_runtime != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer true_runtime"))
 assert(updated_bias1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer updated_bias1"))
 assert(updated_filter1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer updated_filter1"))
 assert(updated_head1_bias != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer updated_head1_bias"))
 assert(updated_head1_filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer updated_head1_filter"))
 assert(updated_head2_bias != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer updated_head2_bias"))
 assert(updated_head2_filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer updated_head2_filter"))
 allocate squashed_head1_filter[float32 * 8 * 40 * 7]
 produce squashed_head1_filter {
  parallel (squashed_head1_filter.s0.s.s.s, 0, 16) {
   if (squashed_head1_filter.s0.s.s.s < 12) {
    let t10120 = (squashed_head1_filter.s0.s.s.s/4)*2
    let t10121 = squashed_head1_filter.s0.s.s.s % 4
    for (squashed_head1_filter.s0.n.ni, 0, 2) {
     let t10123 = t10121*10
     let t10122 = squashed_head1_filter.s0.n.ni + t10120
     for (squashed_head1_filter.s0.s.si, 0, 10) {
      squashed_head1_filter[ramp((((t10122*40) + t10123) + squashed_head1_filter.s0.s.si)*8, 1, 8) aligned(8, 0)] = x8(1.000000f)/((float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp((head1_filter.stride.2*t10122) + ((squashed_head1_filter.s0.s.si + t10123)*head1_filter.stride.1), 1, 8)]) + x8(1.000000f))
     }
    }
   } else {
    let t10124 = (squashed_head1_filter.s0.s.s.s % 4)*10
    let t10125 = head1_filter.stride.2*6
    for (squashed_head1_filter.s0.s.si, 0, 10) {
     let t9912 = squashed_head1_filter.s0.s.si + t10124
     squashed_head1_filter[ramp((t9912*8) + 1920, 1, 8) aligned(8, 0)] = x8(1.000000f)/((float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp((head1_filter.stride.1*t9912) + t10125, 1, 8)]) + x8(1.000000f))
    }
   }
  }
 }
 allocate head1_conv[float32 * 8 * max(num_stages, 1)]
 produce head1_conv {
  let t10126 = max(num_stages, 1)
  parallel (head1_conv.s0.w, 0, t10126) {
   head1_conv[ramp(head1_conv.s0.w*8, 1, 8) aligned(8, 0)] = head1_bias[ramp(0, 1, 8)]
  }
  consume squashed_head1_filter {
   let t10127 = max(num_stages, 1)
   let t10128 = ((pipeline_features.min.2*pipeline_features.stride.2) + (pipeline_features.min.1*pipeline_features.stride.1)) + pipeline_features.min.0
   parallel (head1_conv.s1.w, 0, t10127) {
    let t10129 = head1_conv.s1.w*8
    let t10130 = (head1_conv.s1.w*pipeline_features.stride.2) - t10128
    for (head1_conv.s1.r31$y, 0, 7) {
     let t10131 = head1_conv.s1.r31$y*40
     let t10132 = (head1_conv.s1.r31$y*pipeline_features.stride.1) + t10130
     for (head1_conv.s1.r31$x, 0, 40) {
      allocate squashed_head1_filter_broadcast[float32 * 8] in Stack
      produce squashed_head1_filter_broadcast {
       squashed_head1_filter_broadcast[ramp(0, 1, 8)] = squashed_head1_filter[ramp((head1_conv.s1.r31$x + t10131)*8, 1, 8) aligned(8, 0)]
      }
      consume squashed_head1_filter_broadcast {
       head1_conv[ramp(t10129, 1, 8) aligned(8, 0)] = head1_conv[ramp(t10129, 1, 8) aligned(8, 0)] + (squashed_head1_filter_broadcast[ramp(0, 1, 8)]*x8(pipeline_features[head1_conv.s1.r31$x + t10132]))
      }
      free squashed_head1_filter_broadcast
     }
    }
   }
  }
  free squashed_head1_filter
 }
 let normalized_schedule_features.s.extent_realized = let t9913 = (max(head2_conv.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in max(max(min(max(min(num_stages, 2), 1) + ((min((((((t9913 + 39)/40)*((max(num_stages, 1) + 1)/2))*2) + -1)/((t9913 + 39)/40), (((max(num_stages, 1) + 1)/2)*2) + -1)/2)*2), 1), num_stages), min(max(num_stages, 1), max(min(num_stages, 7), 1) + (((max(num_stages, 1) + -1)/7)*7)))
 let normalized_schedule_features.n.extent_realized = let t9917 = (max(head2_conv.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (let t9919 = (max(normalized_schedule_features.s0.n.max.s, 1) - min(prediction_output.min.0, 0)) in (max(max(min(max(head2_conv.s1.n.max.s, 1), (min((t9917 + -1)/8, 4)*8) + (min(min(prediction_output.min.0, 0) + (((t9917 + -1)/40)*40), max(head2_conv.s1.n.max.s, 1) + -1) + min(t9917, 8))), batch_size), min(max(normalized_schedule_features.s0.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9919 + -1)/8)*8), max(normalized_schedule_features.s0.n.max.s, 1) + -1) + min(t9919, 8))) - min(prediction_output.min.0, 0)))
 allocate normalized_schedule_features[float32 * normalized_schedule_features.n.extent_realized * 39 * normalized_schedule_features.s.extent_realized]
 let normalized_schedule_features.s0.n.n.loop_extent.s = max(normalized_schedule_features.s0.n.max.s, 1) - min(prediction_output.min.0, 0)
 produce normalized_schedule_features {
  let t10141 = max(num_stages, 1)
  let t10142 = min(prediction_output.min.0, 0)
  let t10143 = max(normalized_schedule_features.s0.n.max.s, 1)
  let t10144 = t10143 - t10142
  let t10135 = min(normalized_schedule_features.s0.n.n.loop_extent.s + 7, t10144)
  let t10138 = min(normalized_schedule_features.s0.n.n.loop_extent.s, t10144)
  let t10134 = (t10141/7)*8
  let t10133 = ((t10141 + 6)/7)*8
  let t10137 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
  parallel (normalized_schedule_features.s0.c.c.c, 0, t10133) {
   if (normalized_schedule_features.s0.c.c.c < t10134) {
    let t10150 = (normalized_schedule_features.s0.c.c.c % 8)*5
    let t10151 = t10135/8
    let t10147 = (normalized_schedule_features.s0.c.c.c/8)*7
    let t10149 = ((t10138 + 7)/8) - t10151
    let t10145 = 39 - max(t10150, 34)
    for (normalized_schedule_features.s0.s.si, 0, 7) {
     let t10154 = normalized_schedule_features.s0.s.si + t10147
     let t10153 = ((normalized_schedule_features.n.extent_realized*t10154)*39) - t10142
     let t10152 = (schedule_features.stride.2*t10154) - t10137
     for (normalized_schedule_features.s0.c.ci, 0, t10145) {
      let t10157 = normalized_schedule_features.s0.c.ci + t10150
      let t10155 = (schedule_features.stride.1*t10157) + t10152
      let t10156 = (normalized_schedule_features.n.extent_realized*t10157) + t10153
      for (normalized_schedule_features.s0.n.n, 0, t10151) {
       let normalized_schedule_features.s0.n.ni.base = (normalized_schedule_features.s0.n.n*8) + t10142
       let t9223 = (int32x8)reinterpret(schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t10155, 1, 8)] + x8(1.000000f))
       let t9224 = (int32x8)bitwise_and(t9223, x8(-2139095041))
       let t9225 = (float32x8)reinterpret((int32x8)bitwise_or(t9224, ((int32x8)shift_right(t9224, x8((uint32)22))*x8(-8388608)) + x8(1065353216)))
       let t9226 = (t9225 + x8(-1.000000f))*(t9225 + x8(-1.000000f))
       normalized_schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t10156, 1, 8)] = (float32x8((((int32x8)shift_right(t9224, x8((uint32)22)) + (int32x8)shift_right(t9223, x8((uint32)23))) + x8(-127)))*x8(0.693147f)) + ((((((((t9226*x8(0.076403f)) + x8(0.206252f))*t9226) + x8(0.333205f))*t9226) + x8(1.000000f))*(t9225 + x8(-1.000000f))) + (((((t9226*x8(-0.162530f)) + x8(-0.251103f))*t9226) + x8(-0.499975f))*t9226))
      }
      let t10160 = normalized_schedule_features.s0.c.ci + t10150
      let t10158 = (schedule_features.stride.1*t10160) + t10152
      let t10159 = (normalized_schedule_features.n.extent_realized*t10160) + t10153
      for (normalized_schedule_features.s0.n.n.rebased, 0, t10149) {
       let normalized_schedule_features.s0.n.ni.base = ((normalized_schedule_features.s0.n.n.rebased + t10151)*8) + t10142
       let t10161 = min(t10143 - normalized_schedule_features.s0.n.ni.base, 8)
       let t10163 = normalized_schedule_features.s0.n.ni.base + t10159
       let t10162 = normalized_schedule_features.s0.n.ni.base + t10158
       for (normalized_schedule_features.s0.n.ni, 0, t10161) {
        let t9230 = reinterpret(schedule_features[normalized_schedule_features.s0.n.ni + t10162] + 1.000000f)
        let t9231 = bitwise_and(t9230, -2139095041)
        let t9232 = (float32)reinterpret(bitwise_or(t9231, ((t9231/4194304)*-8388608) + 1065353216))
        let t9233 = (t9232 + -1.000000f)*(t9232 + -1.000000f)
        normalized_schedule_features[normalized_schedule_features.s0.n.ni + t10163] = (float32((((t9230/8388608) + (t9231/4194304)) + -127))*0.693147f) + ((((((((t9233*0.076403f) + 0.206252f)*t9233) + 0.333205f)*t9233) + 1.000000f)*(t9232 + -1.000000f)) + (((((t9233*-0.162530f) + -0.251103f)*t9233) + -0.499975f)*t9233))
       }
      }
     }
    }
   } else {
    let normalized_schedule_features.s0.s.si.new_max.s = t10141 - ((normalized_schedule_features.s0.c.c.c/8)*7)
    let t10169 = (normalized_schedule_features.s0.c.c.c % 8)*5
    let t10164 = min(normalized_schedule_features.s0.s.si.new_max.s, 7)
    let t10166 = (t10138 + 7)/8
    let t10167 = (normalized_schedule_features.s0.c.c.c/8)*7
    let t10165 = 39 - max(t10169, 34)
    for (normalized_schedule_features.s0.s.si, 0, t10164) {
     let t10172 = normalized_schedule_features.s0.s.si + t10167
     let t10171 = ((normalized_schedule_features.n.extent_realized*t10172)*39) - t10142
     let t10170 = (schedule_features.stride.2*t10172) - t10137
     for (normalized_schedule_features.s0.c.ci, 0, t10165) {
      let t10175 = normalized_schedule_features.s0.c.ci + t10169
      let t10173 = (schedule_features.stride.1*t10175) + t10170
      let t10174 = (normalized_schedule_features.n.extent_realized*t10175) + t10171
      for (normalized_schedule_features.s0.n.n, 0, t10166) {
       let normalized_schedule_features.s0.n.ni.base = (normalized_schedule_features.s0.n.n*8) + t10142
       if ((normalized_schedule_features.s0.n.ni.base + 8) <= t10143) {
        let t9236 = (int32x8)reinterpret(schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t10173, 1, 8)] + x8(1.000000f))
        let t9237 = (int32x8)bitwise_and(t9236, x8(-2139095041))
        let t9238 = (float32x8)reinterpret((int32x8)bitwise_or(t9237, ((int32x8)shift_right(t9237, x8((uint32)22))*x8(-8388608)) + x8(1065353216)))
        let t9239 = (t9238 + x8(-1.000000f))*(t9238 + x8(-1.000000f))
        normalized_schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t10174, 1, 8)] = (float32x8((((int32x8)shift_right(t9237, x8((uint32)22)) + (int32x8)shift_right(t9236, x8((uint32)23))) + x8(-127)))*x8(0.693147f)) + ((((((((t9239*x8(0.076403f)) + x8(0.206252f))*t9239) + x8(0.333205f))*t9239) + x8(1.000000f))*(t9238 + x8(-1.000000f))) + (((((t9239*x8(-0.162530f)) + x8(-0.251103f))*t9239) + x8(-0.499975f))*t9239))
       } else {
        let t10176 = min(t10143 - normalized_schedule_features.s0.n.ni.base, 8)
        let t10178 = normalized_schedule_features.s0.n.ni.base + t10174
        let t10177 = normalized_schedule_features.s0.n.ni.base + t10173
        for (normalized_schedule_features.s0.n.ni, 0, t10176) {
         let t9243 = reinterpret(schedule_features[normalized_schedule_features.s0.n.ni + t10177] + 1.000000f)
         let t9244 = bitwise_and(t9243, -2139095041)
         let t9245 = (float32)reinterpret(bitwise_or(t9244, ((t9244/4194304)*-8388608) + 1065353216))
         let t9246 = (t9245 + -1.000000f)*(t9245 + -1.000000f)
         normalized_schedule_features[normalized_schedule_features.s0.n.ni + t10178] = (float32((((t9243/8388608) + (t9244/4194304)) + -127))*0.693147f) + ((((((((t9246*0.076403f) + 0.206252f)*t9246) + 0.333205f)*t9246) + 1.000000f)*(t9245 + -1.000000f)) + (((((t9246*-0.162530f) + -0.251103f)*t9246) + -0.499975f)*t9246))
        }
       }
      }
     }
    }
   }
  }
 }
 let head2_conv.n.extent_realized = let t9922 = (max(head2_conv.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (let t9924 = (max(head2_relu.s0.n.max.s, 1) - min(prediction_output.min.0, 0)) in (max(max(max(min(max(head2_conv.s1.n.max.s, 1), (min((t9922 + -1)/8, 4)*8) + (min(min(prediction_output.min.0, 0) + (((t9922 + -1)/40)*40), max(head2_conv.s1.n.max.s, 1) + -1) + min(t9922, 8))), min(max(head2_relu.s0.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9924 + -1)/8)*8), max(head2_relu.s0.n.max.s, 1) + -1) + min(t9924, 8))), min(min(batch_size, 5) + (((batch_size + -1)/5)*5), batch_size)), 1) - min(prediction_output.min.0, 0)))
 allocate head2_conv[float32 * 24 * (pipeline_features.extent.2.required.s + 1) * head2_conv.n.extent_realized]
 let head2_conv.s0.n.n.loop_extent.s = max(head2_conv.s1.n.max.s, 1) - min(prediction_output.min.0, 0)
 let head2_conv.s0.n.n.n.loop_extent.s = ((head2_conv.s0.n.n.loop_extent.s + 39)/40)*((max(num_stages, 1) + 1)/2)
 let head2_conv.s1.n.n.n.loop_extent.s = ((head2_conv.s0.n.n.loop_extent.s + 39)/40)*((max(num_stages, 1) + 1)/2)
 produce head2_conv {
  let t10182 = max(num_stages, 1)
  let t10183 = max(head2_conv.s1.n.max.s, 1)
  let t10180 = min(prediction_output.min.0, 0)
  let t10184 = min(num_stages, 1)
  let t10181 = (head2_conv.s0.n.n.loop_extent.s + 39)/40
  let t10179 = head2_conv.s0.n.n.n.loop_extent.s*2
  parallel (head2_conv.s0.n.n.n, 0, t10179) {
   let head2_conv.s0.n.ni.base = ((head2_conv.s0.n.n.n % t10181)*40) + t10180
   let head2_conv.s0.c.ci.base.s = head2_conv.s0.n.n.n/t10181
   let head2_conv.s0.w.wi.epilogue.s = t10182 - ((head2_conv.s0.c.ci.base.s/2)*2)
   let t10192 = t10183 - head2_conv.s0.n.ni.base
   let t10193 = max(min(t10192/8, 5), 0)
   let t10185 = max(min(head2_conv.s0.w.wi.epilogue.s, 2), 0)
   let t10190 = max(min((t10192 + 7)/8, 5) - t10193, 0)
   let t10187 = (head2_conv.s0.c.ci.base.s % 2)*12
   let t10189 = ((head2_conv.s0.c.ci.base.s/2)*2) - t10184
   let t10188 = head2_conv.s0.n.ni.base - t10180
   for (head2_conv.s0.w.wi, 0, t10185) {
    let t10195 = max(min(t10192/8, 5), 0)
    let t10194 = ((((head2_conv.s0.w.wi + t10189) + 1)*head2_conv.n.extent_realized)*24) + t10188
    for (head2_conv.s0.c.ci, 0, 12) {
     let t10196 = head2_conv.s0.c.ci + t10187
     for (head2_conv.s0.n.ni.ni, 0, t10193) {
      head2_conv[ramp((head2_conv.s0.n.ni.ni*8) + ((head2_conv.n.extent_realized*t10196) + t10194), 1, 8)] = x8(head2_bias[t10196])
     }
     let t10197 = head2_conv.s0.c.ci + t10187
     for (head2_conv.s0.n.ni.ni.rebased, 0, t10190) {
      let head2_conv.s0.n.ni.nii.new_max.s = t10192 - ((head2_conv.s0.n.ni.ni.rebased + t10195)*8)
      let t10198 = min(head2_conv.s0.n.ni.nii.new_max.s, 8)
      let t10199 = ((head2_conv.s0.n.ni.ni.rebased + t10193)*8) + ((head2_conv.n.extent_realized*t10197) + t10194)
      for (head2_conv.s0.n.ni.nii, 0, t10198) {
       head2_conv[head2_conv.s0.n.ni.nii + t10199] = head2_bias[t10197]
      }
     }
    }
   }
  }
  consume normalized_schedule_features {
   let t10203 = max(num_stages, 1)
   let t10204 = max(head2_conv.s1.n.max.s, 1)
   let t10201 = min(prediction_output.min.0, 0)
   let t10205 = min(num_stages, 1)
   let t10202 = (head2_conv.s0.n.n.loop_extent.s + 39)/40
   let t10200 = head2_conv.s1.n.n.n.loop_extent.s*2
   parallel (head2_conv.s1.n.n.n, 0, t10200) {
    let head2_conv.s1.n.ni.base = ((head2_conv.s1.n.n.n % t10202)*40) + t10201
    let head2_conv.s1.c.ci.base.s = head2_conv.s1.n.n.n/t10202
    let head2_conv.s1.w.wi.epilogue.s = t10203 - ((head2_conv.s1.c.ci.base.s/2)*2)
    let t10214 = t10204 - head2_conv.s1.n.ni.base
    let t10215 = (head2_conv.s1.c.ci.base.s/2)*2
    let t10216 = max(min(t10214/8, 5), 0)
    let t10206 = max(min(head2_conv.s1.w.wi.epilogue.s, 2), 0)
    let t10212 = max(min((t10214 + 7)/8, 5) - t10216, 0)
    let t10210 = (head2_conv.s1.c.ci.base.s % 2)*12
    let t10209 = t10215 - t10205
    let t10208 = head2_conv.s1.n.ni.base - t10201
    for (head2_conv.s1.w.wi, 0, t10206) {
     let t10219 = max(min(t10214/8, 5), 0)
     let t10217 = (((head2_conv.s1.w.wi + t10209) + 1)*head2_conv.n.extent_realized)*24
     let t10218 = ((head2_conv.s1.w.wi + t10215)*normalized_schedule_features.n.extent_realized)*39
     for (head2_conv.s1.c.ci, 0, 12) {
      let t10222 = head2_conv.s1.c.ci + t10210
      let t10220 = (head2_conv.n.extent_realized*t10222) + t10217
      for (head2_conv.s1.n.ni.ni, 0, t10216) {
       let t10223 = (head2_conv.s1.n.ni.ni*8) + t10208
       for (head2_conv.s1.r40$x, 0, 39) {
        let t9929 = t10220 + t10223
        head2_conv[ramp(t9929, 1, 8)] = head2_conv[ramp(t9929, 1, 8)] + (normalized_schedule_features[ramp((head2_conv.s1.r40$x*normalized_schedule_features.n.extent_realized) + (t10218 + t10223), 1, 8)]*x8(head2_filter[(head2_conv.s1.r40$x*head2_filter.stride.1) + t10222]))
       }
      }
      let t10226 = head2_conv.s1.c.ci + t10210
      let t10224 = (head2_conv.n.extent_realized*t10226) + t10217
      for (head2_conv.s1.n.ni.ni.rebased, 0, t10212) {
       let t10227 = t10214 - ((head2_conv.s1.n.ni.ni.rebased + t10219)*8)
       let t10228 = ((head2_conv.s1.n.ni.ni.rebased + t10216)*8) + t10208
       for (head2_conv.s1.r40$x, 0, 39) {
        let t10229 = min(t10227, 8)
        let t10231 = (head2_conv.s1.r40$x*normalized_schedule_features.n.extent_realized) + t10218
        let t10230 = (head2_conv.s1.r40$x*head2_filter.stride.1) + t10226
        for (head2_conv.s1.n.ni.nii, 0, t10229) {
         let t9260 = head2_conv.s1.n.ni.nii + t10228
         let t9932 = t10224 + t9260
         head2_conv[t9932] = head2_conv[t9932] + (head2_filter[t10230]*normalized_schedule_features[t10231 + t9260])
        }
       }
      }
     }
    }
   }
  }
 }
 let head2_relu.n.extent_realized = let t9935 = (max(conv1_stage2.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (let t9937 = (max(head2_relu.s0.n.max.s, 1) - min(prediction_output.min.0, 0)) in (max(max(min(max(conv1_stage2.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9935 + -1)/8)*8), max(conv1_stage2.s1.n.max.s, 1) + -1) + min(t9935, 8)), batch_size), min(max(head2_relu.s0.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9937 + -1)/8)*8), max(head2_relu.s0.n.max.s, 1) + -1) + min(t9937, 8))) - min(prediction_output.min.0, 0)))
 allocate head2_relu[float32 * 24 * max(num_stages, 1) * head2_relu.n.extent_realized]
 let head2_relu.s0.n.n.loop_extent.s = max(head2_relu.s0.n.max.s, 1) - min(prediction_output.min.0, 0)
 produce head2_relu {
  consume head2_conv {
   let t10240 = max(num_stages, 1)
   let t10241 = min(prediction_output.min.0, 0)
   let t10242 = max(head2_relu.s0.n.max.s, 1)
   let t10243 = t10242 - t10241
   let t10234 = min(head2_relu.s0.n.n.loop_extent.s + 7, t10243)
   let t10237 = min(head2_relu.s0.n.n.loop_extent.s, t10243)
   let t10236 = min(num_stages, 1)
   let t10233 = (t10240/7)*8
   let t10232 = ((t10240 + 6)/7)*8
   parallel (head2_relu.s0.c.c.c, 0, t10232) {
    if (head2_relu.s0.c.c.c < t10233) {
     let t10249 = (head2_relu.s0.c.c.c/8)*7
     let t10250 = t10234/8
     let t10245 = (head2_relu.s0.c.c.c % 8)*3
     let t10248 = ((t10237 + 7)/8) - t10250
     let t10246 = t10249 - t10236
     for (head2_relu.s0.w.wi, 0, 7) {
      let t10251 = (((head2_relu.s0.w.wi + t10246) + 1)*head2_conv.n.extent_realized)*24
      let t10252 = ((head2_relu.s0.w.wi + t10249)*head2_relu.n.extent_realized)*24
      for (head2_relu.s0.c.ci, 0, 3) {
       let t10253 = head2_relu.s0.c.ci + t10245
       for (head2_relu.s0.n.n, 0, t10250) {
        let head2_relu.s0.n.ni.base = (head2_relu.s0.n.n*8) + t10241
        let t9269 = head2_relu.s0.n.ni.base - t10241
        head2_relu[ramp(((head2_relu.n.extent_realized*t10253) + t10252) + t9269, 1, 8)] = max(head2_conv[ramp(((head2_conv.n.extent_realized*t10253) + t10251) + t9269, 1, 8)], x8(0.000000f))
       }
       let t10254 = head2_relu.s0.c.ci + t10245
       for (head2_relu.s0.n.n.rebased, 0, t10248) {
        let head2_relu.s0.n.ni.base = ((head2_relu.s0.n.n.rebased + t10250)*8) + t10241
        let t10255 = min(t10242 - head2_relu.s0.n.ni.base, 8)
        let t10256 = head2_relu.s0.n.ni.base - t10241
        let t10258 = (head2_relu.n.extent_realized*t10254) + t10252
        let t10257 = (head2_conv.n.extent_realized*t10254) + t10251
        for (head2_relu.s0.n.ni, 0, t10255) {
         let t9272 = head2_relu.s0.n.ni + t10256
         head2_relu[t10258 + t9272] = max(head2_conv[t10257 + t9272], 0.000000f)
        }
       }
      }
     }
    } else {
     let head2_relu.s0.w.wi.new_max.s = t10240 - ((head2_relu.s0.c.c.c/8)*7)
     let t10264 = (head2_relu.s0.c.c.c/8)*7
     let t10259 = min(head2_relu.s0.w.wi.new_max.s, 7)
     let t10260 = (t10237 + 7)/8
     let t10261 = (head2_relu.s0.c.c.c % 8)*3
     let t10262 = t10264 - t10236
     for (head2_relu.s0.w.wi, 0, t10259) {
      let t10265 = (((head2_relu.s0.w.wi + t10262) + 1)*head2_conv.n.extent_realized)*24
      let t10266 = ((head2_relu.s0.w.wi + t10264)*head2_relu.n.extent_realized)*24
      for (head2_relu.s0.c.ci, 0, 3) {
       let t10267 = head2_relu.s0.c.ci + t10261
       for (head2_relu.s0.n.n, 0, t10260) {
        let head2_relu.s0.n.ni.base = (head2_relu.s0.n.n*8) + t10241
        if ((head2_relu.s0.n.ni.base + 8) <= t10242) {
         let t9275 = head2_relu.s0.n.ni.base - t10241
         head2_relu[ramp(((head2_relu.n.extent_realized*t10267) + t10266) + t9275, 1, 8)] = max(head2_conv[ramp(((head2_conv.n.extent_realized*t10267) + t10265) + t9275, 1, 8)], x8(0.000000f))
        } else {
         let t10268 = min(t10242 - head2_relu.s0.n.ni.base, 8)
         let t10269 = head2_relu.s0.n.ni.base - t10241
         let t10271 = (head2_relu.n.extent_realized*t10267) + t10266
         let t10270 = (head2_conv.n.extent_realized*t10267) + t10265
         for (head2_relu.s0.n.ni, 0, t10268) {
          let t9278 = head2_relu.s0.n.ni + t10269
          head2_relu[t10271 + t9278] = max(head2_conv[t10270 + t9278], 0.000000f)
         }
        }
       }
      }
     }
    }
   }
  }
 }
 let conv1_stage2.n.extent_realized = let t9944 = (max(conv1_stage2.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (let t9946 = (max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (max(max(max(min(max(conv1_stage2.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9944 + -1)/8)*8), max(conv1_stage2.s1.n.max.s, 1) + -1) + min(t9944, 8)), min(max(f1.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9946 + -1)/8)*8), max(f1.s1.n.max.s, 1) + -1) + min(t9946, 8))), min(min(batch_size, 8) + (((batch_size + -1)/8)*8), batch_size)), 1) - min(prediction_output.min.0, 0)))
 allocate conv1_stage2[float32 * 32 * (pipeline_features.extent.2.required.s + 1) * conv1_stage2.n.extent_realized]
 let conv1_stage2.s0.n.n.loop_extent.s = max(conv1_stage2.s1.n.max.s, 1) - min(prediction_output.min.0, 0)
 produce conv1_stage2 {
  consume head1_conv {
   let t10281 = max(num_stages, 1)
   let t10282 = min(prediction_output.min.0, 0)
   let t10283 = max(conv1_stage2.s1.n.max.s, 1)
   let t10284 = t10283 - t10282
   let t10275 = min(conv1_stage2.s0.n.n.loop_extent.s + 7, t10284)
   let t10278 = min(conv1_stage2.s0.n.n.loop_extent.s, t10284)
   let t10277 = min(num_stages, 1)
   let t10280 = (t10281 + -1)/2
   let t10273 = (t10281/4)*4
   let t10272 = ((t10281 + 3)/4)*4
   parallel (conv1_stage2.s0.c.c.c, 0, t10272) {
    if (conv1_stage2.s0.c.c.c < t10273) {
     let conv1_stage1.w.extent_realized.s = t10281 - ((conv1_stage2.s0.c.c.c/4)*4)
     allocate conv1_stage1[float32 * 32]
     produce conv1_stage1 {
      let t10285 = min(conv1_stage1.w.extent_realized.s, 4)
      let t10286 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s0.w.rebased, 0, t10285) {
       conv1_stage1[ramp(conv1_stage1.s0.w.rebased*8, 1, 8) aligned(8, 0)] = bias1[ramp(t10286, 1, 8) aligned(8, 0)]
      }
      let t10287 = min(conv1_stage1.w.extent_realized.s, 4)
      let t10289 = (conv1_stage2.s0.c.c.c/4)*4
      let t10288 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s1.r54$x, 0, 8) {
       let t10290 = (conv1_stage1.s1.r54$x*filter1.stride.1) + t10288
       for (conv1_stage1.s1.w.rebased, 0, t10287) {
        conv1_stage1[ramp(conv1_stage1.s1.w.rebased*8, 1, 8) aligned(8, 0)] = conv1_stage1[ramp(conv1_stage1.s1.w.rebased*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t10290, 1, 8)]*x8(head1_conv[((conv1_stage1.s1.w.rebased + t10289)*8) + conv1_stage1.s1.r54$x]))
       }
      }
     }
     consume conv1_stage1 {
      let t10295 = t10275/8
      let t10291 = (conv1_stage2.s0.c.c.c/4)*4
      let t10293 = (conv1_stage2.s0.c.c.c % 4)*8
      let t10294 = ((t10278 + 7)/8) - t10295
      for (conv1_stage2.s0.w.wi.wi, 0, 2) {
       let t10298 = conv1_stage2.s0.w.wi.wi*2
       let t10296 = t10291 + t10298
       for (conv1_stage2.s0.w.wi.wii, 0, 2) {
        let conv1_stage2.s0.w = conv1_stage2.s0.w.wi.wii + t10296
        let t10299 = (conv1_stage2.s0.w.wi.wii + t10298)*8
        let t10300 = ((((conv1_stage2.s0.w - t10277) + 1)*conv1_stage2.n.extent_realized)*32) - t10282
        for (conv1_stage2.s0.c.ci, 0, 8) {
         let t10302 = ((conv1_stage2.s0.c.ci + t10293)*conv1_stage2.n.extent_realized) + t10300
         let t10301 = conv1_stage2.s0.c.ci + t10299
         for (conv1_stage2.s0.n.n, 0, t10295) {
          let conv1_stage2.s0.n.ni.base = (conv1_stage2.s0.n.n*8) + t10282
          conv1_stage2[ramp(conv1_stage2.s0.n.ni.base + t10302, 1, 8)] = x8(conv1_stage1[t10301])
         }
         let t10304 = ((conv1_stage2.s0.c.ci + t10293)*conv1_stage2.n.extent_realized) + t10300
         let t10303 = conv1_stage2.s0.c.ci + t10299
         for (conv1_stage2.s0.n.n.rebased, 0, t10294) {
          let conv1_stage2.s0.n.ni.base = ((conv1_stage2.s0.n.n.rebased + t10295)*8) + t10282
          let t10305 = min(t10283 - conv1_stage2.s0.n.ni.base, 8)
          let t10306 = conv1_stage2.s0.n.ni.base + t10304
          for (conv1_stage2.s0.n.ni, 0, t10305) {
           conv1_stage2[conv1_stage2.s0.n.ni + t10306] = conv1_stage1[t10303]
          }
         }
        }
       }
      }
     }
     free conv1_stage1
    } else {
     let conv1_stage1.w.extent_realized.s = t10281 - ((conv1_stage2.s0.c.c.c/4)*4)
     allocate conv1_stage1[float32 * 32]
     produce conv1_stage1 {
      let t10307 = min(conv1_stage1.w.extent_realized.s, 4)
      let t10308 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s0.w.rebased, 0, t10307) {
       conv1_stage1[ramp(conv1_stage1.s0.w.rebased*8, 1, 8) aligned(8, 0)] = bias1[ramp(t10308, 1, 8) aligned(8, 0)]
      }
      let t10309 = min(conv1_stage1.w.extent_realized.s, 4)
      let t10311 = (conv1_stage2.s0.c.c.c/4)*4
      let t10310 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s1.r54$x, 0, 8) {
       let t10312 = (conv1_stage1.s1.r54$x*filter1.stride.1) + t10310
       for (conv1_stage1.s1.w.rebased, 0, t10309) {
        conv1_stage1[ramp(conv1_stage1.s1.w.rebased*8, 1, 8) aligned(8, 0)] = conv1_stage1[ramp(conv1_stage1.s1.w.rebased*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t10312, 1, 8)]*x8(head1_conv[((conv1_stage1.s1.w.rebased + t10311)*8) + conv1_stage1.s1.r54$x]))
       }
      }
     }
     consume conv1_stage1 {
      let conv1_stage2.s0.w.wi.wi.new_max.s = t10280 - ((conv1_stage2.s0.c.c.c/4)*2)
      let t10318 = conv1_stage2.s0.c.c.c/4
      let t10313 = min(conv1_stage2.s0.w.wi.wi.new_max.s, 1)
      let t10316 = (t10278 + 7)/8
      let t10315 = t10318*4
      let t10314 = t10318*2
      let t10317 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage2.s0.w.wi.wi, 0, t10313 + 1) {
       let conv1_stage2.s0.w.wi.wii.new_max.s = t10281 - ((conv1_stage2.s0.w.wi.wi + t10314)*2)
       let t10322 = conv1_stage2.s0.w.wi.wi*2
       let t10319 = min(conv1_stage2.s0.w.wi.wii.new_max.s, 2)
       let t10320 = t10315 + t10322
       for (conv1_stage2.s0.w.wi.wii, 0, t10319) {
        let conv1_stage2.s0.w = conv1_stage2.s0.w.wi.wii + t10320
        let t10323 = (conv1_stage2.s0.w.wi.wii + t10322)*8
        let t10324 = ((((conv1_stage2.s0.w - t10277) + 1)*conv1_stage2.n.extent_realized)*32) - t10282
        for (conv1_stage2.s0.c.ci, 0, 8) {
         let t10326 = ((conv1_stage2.s0.c.ci + t10317)*conv1_stage2.n.extent_realized) + t10324
         let t10325 = conv1_stage2.s0.c.ci + t10323
         for (conv1_stage2.s0.n.n, 0, t10316) {
          let conv1_stage2.s0.n.ni.base = (conv1_stage2.s0.n.n*8) + t10282
          if ((conv1_stage2.s0.n.ni.base + 8) <= t10283) {
           conv1_stage2[ramp(conv1_stage2.s0.n.ni.base + t10326, 1, 8)] = x8(conv1_stage1[t10325])
          } else {
           let t10327 = min(t10283 - conv1_stage2.s0.n.ni.base, 8)
           let t10328 = conv1_stage2.s0.n.ni.base + t10326
           for (conv1_stage2.s0.n.ni, 0, t10327) {
            conv1_stage2[conv1_stage2.s0.n.ni + t10328] = conv1_stage1[t10325]
           }
          }
         }
        }
       }
      }
     }
     free conv1_stage1
    }
   }
  }
  consume head2_relu {
   let t10337 = max(num_stages, 1)
   let t10338 = min(prediction_output.min.0, 0)
   let t10339 = max(conv1_stage2.s1.n.max.s, 1)
   let t10340 = t10339 - t10338
   let t10331 = min(conv1_stage2.s0.n.n.loop_extent.s + 7, t10340)
   let t10334 = min(conv1_stage2.s0.n.n.loop_extent.s, t10340)
   let t10333 = min(num_stages, 1)
   let t10330 = (t10337/2)*4
   let t10329 = ((t10337 + 1)/2)*4
   parallel (conv1_stage2.s1.c.c.c, 0, t10329) {
    if (conv1_stage2.s1.c.c.c < t10330) {
     let t10346 = (conv1_stage2.s1.c.c.c/4)*2
     let t10347 = t10331/8
     let t10343 = (conv1_stage2.s1.c.c.c % 4)*8
     let t10345 = ((t10334 + 7)/8) - t10347
     let t10342 = t10346 - t10333
     for (conv1_stage2.s1.w.wi, 0, 2) {
      let t10348 = (((conv1_stage2.s1.w.wi + t10342) + 1)*conv1_stage2.n.extent_realized)*32
      let t10349 = ((conv1_stage2.s1.w.wi + t10346)*head2_relu.n.extent_realized)*24
      for (conv1_stage2.s1.c.ci, 0, 8) {
       let t10352 = conv1_stage2.s1.c.ci + t10343
       let t10350 = (conv1_stage2.n.extent_realized*t10352) + t10348
       for (conv1_stage2.s1.n.n, 0, t10347) {
        let conv1_stage2.s1.n.ni.base = (conv1_stage2.s1.n.n*8) + t10338
        let t10353 = conv1_stage2.s1.n.ni.base - t10338
        for (conv1_stage2.s1.r63$x, 0, 24) {
         let t9947 = t10350 + t10353
         conv1_stage2[ramp(t9947, 1, 8)] = conv1_stage2[ramp(t9947, 1, 8)] + (head2_relu[ramp((conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + (t10349 + t10353), 1, 8)]*x8(filter1[((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t10352]))
        }
       }
       let t10356 = conv1_stage2.s1.c.ci + t10343
       let t10354 = (conv1_stage2.n.extent_realized*t10356) + t10348
       for (conv1_stage2.s1.n.n.rebased, 0, t10345) {
        let conv1_stage2.s1.n.ni.base = ((conv1_stage2.s1.n.n.rebased + t10347)*8) + t10338
        let t10357 = min(t10339 - conv1_stage2.s1.n.ni.base, 8)
        let t10358 = conv1_stage2.s1.n.ni.base - t10338
        for (conv1_stage2.s1.r63$x, 0, 24) {
         let t10359 = ((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t10356
         let t10360 = (conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + t10349
         for (conv1_stage2.s1.n.ni, 0, t10357) {
          let t9290 = conv1_stage2.s1.n.ni + t10358
          let t9948 = t10354 + t9290
          conv1_stage2[t9948] = conv1_stage2[t9948] + (filter1[t10359]*head2_relu[t10360 + t9290])
         }
        }
       }
      }
     }
    } else {
     let conv1_stage2.s1.w.wi.new_max.s = t10337 - ((conv1_stage2.s1.c.c.c/4)*2)
     let t10366 = (conv1_stage2.s1.c.c.c/4)*2
     let t10361 = min(conv1_stage2.s1.w.wi.new_max.s, 2)
     let t10362 = (t10334 + 7)/8
     let t10364 = (conv1_stage2.s1.c.c.c % 4)*8
     let t10363 = t10366 - t10333
     for (conv1_stage2.s1.w.wi, 0, t10361) {
      let t10367 = (((conv1_stage2.s1.w.wi + t10363) + 1)*conv1_stage2.n.extent_realized)*32
      let t10368 = ((conv1_stage2.s1.w.wi + t10366)*head2_relu.n.extent_realized)*24
      for (conv1_stage2.s1.c.ci, 0, 8) {
       let t10371 = conv1_stage2.s1.c.ci + t10364
       let t10369 = (conv1_stage2.n.extent_realized*t10371) + t10367
       for (conv1_stage2.s1.n.n, 0, t10362) {
        let conv1_stage2.s1.n.ni.base = (conv1_stage2.s1.n.n*8) + t10338
        let t10372 = (conv1_stage2.s1.n.ni.base + 8) <= t10339
        let t10374 = min(t10339 - conv1_stage2.s1.n.ni.base, 8)
        let t10373 = conv1_stage2.s1.n.ni.base - t10338
        for (conv1_stage2.s1.r63$x, 0, 24) {
         if (t10372) {
          let t9949 = t10369 + t10373
          conv1_stage2[ramp(t9949, 1, 8)] = conv1_stage2[ramp(t9949, 1, 8)] + (head2_relu[ramp((conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + (t10368 + t10373), 1, 8)]*x8(filter1[((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t10371]))
         } else {
          let t10375 = ((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t10371
          let t10376 = (conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + t10368
          for (conv1_stage2.s1.n.ni, 0, t10374) {
           let t9298 = conv1_stage2.s1.n.ni + t10373
           let t9950 = t10369 + t9298
           conv1_stage2[t9950] = conv1_stage2[t9950] + (filter1[t10375]*head2_relu[t10376 + t9298])
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 let f1.n.extent_realized = let t9951.s = max(-8 - batch_size, batch_size + -1) in (let t9952 = min((max(t9951.s/8, 0)*8) + 8, batch_size) in (let t9953 = min(max(t9951.s/8, 0), (t9952 + -1)/8) in (let t9956 = (max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (max(max(max(max(min(min(prediction_output.extent.0, 8) + (((prediction_output.extent.0 + -1)/8)*8), prediction_output.extent.0) + prediction_output.min.0, batch_size), min(min((t9953*8) + 8, batch_size), min(t9952, 8) + ((((t9952 + -1)/8) + t9953)*8))), min(max(f1.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t9956 + -1)/8)*8), max(f1.s1.n.max.s, 1) + -1) + min(t9956, 8))), 1) - min(prediction_output.min.0, 0)))))
 allocate f1[float32 * f1.n.extent_realized]
 let f1.s0.n.n.loop_extent.s = max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0)
 produce f1 {
  let f1.s0.n.n.epilogue.s = min(max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0), f1.s0.n.n.loop_extent.s + 7)
  let f1.s0.n.n.new_max.s = min(max((max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) + 7, f1.s0.n.n.epilogue.s), f1.s0.n.n.loop_extent.s + 7)
  let t10380 = max(f1.s1.n.max.s, 1)
  let t10379 = min(prediction_output.min.0, 0)
  let t10377 = f1.s0.n.n.new_max.s/8
  let t10378 = f1.s0.n.n.epilogue.s/8
  parallel (f1.s0.n.n, 0, t10377) {
   if (f1.s0.n.n < t10378) {
    let f1.s0.n.ni.base = (f1.s0.n.n*8) + t10379
    f1[ramp(f1.s0.n.ni.base - t10379, 1, 8)] = x8(0.000000f)
   } else {
    let f1.s0.n.ni.base = (f1.s0.n.n*8) + t10379
    let t10381 = max(min(t10380 - f1.s0.n.ni.base, 8), 0)
    let t10382 = f1.s0.n.ni.base - t10379
    for (f1.s0.n.ni, 0, t10381) {
     f1[f1.s0.n.ni + t10382] = 0.000000f
    }
   }
  }
  consume conv1_stage2 {
   let f1.s1.n.n.epilogue.s = min(max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0), f1.s0.n.n.loop_extent.s + 7)
   let f1.s1.n.n.new_max.s = min(max((max(f1.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) + 7, f1.s1.n.n.epilogue.s), f1.s0.n.n.loop_extent.s + 7)
   let t10430 = max(f1.s1.n.max.s, 1)
   let t10385 = min(prediction_output.min.0, 0)
   let t10383 = f1.s1.n.n.new_max.s/8
   let t10384 = f1.s1.n.n.epilogue.s/8
   let t10386 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t10392 = float32(num_cores)
   parallel (f1.s1.n.n, 0, t10383) {
    if (f1.s1.n.n < t10384) {
     let f1.s1.n.ni.base = (f1.s1.n.n*8) + t10385
     let t10432 = f1.s1.n.ni.base - t10386
     let t10431 = f1.s1.n.ni.base - t10385
     let t10458 = ((schedule_features.stride.1*34) - t10386) + f1.s1.n.ni.base
     let t10460 = ((schedule_features.stride.1*33) - t10386) + f1.s1.n.ni.base
     let t10439 = ((schedule_features.stride.1*32) - t10386) + f1.s1.n.ni.base
     let t10440 = ((schedule_features.stride.1*31) - t10386) + f1.s1.n.ni.base
     let t10438 = ((schedule_features.stride.1*30) - t10386) + f1.s1.n.ni.base
     let t10452 = ((schedule_features.stride.1*29) - t10386) + f1.s1.n.ni.base
     let t10467 = ((schedule_features.stride.1*28) - t10386) + f1.s1.n.ni.base
     let t10466 = ((schedule_features.stride.1*27) - t10386) + f1.s1.n.ni.base
     let t10469 = ((schedule_features.stride.1*26) - t10386) + f1.s1.n.ni.base
     let t10435 = ((schedule_features.stride.1*25) - t10386) + f1.s1.n.ni.base
     let t10433 = ((schedule_features.stride.1*24) - t10386) + f1.s1.n.ni.base
     let t10434 = ((schedule_features.stride.1*22) - t10386) + f1.s1.n.ni.base
     let t10442 = ((schedule_features.stride.1*21) - t10386) + f1.s1.n.ni.base
     let t10471 = ((schedule_features.stride.1*19) - t10386) + f1.s1.n.ni.base
     let t10473 = ((schedule_features.stride.1*18) - t10386) + f1.s1.n.ni.base
     let t10445 = ((schedule_features.stride.1*17) - t10386) + f1.s1.n.ni.base
     let t10448 = ((schedule_features.stride.1*12) - t10386) + f1.s1.n.ni.base
     let t10453 = ((schedule_features.stride.1*11) - t10386) + f1.s1.n.ni.base
     let t10437 = ((schedule_features.stride.1*10) - t10386) + f1.s1.n.ni.base
     let t10436 = ((schedule_features.stride.1*9) - t10386) + f1.s1.n.ni.base
     let t10441 = (schedule_features.stride.1 - t10386) + f1.s1.n.ni.base
     for (f1.s1.r79$x, 0, num_stages) {
      let t9312 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10432, 1, 8)]
      let t9313 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10433, 1, 8)]
      let t9314.s = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10434, 1, 8)]
      let t9315 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10435, 1, 8)]
      let t9316 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10436, 1, 8)]
      let t9317 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10437, 1, 8)]
      let t9319 = max(t9316*t9317, x8(1.000000f))/x8(t10392)
      let t9320.s = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10438, 1, 8)]
      let t9321 = x8(1.000000f) < t9316
      let t9322 = f1.s1.r79$x == 0
      let t9323 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10439, 1, 8)]
      let t9324 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10440, 1, 8)]
      let t9325 = schedule_features[ramp((f1.s1.r79$x*schedule_features.stride.2) + t10441, 1, 8)]
      let t9957 = f1.s1.r79$x*schedule_features.stride.2
      let t9958 = conv1_stage2.n.extent_realized*f1.s1.r79$x
      let t9959 = t9313*t9314.s
      let t9960 = max(t9320.s, x8(1.000000f))
      let t9961 = max(t9316*t9317, x8(1.000000f))
      f1[ramp(t10431, 1, 8)] = f1[ramp(t10431, 1, 8)] + (((schedule_features[ramp(t10442 + t9957, 1, 8)]*max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*27) + t10431), 1, 8)], x8(0.000000f))) + (((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*24) + t10431), 1, 8)], x8(0.000000f))*t9312) + (((select(schedule_features[ramp(t10445 + t9957, 1, 8)] == x8(0.000000f), (max(conv1_stage2[ramp((t9958*32) + t10431, 1, 8)], x8(0.000000f))*t9959) + (max(conv1_stage2[ramp((t9958*32) + (conv1_stage2.n.extent_realized + t10431), 1, 8)], x8(0.000000f))*t9315), (max(conv1_stage2[ramp((((t9958*16) + conv1_stage2.n.extent_realized)*2) + t10431, 1, 8)], x8(0.000000f))*t9959) + (max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*3) + t10431), 1, 8)], x8(0.000000f))*t9315))*((float32x8)ceil_f32(t9319)/max(t9319, x8(1.000000f)))) + (((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*23) + t10431), 1, 8)], x8(0.000000f))*(((schedule_features[ramp(t10448 + t9957, 1, 8)]*min(x8(4096.000000f)/t9960, t9316))*t9316)*t9317)) + (select(t9321, (max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*22) + t10431), 1, 8)], x8(0.000000f))*(t9313 + t9315))/t9960, x8(0.000000f)) + (((max(select(t9321, conv1_stage2[ramp((((t9958*2) + conv1_stage2.n.extent_realized)*16) + t10431, 1, 8)], select(t9322, conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*17) + t10431), 1, 8)], conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*18) + t10431), 1, 8)])), x8(0.000000f))*((schedule_features[ramp(t10452 + t9957, 1, 8)]/t9960)*t9316)) + (schedule_features[ramp(t10453 + t9957, 1, 8)]*max(select(t9321, conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*19) + t10431), 1, 8)], select(t9322, conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*20) + t10431), 1, 8)], conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*21) + t10431), 1, 8)])), x8(0.000000f))))*t9312)))*x8(2.000000f))) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*15) + t10431), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t10458 + t9957, 1, 8)]*t9961)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*14) + t10431), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t10460 + t9957, 1, 8)]*t9961)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*13) + t10431), 1, 8)], x8(0.000000f))*(t9313*t9323)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*12) + t10431), 1, 8)], x8(0.000000f))*(t9315*t9323)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*11) + t10431), 1, 8)], x8(0.000000f))*(t9313*t9324)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*10) + t10431), 1, 8)], x8(0.000000f))*(t9315*t9324)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*9) + t10431), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t10466 + t9957, 1, 8)]*t9313)) + ((max(conv1_stage2[ramp((((t9958*4) + conv1_stage2.n.extent_realized)*8) + t10431, 1, 8)], x8(0.000000f))*(schedule_features[ramp(t10467 + t9957, 1, 8)]*t9315)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*7) + t10431), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t10469 + t9957, 1, 8)]*t9313)) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*5) + t10431), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t10471 + t9957, 1, 8)]*t9312)) + (max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*6) + t10431), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t10473 + t9957, 1, 8)]*t9312)))))))))))))) + ((max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*26) + t10431), 1, 8)], x8(0.000000f))*((t9316 + x8(-1.000000f))*t9325)) + (select(t9321, max(conv1_stage2[ramp((t9958*32) + ((conv1_stage2.n.extent_realized*25) + t10431), 1, 8)], x8(0.000000f)), x8(0.000000f))*t9325))))*x8(0.000000f))
     }
    } else {
     let f1.s1.n.ni.base = (f1.s1.n.n*8) + t10385
     let t10476 = max(min(t10430 - f1.s1.n.ni.base, 8), 0)
     let t10478 = f1.s1.n.ni.base - t10386
     let t10477 = f1.s1.n.ni.base - t10385
     let t10504 = ((schedule_features.stride.1*34) - t10386) + f1.s1.n.ni.base
     let t10506 = ((schedule_features.stride.1*33) - t10386) + f1.s1.n.ni.base
     let t10485 = ((schedule_features.stride.1*32) - t10386) + f1.s1.n.ni.base
     let t10486 = ((schedule_features.stride.1*31) - t10386) + f1.s1.n.ni.base
     let t10484 = ((schedule_features.stride.1*30) - t10386) + f1.s1.n.ni.base
     let t10498 = ((schedule_features.stride.1*29) - t10386) + f1.s1.n.ni.base
     let t10513 = ((schedule_features.stride.1*28) - t10386) + f1.s1.n.ni.base
     let t10512 = ((schedule_features.stride.1*27) - t10386) + f1.s1.n.ni.base
     let t10515 = ((schedule_features.stride.1*26) - t10386) + f1.s1.n.ni.base
     let t10481 = ((schedule_features.stride.1*25) - t10386) + f1.s1.n.ni.base
     let t10479 = ((schedule_features.stride.1*24) - t10386) + f1.s1.n.ni.base
     let t10480 = ((schedule_features.stride.1*22) - t10386) + f1.s1.n.ni.base
     let t10488 = ((schedule_features.stride.1*21) - t10386) + f1.s1.n.ni.base
     let t10517 = ((schedule_features.stride.1*19) - t10386) + f1.s1.n.ni.base
     let t10519 = ((schedule_features.stride.1*18) - t10386) + f1.s1.n.ni.base
     let t10491 = ((schedule_features.stride.1*17) - t10386) + f1.s1.n.ni.base
     let t10494 = ((schedule_features.stride.1*12) - t10386) + f1.s1.n.ni.base
     let t10499 = ((schedule_features.stride.1*11) - t10386) + f1.s1.n.ni.base
     let t10483 = ((schedule_features.stride.1*10) - t10386) + f1.s1.n.ni.base
     let t10482 = ((schedule_features.stride.1*9) - t10386) + f1.s1.n.ni.base
     let t10487 = (schedule_features.stride.1 - t10386) + f1.s1.n.ni.base
     for (f1.s1.r79$x, 0, num_stages) {
      let t10557 = f1.s1.r79$x*schedule_features.stride.2
      let t10529 = f1.s1.r79$x == 0
      let t10534 = conv1_stage2.n.extent_realized*f1.s1.r79$x
      let t10532 = t10487 + t10557
      let t10531 = t10486 + t10557
      let t10530 = t10485 + t10557
      let t10528 = t10484 + t10557
      let t10527 = t10483 + t10557
      let t10526 = t10482 + t10557
      let t10525 = t10481 + t10557
      let t10524 = t10480 + t10557
      let t10523 = t10479 + t10557
      let t10522 = t10478 + t10557
      for (f1.s1.n.ni, 0, t10476) {
       let t9327 = f1.s1.n.ni + t10477
       let t9331 = schedule_features[f1.s1.n.ni + t10522]
       let t9332 = schedule_features[f1.s1.n.ni + t10523]
       let t9333.s = schedule_features[f1.s1.n.ni + t10524]
       let t9334 = schedule_features[f1.s1.n.ni + t10525]
       let t9335 = schedule_features[f1.s1.n.ni + t10526]
       let t9336 = schedule_features[f1.s1.n.ni + t10527]
       let t9338 = max(t9335*t9336, 1.000000f)/t10392
       let t9339.s = schedule_features[f1.s1.n.ni + t10528]
       let t9340 = 1.000000f < t9335
       let t9342 = schedule_features[f1.s1.n.ni + t10530]
       let t9343 = schedule_features[f1.s1.n.ni + t10531]
       let t9344 = schedule_features[f1.s1.n.ni + t10532]
       let t9964 = t9332*t9333.s
       let t9965 = max(t9339.s, 1.000000f)
       let t9966 = max(t9335*t9336, 1.000000f)
       f1[t9327] = f1[t9327] + (((schedule_features[(t10488 + t10557) + f1.s1.n.ni]*max(conv1_stage2[((conv1_stage2.n.extent_realized*27) + (t10534*32)) + t9327], 0.000000f)) + (((max(conv1_stage2[((conv1_stage2.n.extent_realized*24) + (t10534*32)) + t9327], 0.000000f)*t9331) + (((select(schedule_features[(t10491 + t10557) + f1.s1.n.ni] == 0.000000f, (max(conv1_stage2[(t10534*32) + t9327], 0.000000f)*t9964) + (max(conv1_stage2[((t10534*32) + conv1_stage2.n.extent_realized) + t9327], 0.000000f)*t9334), (max(conv1_stage2[(((t10534*16) + conv1_stage2.n.extent_realized)*2) + t9327], 0.000000f)*t9964) + (max(conv1_stage2[((conv1_stage2.n.extent_realized*3) + (t10534*32)) + t9327], 0.000000f)*t9334))*((float32)ceil_f32(t9338)/max(t9338, 1.000000f))) + (((max(conv1_stage2[((conv1_stage2.n.extent_realized*23) + (t10534*32)) + t9327], 0.000000f)*(((schedule_features[(t10494 + t10557) + f1.s1.n.ni]*min(4096.000000f/t9965, t9335))*t9335)*t9336)) + (select(t9340, (max(conv1_stage2[((conv1_stage2.n.extent_realized*22) + (t10534*32)) + t9327], 0.000000f)*(t9332 + t9334))/t9965, 0.000000f) + (((max(select(t9340, conv1_stage2[(((t10534*2) + conv1_stage2.n.extent_realized)*16) + t9327], select(t10529, conv1_stage2[((conv1_stage2.n.extent_realized*17) + (t10534*32)) + t9327], conv1_stage2[((conv1_stage2.n.extent_realized*18) + (t10534*32)) + t9327])), 0.000000f)*((schedule_features[(t10498 + t10557) + f1.s1.n.ni]/t9965)*t9335)) + (schedule_features[(t10499 + t10557) + f1.s1.n.ni]*max(select(t9340, conv1_stage2[((conv1_stage2.n.extent_realized*19) + (t10534*32)) + t9327], select(t10529, conv1_stage2[((conv1_stage2.n.extent_realized*20) + (t10534*32)) + t9327], conv1_stage2[((conv1_stage2.n.extent_realized*21) + (t10534*32)) + t9327])), 0.000000f)))*t9331)))*2.000000f)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*15) + (t10534*32)) + t9327], 0.000000f)*(schedule_features[(t10504 + t10557) + f1.s1.n.ni]*t9966)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*14) + (t10534*32)) + t9327], 0.000000f)*(schedule_features[(t10506 + t10557) + f1.s1.n.ni]*t9966)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*13) + (t10534*32)) + t9327], 0.000000f)*(t9332*t9342)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*12) + (t10534*32)) + t9327], 0.000000f)*(t9334*t9342)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*11) + (t10534*32)) + t9327], 0.000000f)*(t9332*t9343)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*10) + (t10534*32)) + t9327], 0.000000f)*(t9334*t9343)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*9) + (t10534*32)) + t9327], 0.000000f)*(schedule_features[(t10512 + t10557) + f1.s1.n.ni]*t9332)) + ((max(conv1_stage2[(((t10534*4) + conv1_stage2.n.extent_realized)*8) + t9327], 0.000000f)*(schedule_features[(t10513 + t10557) + f1.s1.n.ni]*t9334)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*7) + (t10534*32)) + t9327], 0.000000f)*(schedule_features[(t10515 + t10557) + f1.s1.n.ni]*t9332)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*5) + (t10534*32)) + t9327], 0.000000f)*(schedule_features[(t10517 + t10557) + f1.s1.n.ni]*t9331)) + (max(conv1_stage2[((conv1_stage2.n.extent_realized*6) + (t10534*32)) + t9327], 0.000000f)*(schedule_features[(t10519 + t10557) + f1.s1.n.ni]*t9331)))))))))))))) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*26) + (t10534*32)) + t9327], 0.000000f)*((t9335 + -1.000000f)*t9344)) + (select(t9340, max(conv1_stage2[((conv1_stage2.n.extent_realized*25) + (t10534*32)) + t9327], 0.000000f), 0.000000f)*t9344))))*0.000000f)
      }
     }
    }
   }
  }
 }
 allocate sum$1_1_d_def__[float32 * 1]
 produce sum$1_1_d_def__ {
  sum$1_1_d_def__[0] = 1.000000f
 }
 let f0_0_d_def__.w.min_realized.s = select(0 < batch_size, 0, ((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8))
 let f0_0_d_def__.w.extent_realized = let t9967 = (0 < batch_size) in (let t9968 = (((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8)) in (let t9969 = select(t9967, 0, t9968) in (min(min(num_stages - (t9969*2), 2) + (min(select(t9967, t9968, 0), (num_stages + -1)/2)*2), num_stages) - (t9969*2))))
 let f0_0_d_def__.n.extent_realized = min(min(batch_size, 8) + (min(max(max(-8 - batch_size, batch_size + -1)/8, 0), (batch_size + -1)/8)*8), batch_size)
 allocate f0_0_d_def__[float32 * f0_0_d_def__.n.extent_realized * f0_0_d_def__.w.extent_realized]
 let f0_0_d_def__.s0.n.n.n.loop_extent = ((batch_size + 7)/8)*((num_stages + 1)/2)
 produce f0_0_d_def__ {
  consume sum$1_1_d_def__ {
   consume f1 {
    let t10560 = min(prediction_output.min.0, 0)
    let t10558 = (batch_size + 7)/8
    let t10559 = max(min(batch_size + -1, reference), 0) - true_runtime.min.0
    parallel (f0_0_d_def__.s0.n.n.n, 0, f0_0_d_def__.s0.n.n.n.loop_extent) {
     let f0_0_d_def__.s0.n.ni.base.s = f0_0_d_def__.s0.n.n.n % t10558
     let f0_0_d_def__.s0.w.wi.base.s = f0_0_d_def__.s0.n.n.n/t10558
     let f0_0_d_def__.s0.n.max_1.s = min((f0_0_d_def__.s0.n.ni.base.s*8) + 8, batch_size)
     let f1_1_d_def__.n.extent_realized = f0_0_d_def__.s0.n.max_1.s - (f0_0_d_def__.s0.n.ni.base.s*8)
     allocate f1_1_d_def__[float32 * f1_1_d_def__.n.extent_realized]
     produce f1_1_d_def__ {
      let f1_1_d_def__.s0.n.n.epilogue.s = min(batch_size, f0_0_d_def__.s0.n.max_1.s)
      let t10561 = max((f1_1_d_def__.s0.n.n.epilogue.s/8) - f0_0_d_def__.s0.n.ni.base.s, 0)
      for (f1_1_d_def__.s0.n.n, 0, t10561) {
       let t9349 = true_runtime[t10559]
       let t9350 = f1[ramp(((f0_0_d_def__.s0.n.ni.base.s + f1_1_d_def__.s0.n.n)*8) - t10560, 1, 8)]*x8(1.000000f/t9349)
       let t9970 = f0_0_d_def__.s0.n.ni.base.s + f1_1_d_def__.s0.n.n
       let t9971 = max(t9350, x8(0.000000f))
       f1_1_d_def__[ramp(f1_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)] = select(t9350 < x8(0.000000f), x8(0.000000f), ((x8(0.000000f) + ((select(x8(batch_size) < ramp((t9970*8) + 1, 1, 8), x8(0.000000f), x8(sum$1_1_d_def__[0]))*((x8(1.000000f)/t9971) - (x8(1.000000f)/(true_runtime[ramp((t9970*8) - true_runtime.min.0, 1, 8)]*x8(1.000000f/t9349)))))*x8(-2.000000f)))/(t9971*t9971))*x8(1.000000f/t9349))
      }
      let f1_1_d_def__.s0.n.n.old_max = (((f0_0_d_def__.s0.n.max_1.s + 7)/8) + (max((f1_1_d_def__.s0.n.n.epilogue.s/8) - f0_0_d_def__.s0.n.ni.base.s, 0) + min(f0_0_d_def__.s0.n.ni.base.s - (f1_1_d_def__.s0.n.n.epilogue.s/8), 0))) - f0_0_d_def__.s0.n.ni.base.s
      let f1_1_d_def__.s0.n.n.new_max.s = max(min((((f0_0_d_def__.s0.n.max_1.s + -1)/8) - f0_0_d_def__.s0.n.ni.base.s) + 1, f1_1_d_def__.s0.n.n.old_max), (f1_1_d_def__.s0.n.n.epilogue.s/8) - f0_0_d_def__.s0.n.ni.base.s)
      let t10565 = f1_1_d_def__.s0.n.n.epilogue.s/8
      let t10563 = max(f0_0_d_def__.s0.n.ni.base.s, t10565)
      let t10564 = max(t10565 - f0_0_d_def__.s0.n.ni.base.s, 0)
      let t10562 = max(f1_1_d_def__.s0.n.n.new_max.s, 0) + min(f0_0_d_def__.s0.n.ni.base.s - t10565, 0)
      for (f1_1_d_def__.s0.n.n.rebased, 0, t10562) {
       if ((((f1_1_d_def__.s0.n.n.rebased + t10563)*8) + 8) <= f0_0_d_def__.s0.n.max_1.s) {
        let t9353.s = min(ramp((f1_1_d_def__.s0.n.n.rebased + t10563)*8, 1, 8), x8(batch_size + -1))
        let t9354 = true_runtime[t10559]
        let t9355 = f1[max(t9353.s, x8(0)) - x8(t10560)]*x8(1.000000f/t9354)
        let t9973 = max(t9355, x8(0.000000f))
        f1_1_d_def__[ramp((f1_1_d_def__.s0.n.n.rebased + t10564)*8, 1, 8) aligned(8, 0)] = select(t9355 < x8(0.000000f), x8(0.000000f), ((x8(0.000000f) + ((select(x8(batch_size) < ramp((((f0_0_d_def__.s0.n.ni.base.s + t10564) + f1_1_d_def__.s0.n.n.rebased)*8) + 1, 1, 8), x8(0.000000f), x8(sum$1_1_d_def__[0]))*((x8(1.000000f)/t9973) - (x8(1.000000f)/(true_runtime[max(t9353.s, x8(0)) - x8(true_runtime.min.0)]*x8(1.000000f/t9354)))))*x8(-2.000000f)))/(t9973*t9973))*x8(1.000000f/t9354))
       } else {
        let f1_1_d_def__.s0.n.ni.new_max.s = f0_0_d_def__.s0.n.max_1.s - ((f1_1_d_def__.s0.n.n.rebased + t10563)*8)
        let t10566 = min(f1_1_d_def__.s0.n.ni.new_max.s, 8)
        let t10568 = ((f0_0_d_def__.s0.n.ni.base.s + t10564) + f1_1_d_def__.s0.n.n.rebased)*8
        let t10569 = (f1_1_d_def__.s0.n.n.rebased + t10564)*8
        let t10567 = (f1_1_d_def__.s0.n.n.rebased + t10563)*8
        for (f1_1_d_def__.s0.n.ni, 0, t10566) {
         let t9358.s = min(f1_1_d_def__.s0.n.ni + t10567, batch_size + -1)
         let t9359 = true_runtime[t10559]
         let t9360 = f1[max(t9358.s, 0) - t10560]*(1.000000f/t9359)
         let t9975 = max(t9360, 0.000000f)
         f1_1_d_def__[f1_1_d_def__.s0.n.ni + t10569] = select(t9360 < 0.000000f, 0.000000f, ((0.000000f - ((select(batch_size < ((f1_1_d_def__.s0.n.ni + t10568) + 1), 0.000000f, sum$1_1_d_def__[0])*((1.000000f/t9975) - (1.000000f/(true_runtime[max(t9358.s, 0) - true_runtime.min.0]*(1.000000f/t9359)))))*2.000000f))/(t9975*t9975))*(1.000000f/t9359))
        }
       }
      }
     }
     consume f1_1_d_def__ {
      let f0_0_d_def__.s0.w.wi.epilogue.s = num_stages - (f0_0_d_def__.s0.w.wi.base.s*2)
      let t10576 = f0_0_d_def__.s0.n.ni.base.s*8
      let t10571 = (t10576 + 8) <= batch_size
      let t10570 = max(min(f0_0_d_def__.s0.w.wi.epilogue.s, 2), 0)
      let t10574 = (f0_0_d_def__.s0.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
      let t10572 = f0_0_d_def__.s0.w.wi.base.s*2
      let t10575 = batch_size - t10576
      for (f0_0_d_def__.s0.w.wi, 0, t10570) {
       if (t10571) {
        f0_0_d_def__[ramp(((f0_0_d_def__.s0.w.wi + t10574)*f0_0_d_def__.n.extent_realized) + t10576, 1, 8)] = select((f0_0_d_def__.s0.w.wi + t10572) < 0, x8(0.000000f), f1_1_d_def__[ramp(0, 1, 8)])
       } else {
        let t10578 = (f0_0_d_def__.s0.w.wi + t10572) < 0
        let t10577 = max(min(t10575, 8), 0)
        let t10579 = ((f0_0_d_def__.s0.w.wi + t10574)*f0_0_d_def__.n.extent_realized) + t10576
        for (f0_0_d_def__.s0.n.ni, 0, t10577) {
         f0_0_d_def__[f0_0_d_def__.s0.n.ni + t10579] = select(t10578, 0.000000f, f1_1_d_def__[f0_0_d_def__.s0.n.ni])
        }
       }
      }
     }
     free f1_1_d_def__
    }
   }
  }
 }
 let relu1_0_d_def__.n.extent_realized = min(min(batch_size, 8) + (((batch_size + -1)/8)*8), batch_size)
 let relu1_0_d_def__.w.min_realized.s = select(0 < batch_size, 0, ((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8))
 let relu1_0_d_def__.w.extent_realized = num_stages - (min(select(0 < batch_size, 0, ((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8)), 0)*2)
 allocate relu1_0_d_def__[float32 * 32 * relu1_0_d_def__.w.extent_realized * relu1_0_d_def__.n.extent_realized]
 let relu1_0_d_def__.s0.n.n.n.loop_extent = ((batch_size + 7)/8)*((num_stages + 1)/2)
 produce relu1_0_d_def__ {
  let t10581 = min(relu1_0_d_def__.w.min_realized.s, 0)
  let t10580 = (batch_size + 7)/8
  parallel (relu1_0_d_def__.s0.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
   let relu1_0_d_def__.s0.n.ni.base.s = relu1_0_d_def__.s0.n.n.n % t10580
   let relu1_0_d_def__.s0.w.wi.base.s = relu1_0_d_def__.s0.n.n.n/t10580
   let relu1_0_d_def__.s0.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s0.w.wi.base.s*2)
   let t10587 = relu1_0_d_def__.s0.n.ni.base.s*8
   let t10583 = (t10587 + 8) <= batch_size
   let t10582 = max(min(relu1_0_d_def__.s0.w.wi.epilogue.s, 2), 0)
   let t10585 = (relu1_0_d_def__.s0.w.wi.base.s - t10581)*2
   let t10586 = batch_size - t10587
   for (relu1_0_d_def__.s0.w.wi, 0, t10582) {
    let t10589 = max(min(t10586, 8), 0)
    let t10588 = (((relu1_0_d_def__.s0.w.wi + t10585)*relu1_0_d_def__.n.extent_realized)*32) + t10587
    for (relu1_0_d_def__.s0.c, 0, 32) {
     if (t10583) {
      relu1_0_d_def__[ramp((relu1_0_d_def__.n.extent_realized*relu1_0_d_def__.s0.c) + t10588, 1, 8)] = x8(0.000000f)
     } else {
      let t10590 = (relu1_0_d_def__.n.extent_realized*relu1_0_d_def__.s0.c) + t10588
      for (relu1_0_d_def__.s0.n.ni, 0, t10589) {
       relu1_0_d_def__[relu1_0_d_def__.s0.n.ni + t10590] = 0.000000f
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10598 = schedule_features.min.2*schedule_features.stride.2
   let t10599 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10591 = (batch_size + 7)/8
   let t10594 = (((21 - schedule_features.min.1)*schedule_features.stride.1) - t10598) - schedule_features.min.0
   let t10595 = ((((schedule_features.stride.1*21) + batch_size) - t10598) - (schedule_features.min.1*schedule_features.stride.1)) - schedule_features.min.0
   parallel (relu1_0_d_def__.s6.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s6.n.ni.base.s = relu1_0_d_def__.s6.n.n.n % t10591
    let relu1_0_d_def__.s6.w.wi.base.s = relu1_0_d_def__.s6.n.n.n/t10591
    let relu1_0_d_def__.s6.w.wi.epilogue = max(min(num_stages - (relu1_0_d_def__.s6.w.wi.base.s*2), 2), 0 - (max(min(relu1_0_d_def__.s6.w.wi.base.s, 0), -1)*2))
    let relu1_0_d_def__.s6.w.wi.new_max.s = min(num_stages - (relu1_0_d_def__.s6.w.wi.base.s*2), 0 - (max(min(relu1_0_d_def__.s6.w.wi.base.s, 0), -1)*2))
    let t10609 = relu1_0_d_def__.s6.n.ni.base.s*8
    let t10601 = (t10609 + 8) <= batch_size
    let t10600 = max(relu1_0_d_def__.s6.w.wi.new_max.s, 0)
    let t10603 = (relu1_0_d_def__.s6.w.wi.base.s - t10599)*2
    let t10606 = (relu1_0_d_def__.s6.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10605 = relu1_0_d_def__.s6.w.wi.base.s*2
    let t10602 = (relu1_0_d_def__.n.extent_realized*27) + t10609
    for (relu1_0_d_def__.s6.w.wi, 0, t10600) {
     if (t10601) {
      let t9365 = (((relu1_0_d_def__.s6.w.wi + t10603)*relu1_0_d_def__.n.extent_realized)*32) + t10602
      relu1_0_d_def__[ramp(t9365, 1, 8)] = relu1_0_d_def__[ramp(t9365, 1, 8)] + ((schedule_features[min(ramp(t10609, 1, 8), x8(batch_size + -1)) + x8((max(relu1_0_d_def__.s6.w.wi + t10605, 0)*schedule_features.stride.2) + t10594)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s6.w.wi + t10606)*f0_0_d_def__.n.extent_realized) + t10609, 1, 8)])*x8(0.000000f))
     } else {
      let t10610 = max(min(batch_size - t10609, 8), 0)
      let t10612 = (max(relu1_0_d_def__.s6.w.wi + t10605, 0)*schedule_features.stride.2) + (t10594 + t10609)
      let t10611 = (((relu1_0_d_def__.s6.w.wi + t10603)*relu1_0_d_def__.n.extent_realized)*32) + t10602
      let t10613 = ((relu1_0_d_def__.s6.w.wi + t10606)*f0_0_d_def__.n.extent_realized) + t10609
      for (relu1_0_d_def__.s6.n.ni, 0, t10610) {
       let t9368 = relu1_0_d_def__.s6.n.ni + t10611
       relu1_0_d_def__[t9368] = relu1_0_d_def__[t9368] + ((schedule_features[relu1_0_d_def__.s6.n.ni + t10612]*f0_0_d_def__[relu1_0_d_def__.s6.n.ni + t10613])*0.000000f)
      }
     }
    }
    let t10625 = relu1_0_d_def__.n.extent_realized*27
    let t10626 = relu1_0_d_def__.s6.n.ni.base.s*8
    let t10627 = max(min(relu1_0_d_def__.s6.w.wi.base.s, 0), -1)*2
    let t10616 = (t10626 + 8) <= batch_size
    let t10618 = (relu1_0_d_def__.s6.w.wi.base.s - t10599)*2
    let t10621 = (relu1_0_d_def__.s6.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10620 = relu1_0_d_def__.s6.w.wi.base.s*2
    let t10614 = relu1_0_d_def__.s6.w.wi.epilogue + t10627
    for (relu1_0_d_def__.s6.w.wi.rebased, 0, t10614) {
     let relu1_0_d_def__.s6.w.wi = relu1_0_d_def__.s6.w.wi.rebased - t10627
     if (t10616) {
      let t9370 = (((relu1_0_d_def__.s6.w.wi + t10618)*relu1_0_d_def__.n.extent_realized)*32) + (t10625 + t10626)
      relu1_0_d_def__[ramp(t9370, 1, 8)] = relu1_0_d_def__[ramp(t9370, 1, 8)] + ((schedule_features[min(ramp(t10626, 1, 8), x8(batch_size + -1)) + x8(((relu1_0_d_def__.s6.w.wi + t10620)*schedule_features.stride.2) + t10594)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s6.w.wi + t10621)*f0_0_d_def__.n.extent_realized) + t10626, 1, 8)])*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s6.n.ni.new_max$1.s = batch_size - t10626
      let t10628 = max(min(relu1_0_d_def__.s6.n.ni.new_max$1.s, 8), 0)
      let t10629 = (((relu1_0_d_def__.s6.w.wi + t10618)*relu1_0_d_def__.n.extent_realized)*32) + (t10625 + t10626)
      let t10631 = ((relu1_0_d_def__.s6.w.wi + t10621)*f0_0_d_def__.n.extent_realized) + t10626
      let t10630 = ((relu1_0_d_def__.s6.w.wi + t10620)*schedule_features.stride.2) + (t10594 + t10626)
      for (relu1_0_d_def__.s6.n.ni, 0, t10628) {
       let t9373 = relu1_0_d_def__.s6.n.ni + t10629
       relu1_0_d_def__[t9373] = relu1_0_d_def__[t9373] + ((schedule_features[relu1_0_d_def__.s6.n.ni + t10630]*f0_0_d_def__[relu1_0_d_def__.s6.n.ni + t10631])*0.000000f)
      }
      let relu1_0_d_def__.s6.n.ni.new_max$2.s = batch_size - t10626
      let t10636 = (relu1_0_d_def__.s6.w.wi + t10621)*f0_0_d_def__.n.extent_realized
      let t10633 = max(min(batch_size - t10626, 8), 0) + t10626
      let t10632 = max(min(relu1_0_d_def__.s6.n.ni.new_max$2.s, 8), 0) + max(min(t10626 - batch_size, 0), -8)
      let t10634 = (((relu1_0_d_def__.s6.w.wi + t10618)*relu1_0_d_def__.n.extent_realized)*32) + t10625
      let t10635 = ((relu1_0_d_def__.s6.w.wi + t10620)*schedule_features.stride.2) + t10595
      for (relu1_0_d_def__.s6.n.ni.rebased, 0, t10632) {
       let t9375 = relu1_0_d_def__.s6.n.ni.rebased + t10633
       let t9976 = t10634 + t9375
       relu1_0_d_def__[t9976] = relu1_0_d_def__[t9976] + ((schedule_features[t10635 + -1]*f0_0_d_def__[t10636 + t9375])*0.000000f)
      }
     }
    }
    let relu1_0_d_def__.s6.w.wi.new_max$1 = max(min(num_stages - (relu1_0_d_def__.s6.w.wi.base.s*2), 2), relu1_0_d_def__.s6.w.wi.epilogue)
    let t10646 = relu1_0_d_def__.s6.n.ni.base.s*8
    let t10638 = (t10646 + 8) <= batch_size
    let t10641 = t10599*2
    let t10643 = f0_0_d_def__.w.min_realized.s*2
    let t10637 = relu1_0_d_def__.s6.w.wi.new_max$1 - relu1_0_d_def__.s6.w.wi.epilogue
    let t10639 = (relu1_0_d_def__.s6.w.wi.base.s*2) + relu1_0_d_def__.s6.w.wi.epilogue
    let t10640 = (relu1_0_d_def__.n.extent_realized*27) + t10646
    for (relu1_0_d_def__.s6.w.wi.rebased, 0, t10637) {
     if (t10638) {
      let t9377 = relu1_0_d_def__.s6.w.wi.rebased + t10639
      let t9378 = (((t9377 - t10641)*relu1_0_d_def__.n.extent_realized)*32) + t10640
      relu1_0_d_def__[ramp(t9378, 1, 8)] = relu1_0_d_def__[ramp(t9378, 1, 8)] + ((schedule_features[min(ramp(t10646, 1, 8), x8(batch_size + -1)) + x8((max(t9377, 0)*schedule_features.stride.2) + t10594)]*f0_0_d_def__[ramp(((t9377 - t10643)*f0_0_d_def__.n.extent_realized) + t10646, 1, 8)])*x8(0.000000f))
     } else {
      let t10647 = max(min(batch_size - t10646, 8), 0)
      let t10649 = t10594 + t10646
      let t10648 = relu1_0_d_def__.s6.w.wi.rebased + t10639
      for (relu1_0_d_def__.s6.n.ni, 0, t10647) {
       let t9381 = ((((t10648 - t10641)*relu1_0_d_def__.n.extent_realized)*32) + t10640) + relu1_0_d_def__.s6.n.ni
       relu1_0_d_def__[t9381] = relu1_0_d_def__[t9381] + ((schedule_features[((max(t10648, 0)*schedule_features.stride.2) + t10649) + relu1_0_d_def__.s6.n.ni]*f0_0_d_def__[(((t10648 - t10643)*f0_0_d_def__.n.extent_realized) + t10646) + relu1_0_d_def__.s6.n.ni])*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10657 = schedule_features.stride.1*9
   let t10652 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10650 = (batch_size + 7)/8
   let t10653 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s7.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s7.n.ni.base.s = relu1_0_d_def__.s7.n.n.n % t10650
    let relu1_0_d_def__.s7.w.wi.base.s = relu1_0_d_def__.s7.n.n.n/t10650
    let relu1_0_d_def__.s7.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s7.w.wi.base.s*2)
    let t10673 = relu1_0_d_def__.n.extent_realized*25
    let t10674 = relu1_0_d_def__.s7.n.ni.base.s*8
    let t10675 = schedule_features.stride.1 - t10653
    let t10676 = t10657 - t10653
    let t10659 = (t10674 + 8) <= batch_size
    let t10658 = max(min(relu1_0_d_def__.s7.w.wi.epilogue.s, 2), 0)
    let t10661 = (relu1_0_d_def__.s7.w.wi.base.s - t10652)*2
    let t10666 = (relu1_0_d_def__.s7.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10663 = relu1_0_d_def__.s7.w.wi.base.s*2
    let t10671 = (batch_size + t10657) - t10653
    let t10672 = (batch_size + schedule_features.stride.1) - t10653
    for (relu1_0_d_def__.s7.w.wi, 0, t10658) {
     if (t10659) {
      let t9383 = (((relu1_0_d_def__.s7.w.wi + t10661)*relu1_0_d_def__.n.extent_realized)*32) + (t10673 + t10674)
      let t9384 = min(ramp(t10674, 1, 8), x8(batch_size + -1))
      let t9977 = max(relu1_0_d_def__.s7.w.wi + t10663, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9383, 1, 8)] = relu1_0_d_def__[ramp(t9383, 1, 8)] + select(x8(1.000000f) < schedule_features[t9384 + x8(t10676 + t9977)], (schedule_features[t9384 + x8(t10675 + t9977)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s7.w.wi + t10666)*f0_0_d_def__.n.extent_realized) + t10674, 1, 8)])*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s7.n.ni.new_max.s = batch_size - t10674
      let t10677 = max(min(relu1_0_d_def__.s7.n.ni.new_max.s, 8), 0)
      let t10679 = max(relu1_0_d_def__.s7.w.wi + t10663, 0)*schedule_features.stride.2
      let t10678 = (((relu1_0_d_def__.s7.w.wi + t10661)*relu1_0_d_def__.n.extent_realized)*32) + (t10673 + t10674)
      let t10682 = ((relu1_0_d_def__.s7.w.wi + t10666)*f0_0_d_def__.n.extent_realized) + t10674
      let t10680 = t10674 + t10676
      let t10681 = t10674 + t10675
      for (relu1_0_d_def__.s7.n.ni, 0, t10677) {
       let t9389 = relu1_0_d_def__.s7.n.ni + t10678
       relu1_0_d_def__[t9389] = relu1_0_d_def__[t9389] + select(1.000000f < schedule_features[(t10679 + t10680) + relu1_0_d_def__.s7.n.ni], (schedule_features[(t10679 + t10681) + relu1_0_d_def__.s7.n.ni]*f0_0_d_def__[relu1_0_d_def__.s7.n.ni + t10682])*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s7.n.ni.new_max$1.s = batch_size - t10674
      let t10686 = max(relu1_0_d_def__.s7.w.wi + t10663, 0)*schedule_features.stride.2
      let t10687 = (relu1_0_d_def__.s7.w.wi + t10666)*f0_0_d_def__.n.extent_realized
      let t10684 = max(min(batch_size - t10674, 8), 0) + t10674
      let t10683 = max(min(relu1_0_d_def__.s7.n.ni.new_max$1.s, 8), 0) + max(min(t10674 - batch_size, 0), -8)
      let t10685 = (((relu1_0_d_def__.s7.w.wi + t10661)*relu1_0_d_def__.n.extent_realized)*32) + t10673
      for (relu1_0_d_def__.s7.n.ni.rebased, 0, t10683) {
       let t9393 = relu1_0_d_def__.s7.n.ni.rebased + t10684
       let t9979 = t10685 + t9393
       relu1_0_d_def__[t9979] = relu1_0_d_def__[t9979] + select(1.000000f < schedule_features[(t10671 + t10686) + -1], (schedule_features[(t10672 + t10686) + -1]*f0_0_d_def__[t10687 + t9393])*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10695 = schedule_features.stride.1*9
   let t10690 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10688 = (batch_size + 7)/8
   let t10691 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s8.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s8.n.ni.base.s = relu1_0_d_def__.s8.n.n.n % t10688
    let relu1_0_d_def__.s8.w.wi.base.s = relu1_0_d_def__.s8.n.n.n/t10688
    let relu1_0_d_def__.s8.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s8.w.wi.base.s*2)
    let t10711 = relu1_0_d_def__.n.extent_realized*26
    let t10712 = relu1_0_d_def__.s8.n.ni.base.s*8
    let t10713 = schedule_features.stride.1 - t10691
    let t10714 = t10695 - t10691
    let t10697 = (t10712 + 8) <= batch_size
    let t10696 = max(min(relu1_0_d_def__.s8.w.wi.epilogue.s, 2), 0)
    let t10699 = (relu1_0_d_def__.s8.w.wi.base.s - t10690)*2
    let t10702 = (relu1_0_d_def__.s8.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10701 = relu1_0_d_def__.s8.w.wi.base.s*2
    let t10710 = (batch_size + t10695) - t10691
    let t10709 = (batch_size + schedule_features.stride.1) - t10691
    for (relu1_0_d_def__.s8.w.wi, 0, t10696) {
     if (t10697) {
      let t9398 = (((relu1_0_d_def__.s8.w.wi + t10699)*relu1_0_d_def__.n.extent_realized)*32) + (t10711 + t10712)
      let t9399 = min(ramp(t10712, 1, 8), x8(batch_size + -1))
      let t9981 = max(relu1_0_d_def__.s8.w.wi + t10701, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9398, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t9398, 1, 8) aligned(2, 0)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s8.w.wi + t10702)*f0_0_d_def__.n.extent_realized) + t10712, 1, 8)]*(schedule_features[t9399 + x8(t10713 + t9981)]*(schedule_features[t9399 + x8(t10714 + t9981)] + x8(-1.000000f))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s8.n.ni.new_max.s = batch_size - t10712
      let t10715 = max(min(relu1_0_d_def__.s8.n.ni.new_max.s, 8), 0)
      let t10717 = max(relu1_0_d_def__.s8.w.wi + t10701, 0)*schedule_features.stride.2
      let t10716 = (((relu1_0_d_def__.s8.w.wi + t10699)*relu1_0_d_def__.n.extent_realized)*32) + (t10711 + t10712)
      let t10718 = ((relu1_0_d_def__.s8.w.wi + t10702)*f0_0_d_def__.n.extent_realized) + t10712
      let t10720 = t10712 + t10714
      let t10719 = t10712 + t10713
      for (relu1_0_d_def__.s8.n.ni, 0, t10715) {
       let t9404 = relu1_0_d_def__.s8.n.ni + t10716
       relu1_0_d_def__[t9404] = relu1_0_d_def__[t9404] + ((f0_0_d_def__[relu1_0_d_def__.s8.n.ni + t10718]*(schedule_features[(t10717 + t10719) + relu1_0_d_def__.s8.n.ni]*(schedule_features[(t10717 + t10720) + relu1_0_d_def__.s8.n.ni] + -1.000000f)))*0.000000f)
      }
      let relu1_0_d_def__.s8.n.ni.new_max$1.s = batch_size - t10712
      let t10724 = max(relu1_0_d_def__.s8.w.wi + t10701, 0)*schedule_features.stride.2
      let t10725 = (relu1_0_d_def__.s8.w.wi + t10702)*f0_0_d_def__.n.extent_realized
      let t10722 = max(min(batch_size - t10712, 8), 0) + t10712
      let t10721 = max(min(relu1_0_d_def__.s8.n.ni.new_max$1.s, 8), 0) + max(min(t10712 - batch_size, 0), -8)
      let t10723 = (((relu1_0_d_def__.s8.w.wi + t10699)*relu1_0_d_def__.n.extent_realized)*32) + t10711
      for (relu1_0_d_def__.s8.n.ni.rebased, 0, t10721) {
       let t9408 = relu1_0_d_def__.s8.n.ni.rebased + t10722
       let t9983 = t10723 + t9408
       relu1_0_d_def__[t9983] = relu1_0_d_def__[t9983] + ((f0_0_d_def__[t10725 + t9408]*(schedule_features[(t10709 + t10724) + -1]*(schedule_features[(t10710 + t10724) + -1] + -1.000000f)))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10734 = schedule_features.min.2*schedule_features.stride.2
   let t10735 = schedule_features.min.1*schedule_features.stride.1
   let t10736 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10726 = (batch_size + 7)/8
   let t10731 = ((batch_size - t10734) - t10735) - schedule_features.min.0
   let t10729 = schedule_features.min.0 + t10735
   let t10730 = (t10734 + t10735) + schedule_features.min.0
   parallel (relu1_0_d_def__.s9.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s9.n.ni.base.s = relu1_0_d_def__.s9.n.n.n % t10726
    let relu1_0_d_def__.s9.w.wi.base.s = relu1_0_d_def__.s9.n.n.n/t10726
    let relu1_0_d_def__.s9.w.wi.epilogue = max(min(num_stages - (relu1_0_d_def__.s9.w.wi.base.s*2), 2), 0 - (max(min(relu1_0_d_def__.s9.w.wi.base.s, 0), -1)*2))
    let relu1_0_d_def__.s9.w.wi.new_max.s = min(num_stages - (relu1_0_d_def__.s9.w.wi.base.s*2), 0 - (max(min(relu1_0_d_def__.s9.w.wi.base.s, 0), -1)*2))
    let t10746 = relu1_0_d_def__.s9.n.ni.base.s*8
    let t10738 = (t10746 + 8) <= batch_size
    let t10737 = max(relu1_0_d_def__.s9.w.wi.new_max.s, 0)
    let t10740 = (relu1_0_d_def__.s9.w.wi.base.s - t10736)*2
    let t10743 = (relu1_0_d_def__.s9.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10739 = ((relu1_0_d_def__.n.extent_realized*3) + relu1_0_d_def__.s9.n.ni.base.s)*8
    let t10742 = relu1_0_d_def__.s9.w.wi.base.s*2
    let t10745 = t10746 - t10730
    for (relu1_0_d_def__.s9.w.wi, 0, t10737) {
     if (t10738) {
      let t9413 = (((relu1_0_d_def__.s9.w.wi + t10740)*relu1_0_d_def__.n.extent_realized)*32) + t10739
      relu1_0_d_def__[ramp(t9413, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t9413, 1, 8) aligned(8, 0)] + ((schedule_features[min(ramp(t10746, 1, 8), x8(batch_size + -1)) + x8(((max(relu1_0_d_def__.s9.w.wi + t10742, 0) - schedule_features.min.2)*schedule_features.stride.2) - t10729)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s9.w.wi + t10743)*f0_0_d_def__.n.extent_realized) + t10746, 1, 8)])*x8(0.000000f))
     } else {
      let t10747 = max(min(batch_size - t10746, 8), 0)
      let t10749 = (max(relu1_0_d_def__.s9.w.wi + t10742, 0)*schedule_features.stride.2) + t10745
      let t10748 = (((relu1_0_d_def__.s9.w.wi + t10740)*relu1_0_d_def__.n.extent_realized)*32) + t10739
      let t10750 = ((relu1_0_d_def__.s9.w.wi + t10743)*f0_0_d_def__.n.extent_realized) + t10746
      for (relu1_0_d_def__.s9.n.ni, 0, t10747) {
       let t9416 = relu1_0_d_def__.s9.n.ni + t10748
       relu1_0_d_def__[t9416] = relu1_0_d_def__[t9416] + ((schedule_features[relu1_0_d_def__.s9.n.ni + t10749]*f0_0_d_def__[relu1_0_d_def__.s9.n.ni + t10750])*0.000000f)
      }
     }
    }
    let t10763 = max(min(relu1_0_d_def__.s9.w.wi.base.s, 0), -1)*2
    let t10764 = relu1_0_d_def__.s9.n.ni.base.s*8
    let t10765 = relu1_0_d_def__.s9.w.wi.base.s*2
    let t10753 = (t10764 + 8) <= batch_size
    let t10755 = (relu1_0_d_def__.s9.w.wi.base.s - t10736)*2
    let t10758 = (relu1_0_d_def__.s9.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10754 = ((relu1_0_d_def__.n.extent_realized*3) + relu1_0_d_def__.s9.n.ni.base.s)*8
    let t10757 = t10765 - schedule_features.min.2
    let t10760 = t10764 - t10730
    let t10751 = relu1_0_d_def__.s9.w.wi.epilogue + t10763
    for (relu1_0_d_def__.s9.w.wi.rebased, 0, t10751) {
     let relu1_0_d_def__.s9.w.wi = relu1_0_d_def__.s9.w.wi.rebased - t10763
     if (t10753) {
      let t9418 = (((relu1_0_d_def__.s9.w.wi + t10755)*relu1_0_d_def__.n.extent_realized)*32) + t10754
      relu1_0_d_def__[ramp(t9418, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t9418, 1, 8) aligned(8, 0)] + ((schedule_features[min(ramp(t10764, 1, 8), x8(batch_size + -1)) + x8(((relu1_0_d_def__.s9.w.wi + t10757)*schedule_features.stride.2) - t10729)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s9.w.wi + t10758)*f0_0_d_def__.n.extent_realized) + t10764, 1, 8)])*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s9.n.ni.new_max$1.s = batch_size - t10764
      let t10766 = max(min(relu1_0_d_def__.s9.n.ni.new_max$1.s, 8), 0)
      let t10767 = (((relu1_0_d_def__.s9.w.wi + t10755)*relu1_0_d_def__.n.extent_realized)*32) + t10754
      let t10768 = ((relu1_0_d_def__.s9.w.wi + t10765)*schedule_features.stride.2) + t10760
      let t10769 = ((relu1_0_d_def__.s9.w.wi + t10758)*f0_0_d_def__.n.extent_realized) + t10764
      for (relu1_0_d_def__.s9.n.ni, 0, t10766) {
       let t9421 = relu1_0_d_def__.s9.n.ni + t10767
       relu1_0_d_def__[t9421] = relu1_0_d_def__[t9421] + ((schedule_features[relu1_0_d_def__.s9.n.ni + t10768]*f0_0_d_def__[relu1_0_d_def__.s9.n.ni + t10769])*0.000000f)
      }
      let relu1_0_d_def__.s9.n.ni.new_max$2.s = batch_size - t10764
      let t10774 = (relu1_0_d_def__.s9.w.wi + t10758)*f0_0_d_def__.n.extent_realized
      let t10771 = max(min(batch_size - t10764, 8), 0) + t10764
      let t10770 = max(min(relu1_0_d_def__.s9.n.ni.new_max$2.s, 8), 0) + max(min(t10764 - batch_size, 0), -8)
      let t10773 = ((relu1_0_d_def__.s9.w.wi + t10765)*schedule_features.stride.2) + t10731
      let t10772 = (relu1_0_d_def__.n.extent_realized*24) + (((relu1_0_d_def__.s9.w.wi + t10755)*relu1_0_d_def__.n.extent_realized)*32)
      for (relu1_0_d_def__.s9.n.ni.rebased, 0, t10770) {
       let t9423 = relu1_0_d_def__.s9.n.ni.rebased + t10771
       let t9985 = t10772 + t9423
       relu1_0_d_def__[t9985] = relu1_0_d_def__[t9985] + ((schedule_features[t10773 + -1]*f0_0_d_def__[t10774 + t9423])*0.000000f)
      }
     }
    }
    let relu1_0_d_def__.s9.w.wi.new_max$1 = max(min(num_stages - (relu1_0_d_def__.s9.w.wi.base.s*2), 2), relu1_0_d_def__.s9.w.wi.epilogue)
    let t10784 = relu1_0_d_def__.s9.n.ni.base.s*8
    let t10776 = (t10784 + 8) <= batch_size
    let t10778 = ((relu1_0_d_def__.n.extent_realized*3) + relu1_0_d_def__.s9.n.ni.base.s)*8
    let t10779 = t10736*2
    let t10781 = f0_0_d_def__.w.min_realized.s*2
    let t10783 = t10784 - t10730
    let t10775 = relu1_0_d_def__.s9.w.wi.new_max$1 - relu1_0_d_def__.s9.w.wi.epilogue
    let t10777 = (relu1_0_d_def__.s9.w.wi.base.s*2) + relu1_0_d_def__.s9.w.wi.epilogue
    for (relu1_0_d_def__.s9.w.wi.rebased, 0, t10775) {
     if (t10776) {
      let t9425 = relu1_0_d_def__.s9.w.wi.rebased + t10777
      let t9426 = (((t9425 - t10779)*relu1_0_d_def__.n.extent_realized)*32) + t10778
      relu1_0_d_def__[ramp(t9426, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t9426, 1, 8) aligned(8, 0)] + ((schedule_features[min(ramp(t10784, 1, 8), x8(batch_size + -1)) + x8(((max(t9425, 0) - schedule_features.min.2)*schedule_features.stride.2) - t10729)]*f0_0_d_def__[ramp(((t9425 - t10781)*f0_0_d_def__.n.extent_realized) + t10784, 1, 8)])*x8(0.000000f))
     } else {
      let t10785 = max(min(batch_size - t10784, 8), 0)
      let t10786 = relu1_0_d_def__.s9.w.wi.rebased + t10777
      for (relu1_0_d_def__.s9.n.ni, 0, t10785) {
       let t9429 = ((((t10786 - t10779)*relu1_0_d_def__.n.extent_realized)*32) + t10778) + relu1_0_d_def__.s9.n.ni
       relu1_0_d_def__[t9429] = relu1_0_d_def__[t9429] + ((schedule_features[((max(t10786, 0)*schedule_features.stride.2) + t10783) + relu1_0_d_def__.s9.n.ni]*f0_0_d_def__[(((t10786 - t10781)*f0_0_d_def__.n.extent_realized) + t10784) + relu1_0_d_def__.s9.n.ni])*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10797 = schedule_features.stride.1*9
   let t10798 = schedule_features.stride.1*10
   let t10799 = schedule_features.stride.1*34
   let t10789 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10787 = (batch_size + 7)/8
   let t10790 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s10.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s10.n.ni.base.s = relu1_0_d_def__.s10.n.n.n % t10787
    let relu1_0_d_def__.s10.w.wi.base.s = relu1_0_d_def__.s10.n.n.n/t10787
    let relu1_0_d_def__.s10.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s10.w.wi.base.s*2)
    let t10818 = relu1_0_d_def__.n.extent_realized*15
    let t10819 = relu1_0_d_def__.s10.n.ni.base.s*8
    let t10820 = t10797 - t10790
    let t10821 = t10798 - t10790
    let t10822 = t10799 - t10790
    let t10801 = (t10819 + 8) <= batch_size
    let t10800 = max(min(relu1_0_d_def__.s10.w.wi.epilogue.s, 2), 0)
    let t10803 = (relu1_0_d_def__.s10.w.wi.base.s - t10789)*2
    let t10806 = (relu1_0_d_def__.s10.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10805 = relu1_0_d_def__.s10.w.wi.base.s*2
    let t10815 = (batch_size + t10799) - t10790
    let t10817 = (batch_size + t10798) - t10790
    let t10816 = (batch_size + t10797) - t10790
    for (relu1_0_d_def__.s10.w.wi, 0, t10800) {
     if (t10801) {
      let t9431 = (((relu1_0_d_def__.s10.w.wi + t10803)*relu1_0_d_def__.n.extent_realized)*32) + (t10818 + t10819)
      let t9432 = min(ramp(t10819, 1, 8), x8(batch_size + -1))
      let t9986 = max(relu1_0_d_def__.s10.w.wi + t10805, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9431, 1, 8)] = relu1_0_d_def__[ramp(t9431, 1, 8)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s10.w.wi + t10806)*f0_0_d_def__.n.extent_realized) + t10819, 1, 8)]*(schedule_features[t9432 + x8(t10822 + t9986)]*max(schedule_features[t9432 + x8(t10820 + t9986)]*schedule_features[t9432 + x8(t10821 + t9986)], x8(1.000000f))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s10.n.ni.new_max.s = batch_size - t10819
      let t10823 = max(min(relu1_0_d_def__.s10.n.ni.new_max.s, 8), 0)
      let t10825 = max(relu1_0_d_def__.s10.w.wi + t10805, 0)*schedule_features.stride.2
      let t10824 = (((relu1_0_d_def__.s10.w.wi + t10803)*relu1_0_d_def__.n.extent_realized)*32) + (t10818 + t10819)
      let t10826 = ((relu1_0_d_def__.s10.w.wi + t10806)*f0_0_d_def__.n.extent_realized) + t10819
      let t10827 = t10819 + t10822
      let t10829 = t10819 + t10821
      let t10828 = t10819 + t10820
      for (relu1_0_d_def__.s10.n.ni, 0, t10823) {
       let t9437 = relu1_0_d_def__.s10.n.ni + t10824
       relu1_0_d_def__[t9437] = relu1_0_d_def__[t9437] + ((f0_0_d_def__[relu1_0_d_def__.s10.n.ni + t10826]*(schedule_features[(t10825 + t10827) + relu1_0_d_def__.s10.n.ni]*max(schedule_features[(t10825 + t10828) + relu1_0_d_def__.s10.n.ni]*schedule_features[(t10825 + t10829) + relu1_0_d_def__.s10.n.ni], 1.000000f)))*0.000000f)
      }
      let relu1_0_d_def__.s10.n.ni.new_max$1.s = batch_size - t10819
      let t10833 = max(relu1_0_d_def__.s10.w.wi + t10805, 0)*schedule_features.stride.2
      let t10834 = (relu1_0_d_def__.s10.w.wi + t10806)*f0_0_d_def__.n.extent_realized
      let t10831 = max(min(batch_size - t10819, 8), 0) + t10819
      let t10830 = max(min(relu1_0_d_def__.s10.n.ni.new_max$1.s, 8), 0) + max(min(t10819 - batch_size, 0), -8)
      let t10832 = (((relu1_0_d_def__.s10.w.wi + t10803)*relu1_0_d_def__.n.extent_realized)*32) + t10818
      for (relu1_0_d_def__.s10.n.ni.rebased, 0, t10830) {
       let t9441 = relu1_0_d_def__.s10.n.ni.rebased + t10831
       let t9988 = t10832 + t9441
       relu1_0_d_def__[t9988] = relu1_0_d_def__[t9988] + ((f0_0_d_def__[t10834 + t9441]*(schedule_features[(t10815 + t10833) + -1]*max(schedule_features[(t10816 + t10833) + -1]*schedule_features[(t10817 + t10833) + -1], 1.000000f)))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10845 = schedule_features.stride.1*9
   let t10846 = schedule_features.stride.1*10
   let t10847 = schedule_features.stride.1*33
   let t10837 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10835 = (batch_size + 7)/8
   let t10838 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s11.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s11.n.ni.base.s = relu1_0_d_def__.s11.n.n.n % t10835
    let relu1_0_d_def__.s11.w.wi.base.s = relu1_0_d_def__.s11.n.n.n/t10835
    let relu1_0_d_def__.s11.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s11.w.wi.base.s*2)
    let t10866 = relu1_0_d_def__.n.extent_realized*14
    let t10867 = relu1_0_d_def__.s11.n.ni.base.s*8
    let t10868 = t10845 - t10838
    let t10869 = t10846 - t10838
    let t10870 = t10847 - t10838
    let t10849 = (t10867 + 8) <= batch_size
    let t10848 = max(min(relu1_0_d_def__.s11.w.wi.epilogue.s, 2), 0)
    let t10851 = (relu1_0_d_def__.s11.w.wi.base.s - t10837)*2
    let t10854 = (relu1_0_d_def__.s11.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10853 = relu1_0_d_def__.s11.w.wi.base.s*2
    let t10863 = (batch_size + t10847) - t10838
    let t10865 = (batch_size + t10846) - t10838
    let t10864 = (batch_size + t10845) - t10838
    for (relu1_0_d_def__.s11.w.wi, 0, t10848) {
     if (t10849) {
      let t9446 = (((relu1_0_d_def__.s11.w.wi + t10851)*relu1_0_d_def__.n.extent_realized)*32) + (t10866 + t10867)
      let t9447 = min(ramp(t10867, 1, 8), x8(batch_size + -1))
      let t9990 = max(relu1_0_d_def__.s11.w.wi + t10853, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9446, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t9446, 1, 8) aligned(2, 0)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s11.w.wi + t10854)*f0_0_d_def__.n.extent_realized) + t10867, 1, 8)]*(schedule_features[t9447 + x8(t10870 + t9990)]*max(schedule_features[t9447 + x8(t10868 + t9990)]*schedule_features[t9447 + x8(t10869 + t9990)], x8(1.000000f))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s11.n.ni.new_max.s = batch_size - t10867
      let t10871 = max(min(relu1_0_d_def__.s11.n.ni.new_max.s, 8), 0)
      let t10873 = max(relu1_0_d_def__.s11.w.wi + t10853, 0)*schedule_features.stride.2
      let t10872 = (((relu1_0_d_def__.s11.w.wi + t10851)*relu1_0_d_def__.n.extent_realized)*32) + (t10866 + t10867)
      let t10874 = ((relu1_0_d_def__.s11.w.wi + t10854)*f0_0_d_def__.n.extent_realized) + t10867
      let t10875 = t10867 + t10870
      let t10877 = t10867 + t10869
      let t10876 = t10867 + t10868
      for (relu1_0_d_def__.s11.n.ni, 0, t10871) {
       let t9452 = relu1_0_d_def__.s11.n.ni + t10872
       relu1_0_d_def__[t9452] = relu1_0_d_def__[t9452] + ((f0_0_d_def__[relu1_0_d_def__.s11.n.ni + t10874]*(schedule_features[(t10873 + t10875) + relu1_0_d_def__.s11.n.ni]*max(schedule_features[(t10873 + t10876) + relu1_0_d_def__.s11.n.ni]*schedule_features[(t10873 + t10877) + relu1_0_d_def__.s11.n.ni], 1.000000f)))*0.000000f)
      }
      let relu1_0_d_def__.s11.n.ni.new_max$1.s = batch_size - t10867
      let t10881 = max(relu1_0_d_def__.s11.w.wi + t10853, 0)*schedule_features.stride.2
      let t10882 = (relu1_0_d_def__.s11.w.wi + t10854)*f0_0_d_def__.n.extent_realized
      let t10879 = max(min(batch_size - t10867, 8), 0) + t10867
      let t10878 = max(min(relu1_0_d_def__.s11.n.ni.new_max$1.s, 8), 0) + max(min(t10867 - batch_size, 0), -8)
      let t10880 = (((relu1_0_d_def__.s11.w.wi + t10851)*relu1_0_d_def__.n.extent_realized)*32) + t10866
      for (relu1_0_d_def__.s11.n.ni.rebased, 0, t10878) {
       let t9456 = relu1_0_d_def__.s11.n.ni.rebased + t10879
       let t9992 = t10880 + t9456
       relu1_0_d_def__[t9992] = relu1_0_d_def__[t9992] + ((f0_0_d_def__[t10882 + t9456]*(schedule_features[(t10863 + t10881) + -1]*max(schedule_features[(t10864 + t10881) + -1]*schedule_features[(t10865 + t10881) + -1], 1.000000f)))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10891 = schedule_features.stride.1*24
   let t10892 = schedule_features.stride.1*32
   let t10885 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10883 = (batch_size + 7)/8
   let t10886 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s12.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s12.n.ni.base.s = relu1_0_d_def__.s12.n.n.n % t10883
    let relu1_0_d_def__.s12.w.wi.base.s = relu1_0_d_def__.s12.n.n.n/t10883
    let relu1_0_d_def__.s12.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s12.w.wi.base.s*2)
    let t10908 = relu1_0_d_def__.n.extent_realized*13
    let t10909 = relu1_0_d_def__.s12.n.ni.base.s*8
    let t10910 = t10891 - t10886
    let t10911 = t10892 - t10886
    let t10894 = (t10909 + 8) <= batch_size
    let t10893 = max(min(relu1_0_d_def__.s12.w.wi.epilogue.s, 2), 0)
    let t10896 = (relu1_0_d_def__.s12.w.wi.base.s - t10885)*2
    let t10899 = (relu1_0_d_def__.s12.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10898 = relu1_0_d_def__.s12.w.wi.base.s*2
    let t10907 = (batch_size + t10892) - t10886
    let t10906 = (batch_size + t10891) - t10886
    for (relu1_0_d_def__.s12.w.wi, 0, t10893) {
     if (t10894) {
      let t9461 = (((relu1_0_d_def__.s12.w.wi + t10896)*relu1_0_d_def__.n.extent_realized)*32) + (t10908 + t10909)
      let t9462 = min(ramp(t10909, 1, 8), x8(batch_size + -1))
      let t9994 = max(relu1_0_d_def__.s12.w.wi + t10898, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9461, 1, 8)] = relu1_0_d_def__[ramp(t9461, 1, 8)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s12.w.wi + t10899)*f0_0_d_def__.n.extent_realized) + t10909, 1, 8)]*(schedule_features[t9462 + x8(t10910 + t9994)]*schedule_features[t9462 + x8(t10911 + t9994)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s12.n.ni.new_max.s = batch_size - t10909
      let t10912 = max(min(relu1_0_d_def__.s12.n.ni.new_max.s, 8), 0)
      let t10914 = max(relu1_0_d_def__.s12.w.wi + t10898, 0)*schedule_features.stride.2
      let t10913 = (((relu1_0_d_def__.s12.w.wi + t10896)*relu1_0_d_def__.n.extent_realized)*32) + (t10908 + t10909)
      let t10915 = ((relu1_0_d_def__.s12.w.wi + t10899)*f0_0_d_def__.n.extent_realized) + t10909
      let t10917 = t10909 + t10911
      let t10916 = t10909 + t10910
      for (relu1_0_d_def__.s12.n.ni, 0, t10912) {
       let t9467 = relu1_0_d_def__.s12.n.ni + t10913
       relu1_0_d_def__[t9467] = relu1_0_d_def__[t9467] + ((f0_0_d_def__[relu1_0_d_def__.s12.n.ni + t10915]*(schedule_features[(t10914 + t10916) + relu1_0_d_def__.s12.n.ni]*schedule_features[(t10914 + t10917) + relu1_0_d_def__.s12.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s12.n.ni.new_max$1.s = batch_size - t10909
      let t10921 = max(relu1_0_d_def__.s12.w.wi + t10898, 0)*schedule_features.stride.2
      let t10922 = (relu1_0_d_def__.s12.w.wi + t10899)*f0_0_d_def__.n.extent_realized
      let t10919 = max(min(batch_size - t10909, 8), 0) + t10909
      let t10918 = max(min(relu1_0_d_def__.s12.n.ni.new_max$1.s, 8), 0) + max(min(t10909 - batch_size, 0), -8)
      let t10920 = (((relu1_0_d_def__.s12.w.wi + t10896)*relu1_0_d_def__.n.extent_realized)*32) + t10908
      for (relu1_0_d_def__.s12.n.ni.rebased, 0, t10918) {
       let t9471 = relu1_0_d_def__.s12.n.ni.rebased + t10919
       let t9996 = t10920 + t9471
       relu1_0_d_def__[t9996] = relu1_0_d_def__[t9996] + ((f0_0_d_def__[t10922 + t9471]*(schedule_features[(t10906 + t10921) + -1]*schedule_features[(t10907 + t10921) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10931 = schedule_features.stride.1*25
   let t10932 = schedule_features.stride.1*32
   let t10925 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10923 = (batch_size + 7)/8
   let t10926 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s13.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s13.n.ni.base.s = relu1_0_d_def__.s13.n.n.n % t10923
    let relu1_0_d_def__.s13.w.wi.base.s = relu1_0_d_def__.s13.n.n.n/t10923
    let relu1_0_d_def__.s13.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s13.w.wi.base.s*2)
    let t10948 = relu1_0_d_def__.n.extent_realized*12
    let t10949 = relu1_0_d_def__.s13.n.ni.base.s*8
    let t10950 = t10931 - t10926
    let t10951 = t10932 - t10926
    let t10934 = (t10949 + 8) <= batch_size
    let t10933 = max(min(relu1_0_d_def__.s13.w.wi.epilogue.s, 2), 0)
    let t10936 = (relu1_0_d_def__.s13.w.wi.base.s - t10925)*2
    let t10939 = (relu1_0_d_def__.s13.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10938 = relu1_0_d_def__.s13.w.wi.base.s*2
    let t10947 = (batch_size + t10932) - t10926
    let t10946 = (batch_size + t10931) - t10926
    for (relu1_0_d_def__.s13.w.wi, 0, t10933) {
     if (t10934) {
      let t9476 = (((relu1_0_d_def__.s13.w.wi + t10936)*relu1_0_d_def__.n.extent_realized)*32) + (t10948 + t10949)
      let t9477 = min(ramp(t10949, 1, 8), x8(batch_size + -1))
      let t9998 = max(relu1_0_d_def__.s13.w.wi + t10938, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9476, 1, 8) aligned(4, 0)] = relu1_0_d_def__[ramp(t9476, 1, 8) aligned(4, 0)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s13.w.wi + t10939)*f0_0_d_def__.n.extent_realized) + t10949, 1, 8)]*(schedule_features[t9477 + x8(t10950 + t9998)]*schedule_features[t9477 + x8(t10951 + t9998)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s13.n.ni.new_max.s = batch_size - t10949
      let t10952 = max(min(relu1_0_d_def__.s13.n.ni.new_max.s, 8), 0)
      let t10954 = max(relu1_0_d_def__.s13.w.wi + t10938, 0)*schedule_features.stride.2
      let t10953 = (((relu1_0_d_def__.s13.w.wi + t10936)*relu1_0_d_def__.n.extent_realized)*32) + (t10948 + t10949)
      let t10955 = ((relu1_0_d_def__.s13.w.wi + t10939)*f0_0_d_def__.n.extent_realized) + t10949
      let t10957 = t10949 + t10951
      let t10956 = t10949 + t10950
      for (relu1_0_d_def__.s13.n.ni, 0, t10952) {
       let t9482 = relu1_0_d_def__.s13.n.ni + t10953
       relu1_0_d_def__[t9482] = relu1_0_d_def__[t9482] + ((f0_0_d_def__[relu1_0_d_def__.s13.n.ni + t10955]*(schedule_features[(t10954 + t10956) + relu1_0_d_def__.s13.n.ni]*schedule_features[(t10954 + t10957) + relu1_0_d_def__.s13.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s13.n.ni.new_max$1.s = batch_size - t10949
      let t10961 = max(relu1_0_d_def__.s13.w.wi + t10938, 0)*schedule_features.stride.2
      let t10962 = (relu1_0_d_def__.s13.w.wi + t10939)*f0_0_d_def__.n.extent_realized
      let t10959 = max(min(batch_size - t10949, 8), 0) + t10949
      let t10958 = max(min(relu1_0_d_def__.s13.n.ni.new_max$1.s, 8), 0) + max(min(t10949 - batch_size, 0), -8)
      let t10960 = (((relu1_0_d_def__.s13.w.wi + t10936)*relu1_0_d_def__.n.extent_realized)*32) + t10948
      for (relu1_0_d_def__.s13.n.ni.rebased, 0, t10958) {
       let t9486 = relu1_0_d_def__.s13.n.ni.rebased + t10959
       let t10000 = t10960 + t9486
       relu1_0_d_def__[t10000] = relu1_0_d_def__[t10000] + ((f0_0_d_def__[t10962 + t9486]*(schedule_features[(t10946 + t10961) + -1]*schedule_features[(t10947 + t10961) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t10971 = schedule_features.stride.1*24
   let t10972 = schedule_features.stride.1*31
   let t10965 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t10963 = (batch_size + 7)/8
   let t10966 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s14.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s14.n.ni.base.s = relu1_0_d_def__.s14.n.n.n % t10963
    let relu1_0_d_def__.s14.w.wi.base.s = relu1_0_d_def__.s14.n.n.n/t10963
    let relu1_0_d_def__.s14.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s14.w.wi.base.s*2)
    let t10988 = relu1_0_d_def__.n.extent_realized*11
    let t10989 = relu1_0_d_def__.s14.n.ni.base.s*8
    let t10990 = t10971 - t10966
    let t10991 = t10972 - t10966
    let t10974 = (t10989 + 8) <= batch_size
    let t10973 = max(min(relu1_0_d_def__.s14.w.wi.epilogue.s, 2), 0)
    let t10976 = (relu1_0_d_def__.s14.w.wi.base.s - t10965)*2
    let t10979 = (relu1_0_d_def__.s14.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t10978 = relu1_0_d_def__.s14.w.wi.base.s*2
    let t10987 = (batch_size + t10972) - t10966
    let t10986 = (batch_size + t10971) - t10966
    for (relu1_0_d_def__.s14.w.wi, 0, t10973) {
     if (t10974) {
      let t9491 = (((relu1_0_d_def__.s14.w.wi + t10976)*relu1_0_d_def__.n.extent_realized)*32) + (t10988 + t10989)
      let t9492 = min(ramp(t10989, 1, 8), x8(batch_size + -1))
      let t10002 = max(relu1_0_d_def__.s14.w.wi + t10978, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9491, 1, 8)] = relu1_0_d_def__[ramp(t9491, 1, 8)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s14.w.wi + t10979)*f0_0_d_def__.n.extent_realized) + t10989, 1, 8)]*(schedule_features[t9492 + x8(t10002 + t10990)]*schedule_features[t9492 + x8(t10002 + t10991)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s14.n.ni.new_max.s = batch_size - t10989
      let t10992 = max(min(relu1_0_d_def__.s14.n.ni.new_max.s, 8), 0)
      let t10994 = max(relu1_0_d_def__.s14.w.wi + t10978, 0)*schedule_features.stride.2
      let t10993 = (((relu1_0_d_def__.s14.w.wi + t10976)*relu1_0_d_def__.n.extent_realized)*32) + (t10988 + t10989)
      let t10995 = ((relu1_0_d_def__.s14.w.wi + t10979)*f0_0_d_def__.n.extent_realized) + t10989
      let t10997 = t10989 + t10991
      let t10996 = t10989 + t10990
      for (relu1_0_d_def__.s14.n.ni, 0, t10992) {
       let t9497 = relu1_0_d_def__.s14.n.ni + t10993
       relu1_0_d_def__[t9497] = relu1_0_d_def__[t9497] + ((f0_0_d_def__[relu1_0_d_def__.s14.n.ni + t10995]*(schedule_features[(t10994 + t10996) + relu1_0_d_def__.s14.n.ni]*schedule_features[(t10994 + t10997) + relu1_0_d_def__.s14.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s14.n.ni.new_max$1.s = batch_size - t10989
      let t11001 = max(relu1_0_d_def__.s14.w.wi + t10978, 0)*schedule_features.stride.2
      let t11002 = (relu1_0_d_def__.s14.w.wi + t10979)*f0_0_d_def__.n.extent_realized
      let t10999 = max(min(batch_size - t10989, 8), 0) + t10989
      let t10998 = max(min(relu1_0_d_def__.s14.n.ni.new_max$1.s, 8), 0) + max(min(t10989 - batch_size, 0), -8)
      let t11000 = (((relu1_0_d_def__.s14.w.wi + t10976)*relu1_0_d_def__.n.extent_realized)*32) + t10988
      for (relu1_0_d_def__.s14.n.ni.rebased, 0, t10998) {
       let t9501 = relu1_0_d_def__.s14.n.ni.rebased + t10999
       let t10004 = t11000 + t9501
       relu1_0_d_def__[t10004] = relu1_0_d_def__[t10004] + ((f0_0_d_def__[t11002 + t9501]*(schedule_features[(t10986 + t11001) + -1]*schedule_features[(t10987 + t11001) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11011 = schedule_features.stride.1*25
   let t11012 = schedule_features.stride.1*31
   let t11005 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11003 = (batch_size + 7)/8
   let t11006 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s15.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s15.n.ni.base.s = relu1_0_d_def__.s15.n.n.n % t11003
    let relu1_0_d_def__.s15.w.wi.base.s = relu1_0_d_def__.s15.n.n.n/t11003
    let relu1_0_d_def__.s15.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s15.w.wi.base.s*2)
    let t11028 = relu1_0_d_def__.n.extent_realized*10
    let t11029 = relu1_0_d_def__.s15.n.ni.base.s*8
    let t11030 = t11011 - t11006
    let t11031 = t11012 - t11006
    let t11014 = (t11029 + 8) <= batch_size
    let t11013 = max(min(relu1_0_d_def__.s15.w.wi.epilogue.s, 2), 0)
    let t11016 = (relu1_0_d_def__.s15.w.wi.base.s - t11005)*2
    let t11019 = (relu1_0_d_def__.s15.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11018 = relu1_0_d_def__.s15.w.wi.base.s*2
    let t11027 = (batch_size + t11012) - t11006
    let t11026 = (batch_size + t11011) - t11006
    for (relu1_0_d_def__.s15.w.wi, 0, t11013) {
     if (t11014) {
      let t9506 = (((relu1_0_d_def__.s15.w.wi + t11016)*relu1_0_d_def__.n.extent_realized)*32) + (t11028 + t11029)
      let t9507 = min(ramp(t11029, 1, 8), x8(batch_size + -1))
      let t10006 = max(relu1_0_d_def__.s15.w.wi + t11018, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9506, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t9506, 1, 8) aligned(2, 0)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s15.w.wi + t11019)*f0_0_d_def__.n.extent_realized) + t11029, 1, 8)]*(schedule_features[t9507 + x8(t10006 + t11030)]*schedule_features[t9507 + x8(t10006 + t11031)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s15.n.ni.new_max.s = batch_size - t11029
      let t11032 = max(min(relu1_0_d_def__.s15.n.ni.new_max.s, 8), 0)
      let t11034 = max(relu1_0_d_def__.s15.w.wi + t11018, 0)*schedule_features.stride.2
      let t11033 = (((relu1_0_d_def__.s15.w.wi + t11016)*relu1_0_d_def__.n.extent_realized)*32) + (t11028 + t11029)
      let t11035 = ((relu1_0_d_def__.s15.w.wi + t11019)*f0_0_d_def__.n.extent_realized) + t11029
      let t11037 = t11029 + t11031
      let t11036 = t11029 + t11030
      for (relu1_0_d_def__.s15.n.ni, 0, t11032) {
       let t9512 = relu1_0_d_def__.s15.n.ni + t11033
       relu1_0_d_def__[t9512] = relu1_0_d_def__[t9512] + ((f0_0_d_def__[relu1_0_d_def__.s15.n.ni + t11035]*(schedule_features[(t11034 + t11036) + relu1_0_d_def__.s15.n.ni]*schedule_features[(t11034 + t11037) + relu1_0_d_def__.s15.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s15.n.ni.new_max$1.s = batch_size - t11029
      let t11041 = max(relu1_0_d_def__.s15.w.wi + t11018, 0)*schedule_features.stride.2
      let t11042 = (relu1_0_d_def__.s15.w.wi + t11019)*f0_0_d_def__.n.extent_realized
      let t11039 = max(min(batch_size - t11029, 8), 0) + t11029
      let t11038 = max(min(relu1_0_d_def__.s15.n.ni.new_max$1.s, 8), 0) + max(min(t11029 - batch_size, 0), -8)
      let t11040 = (((relu1_0_d_def__.s15.w.wi + t11016)*relu1_0_d_def__.n.extent_realized)*32) + t11028
      for (relu1_0_d_def__.s15.n.ni.rebased, 0, t11038) {
       let t9516 = relu1_0_d_def__.s15.n.ni.rebased + t11039
       let t10008 = t11040 + t9516
       relu1_0_d_def__[t10008] = relu1_0_d_def__[t10008] + ((f0_0_d_def__[t11042 + t9516]*(schedule_features[(t11026 + t11041) + -1]*schedule_features[(t11027 + t11041) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11051 = schedule_features.stride.1*24
   let t11052 = schedule_features.stride.1*27
   let t11045 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11043 = (batch_size + 7)/8
   let t11046 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s16.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s16.n.ni.base.s = relu1_0_d_def__.s16.n.n.n % t11043
    let relu1_0_d_def__.s16.w.wi.base.s = relu1_0_d_def__.s16.n.n.n/t11043
    let relu1_0_d_def__.s16.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s16.w.wi.base.s*2)
    let t11068 = relu1_0_d_def__.n.extent_realized*9
    let t11069 = relu1_0_d_def__.s16.n.ni.base.s*8
    let t11070 = t11051 - t11046
    let t11071 = t11052 - t11046
    let t11054 = (t11069 + 8) <= batch_size
    let t11053 = max(min(relu1_0_d_def__.s16.w.wi.epilogue.s, 2), 0)
    let t11056 = (relu1_0_d_def__.s16.w.wi.base.s - t11045)*2
    let t11059 = (relu1_0_d_def__.s16.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11058 = relu1_0_d_def__.s16.w.wi.base.s*2
    let t11067 = (batch_size + t11052) - t11046
    let t11066 = (batch_size + t11051) - t11046
    for (relu1_0_d_def__.s16.w.wi, 0, t11053) {
     if (t11054) {
      let t9521 = (((relu1_0_d_def__.s16.w.wi + t11056)*relu1_0_d_def__.n.extent_realized)*32) + (t11068 + t11069)
      let t9522 = min(ramp(t11069, 1, 8), x8(batch_size + -1))
      let t10010 = max(relu1_0_d_def__.s16.w.wi + t11058, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9521, 1, 8)] = relu1_0_d_def__[ramp(t9521, 1, 8)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s16.w.wi + t11059)*f0_0_d_def__.n.extent_realized) + t11069, 1, 8)]*(schedule_features[t9522 + x8(t10010 + t11070)]*schedule_features[t9522 + x8(t10010 + t11071)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s16.n.ni.new_max.s = batch_size - t11069
      let t11072 = max(min(relu1_0_d_def__.s16.n.ni.new_max.s, 8), 0)
      let t11074 = max(relu1_0_d_def__.s16.w.wi + t11058, 0)*schedule_features.stride.2
      let t11073 = (((relu1_0_d_def__.s16.w.wi + t11056)*relu1_0_d_def__.n.extent_realized)*32) + (t11068 + t11069)
      let t11075 = ((relu1_0_d_def__.s16.w.wi + t11059)*f0_0_d_def__.n.extent_realized) + t11069
      let t11077 = t11069 + t11071
      let t11076 = t11069 + t11070
      for (relu1_0_d_def__.s16.n.ni, 0, t11072) {
       let t9527 = relu1_0_d_def__.s16.n.ni + t11073
       relu1_0_d_def__[t9527] = relu1_0_d_def__[t9527] + ((f0_0_d_def__[relu1_0_d_def__.s16.n.ni + t11075]*(schedule_features[(t11074 + t11076) + relu1_0_d_def__.s16.n.ni]*schedule_features[(t11074 + t11077) + relu1_0_d_def__.s16.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s16.n.ni.new_max$1.s = batch_size - t11069
      let t11081 = max(relu1_0_d_def__.s16.w.wi + t11058, 0)*schedule_features.stride.2
      let t11082 = (relu1_0_d_def__.s16.w.wi + t11059)*f0_0_d_def__.n.extent_realized
      let t11079 = max(min(batch_size - t11069, 8), 0) + t11069
      let t11078 = max(min(relu1_0_d_def__.s16.n.ni.new_max$1.s, 8), 0) + max(min(t11069 - batch_size, 0), -8)
      let t11080 = (((relu1_0_d_def__.s16.w.wi + t11056)*relu1_0_d_def__.n.extent_realized)*32) + t11068
      for (relu1_0_d_def__.s16.n.ni.rebased, 0, t11078) {
       let t9531 = relu1_0_d_def__.s16.n.ni.rebased + t11079
       let t10012 = t11080 + t9531
       relu1_0_d_def__[t10012] = relu1_0_d_def__[t10012] + ((f0_0_d_def__[t11082 + t9531]*(schedule_features[(t11066 + t11081) + -1]*schedule_features[(t11067 + t11081) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11090 = schedule_features.stride.1*25
   let t11091 = schedule_features.stride.1*28
   let t11084 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11083 = (batch_size + 7)/8
   let t11085 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s17.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s17.n.ni.base.s = relu1_0_d_def__.s17.n.n.n % t11083
    let relu1_0_d_def__.s17.w.wi.base.s = relu1_0_d_def__.s17.n.n.n/t11083
    let relu1_0_d_def__.s17.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s17.w.wi.base.s*2)
    let t11107 = relu1_0_d_def__.s17.n.ni.base.s*8
    let t11108 = t11090 - t11085
    let t11109 = t11091 - t11085
    let t11110 = relu1_0_d_def__.s17.w.wi.base.s - t11084
    let t11093 = (t11107 + 8) <= batch_size
    let t11092 = max(min(relu1_0_d_def__.s17.w.wi.epilogue.s, 2), 0)
    let t11098 = (relu1_0_d_def__.s17.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11097 = relu1_0_d_def__.s17.w.wi.base.s*2
    let t11106 = (batch_size + t11091) - t11085
    let t11105 = (batch_size + t11090) - t11085
    let t11096 = relu1_0_d_def__.n.extent_realized + relu1_0_d_def__.s17.n.ni.base.s
    for (relu1_0_d_def__.s17.w.wi, 0, t11092) {
     if (t11093) {
      let t9537 = min(ramp(t11107, 1, 8), x8(batch_size + -1))
      let t10014 = ((((t11110*2) + relu1_0_d_def__.s17.w.wi)*relu1_0_d_def__.n.extent_realized)*4) + t11096
      let t10015 = max(relu1_0_d_def__.s17.w.wi + t11097, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t10014*8, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t10014*8, 1, 8) aligned(8, 0)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s17.w.wi + t11098)*f0_0_d_def__.n.extent_realized) + t11107, 1, 8)]*(schedule_features[t9537 + x8(t10015 + t11108)]*schedule_features[t9537 + x8(t10015 + t11109)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s17.n.ni.new_max.s = batch_size - t11107
      let t11111 = max(min(relu1_0_d_def__.s17.n.ni.new_max.s, 8), 0)
      let t11113 = max(relu1_0_d_def__.s17.w.wi + t11097, 0)*schedule_features.stride.2
      let t11112 = ((((((t11110*2) + relu1_0_d_def__.s17.w.wi)*relu1_0_d_def__.n.extent_realized)*4) + relu1_0_d_def__.n.extent_realized)*8) + t11107
      let t11114 = ((relu1_0_d_def__.s17.w.wi + t11098)*f0_0_d_def__.n.extent_realized) + t11107
      let t11116 = t11107 + t11109
      let t11115 = t11107 + t11108
      for (relu1_0_d_def__.s17.n.ni, 0, t11111) {
       let t9542 = relu1_0_d_def__.s17.n.ni + t11112
       relu1_0_d_def__[t9542] = relu1_0_d_def__[t9542] + ((f0_0_d_def__[relu1_0_d_def__.s17.n.ni + t11114]*(schedule_features[(t11113 + t11115) + relu1_0_d_def__.s17.n.ni]*schedule_features[(t11113 + t11116) + relu1_0_d_def__.s17.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s17.n.ni.new_max$1.s = batch_size - t11107
      let t11120 = max(relu1_0_d_def__.s17.w.wi + t11097, 0)*schedule_features.stride.2
      let t11119 = (((((t11110*2) + relu1_0_d_def__.s17.w.wi)*relu1_0_d_def__.n.extent_realized)*4) + relu1_0_d_def__.n.extent_realized)*8
      let t11121 = (relu1_0_d_def__.s17.w.wi + t11098)*f0_0_d_def__.n.extent_realized
      let t11118 = max(min(batch_size - t11107, 8), 0) + t11107
      let t11117 = max(min(relu1_0_d_def__.s17.n.ni.new_max$1.s, 8), 0) + max(min(t11107 - batch_size, 0), -8)
      for (relu1_0_d_def__.s17.n.ni.rebased, 0, t11117) {
       let t9546 = relu1_0_d_def__.s17.n.ni.rebased + t11118
       let t10017 = t11119 + t9546
       relu1_0_d_def__[t10017] = relu1_0_d_def__[t10017] + ((f0_0_d_def__[t11121 + t9546]*(schedule_features[(t11105 + t11120) + -1]*schedule_features[(t11106 + t11120) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11130 = schedule_features.stride.1*24
   let t11131 = schedule_features.stride.1*26
   let t11124 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11122 = (batch_size + 7)/8
   let t11125 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s18.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s18.n.ni.base.s = relu1_0_d_def__.s18.n.n.n % t11122
    let relu1_0_d_def__.s18.w.wi.base.s = relu1_0_d_def__.s18.n.n.n/t11122
    let relu1_0_d_def__.s18.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s18.w.wi.base.s*2)
    let t11147 = relu1_0_d_def__.n.extent_realized*7
    let t11148 = relu1_0_d_def__.s18.n.ni.base.s*8
    let t11149 = t11130 - t11125
    let t11150 = t11131 - t11125
    let t11133 = (t11148 + 8) <= batch_size
    let t11132 = max(min(relu1_0_d_def__.s18.w.wi.epilogue.s, 2), 0)
    let t11135 = (relu1_0_d_def__.s18.w.wi.base.s - t11124)*2
    let t11138 = (relu1_0_d_def__.s18.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11137 = relu1_0_d_def__.s18.w.wi.base.s*2
    let t11146 = (batch_size + t11131) - t11125
    let t11145 = (batch_size + t11130) - t11125
    for (relu1_0_d_def__.s18.w.wi, 0, t11132) {
     if (t11133) {
      let t9551 = (((relu1_0_d_def__.s18.w.wi + t11135)*relu1_0_d_def__.n.extent_realized)*32) + (t11147 + t11148)
      let t9552 = min(ramp(t11148, 1, 8), x8(batch_size + -1))
      let t10019 = max(relu1_0_d_def__.s18.w.wi + t11137, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9551, 1, 8)] = relu1_0_d_def__[ramp(t9551, 1, 8)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s18.w.wi + t11138)*f0_0_d_def__.n.extent_realized) + t11148, 1, 8)]*(schedule_features[t9552 + x8(t10019 + t11149)]*schedule_features[t9552 + x8(t10019 + t11150)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s18.n.ni.new_max.s = batch_size - t11148
      let t11151 = max(min(relu1_0_d_def__.s18.n.ni.new_max.s, 8), 0)
      let t11153 = max(relu1_0_d_def__.s18.w.wi + t11137, 0)*schedule_features.stride.2
      let t11152 = (((relu1_0_d_def__.s18.w.wi + t11135)*relu1_0_d_def__.n.extent_realized)*32) + (t11147 + t11148)
      let t11154 = ((relu1_0_d_def__.s18.w.wi + t11138)*f0_0_d_def__.n.extent_realized) + t11148
      let t11156 = t11148 + t11150
      let t11155 = t11148 + t11149
      for (relu1_0_d_def__.s18.n.ni, 0, t11151) {
       let t9557 = relu1_0_d_def__.s18.n.ni + t11152
       relu1_0_d_def__[t9557] = relu1_0_d_def__[t9557] + ((f0_0_d_def__[relu1_0_d_def__.s18.n.ni + t11154]*(schedule_features[(t11153 + t11155) + relu1_0_d_def__.s18.n.ni]*schedule_features[(t11153 + t11156) + relu1_0_d_def__.s18.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s18.n.ni.new_max$1.s = batch_size - t11148
      let t11160 = max(relu1_0_d_def__.s18.w.wi + t11137, 0)*schedule_features.stride.2
      let t11161 = (relu1_0_d_def__.s18.w.wi + t11138)*f0_0_d_def__.n.extent_realized
      let t11158 = max(min(batch_size - t11148, 8), 0) + t11148
      let t11157 = max(min(relu1_0_d_def__.s18.n.ni.new_max$1.s, 8), 0) + max(min(t11148 - batch_size, 0), -8)
      let t11159 = (((relu1_0_d_def__.s18.w.wi + t11135)*relu1_0_d_def__.n.extent_realized)*32) + t11147
      for (relu1_0_d_def__.s18.n.ni.rebased, 0, t11157) {
       let t9561 = relu1_0_d_def__.s18.n.ni.rebased + t11158
       let t10021 = t11159 + t9561
       relu1_0_d_def__[t10021] = relu1_0_d_def__[t10021] + ((f0_0_d_def__[t11161 + t9561]*(schedule_features[(t11145 + t11160) + -1]*schedule_features[(t11146 + t11160) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11170 = schedule_features.min.2*schedule_features.stride.2
   let t11171 = schedule_features.min.1*schedule_features.stride.1
   let t11172 = schedule_features.stride.1*18
   let t11164 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11162 = (batch_size + 7)/8
   let t11166 = t11172 - t11170
   let t11167 = (t11170 + t11171) + schedule_features.min.0
   parallel (relu1_0_d_def__.s19.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s19.n.ni.base.s = relu1_0_d_def__.s19.n.n.n % t11162
    let relu1_0_d_def__.s19.w.wi.base.s = relu1_0_d_def__.s19.n.n.n/t11162
    let relu1_0_d_def__.s19.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s19.w.wi.base.s*2)
    let t11188 = relu1_0_d_def__.n.extent_realized*6
    let t11189 = relu1_0_d_def__.s19.n.ni.base.s*8
    let t11174 = (t11189 + 8) <= batch_size
    let t11173 = max(min(relu1_0_d_def__.s19.w.wi.epilogue.s, 2), 0)
    let t11176 = (relu1_0_d_def__.s19.w.wi.base.s - t11164)*2
    let t11179 = (relu1_0_d_def__.s19.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11178 = relu1_0_d_def__.s19.w.wi.base.s*2
    let t11183 = t11189 - t11167
    let t11181 = (t11166 - t11171) - schedule_features.min.0
    let t11187 = (batch_size + t11172) - t11167
    let t11186 = batch_size - t11167
    let t11184 = (t11172 - t11167) + t11189
    let t11180 = schedule_features.min.0 + t11171
    for (relu1_0_d_def__.s19.w.wi, 0, t11173) {
     if (t11174) {
      let t9566 = (((relu1_0_d_def__.s19.w.wi + t11176)*relu1_0_d_def__.n.extent_realized)*32) + (t11188 + t11189)
      let t9567 = min(ramp(t11189, 1, 8), x8(batch_size + -1))
      let t10023 = max(relu1_0_d_def__.s19.w.wi + t11178, 0)
      relu1_0_d_def__[ramp(t9566, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t9566, 1, 8) aligned(2, 0)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s19.w.wi + t11179)*f0_0_d_def__.n.extent_realized) + t11189, 1, 8)]*(schedule_features[t9567 + x8(((t10023 - schedule_features.min.2)*schedule_features.stride.2) - t11180)]*schedule_features[t9567 + x8((schedule_features.stride.2*t10023) + t11181)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s19.n.ni.new_max$1.s = batch_size - t11189
      let t11190 = max(min(relu1_0_d_def__.s19.n.ni.new_max$1.s, 8), 0)
      let t11192 = max(relu1_0_d_def__.s19.w.wi + t11178, 0)*schedule_features.stride.2
      let t11191 = (((relu1_0_d_def__.s19.w.wi + t11176)*relu1_0_d_def__.n.extent_realized)*32) + (t11188 + t11189)
      let t11193 = ((relu1_0_d_def__.s19.w.wi + t11179)*f0_0_d_def__.n.extent_realized) + t11189
      for (relu1_0_d_def__.s19.n.ni, 0, t11190) {
       let t9572 = relu1_0_d_def__.s19.n.ni + t11191
       relu1_0_d_def__[t9572] = relu1_0_d_def__[t9572] + ((f0_0_d_def__[relu1_0_d_def__.s19.n.ni + t11193]*(schedule_features[(t11183 + t11192) + relu1_0_d_def__.s19.n.ni]*schedule_features[(t11184 + t11192) + relu1_0_d_def__.s19.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s19.n.ni.new_max$2.s = batch_size - t11189
      let t11197 = max(relu1_0_d_def__.s19.w.wi + t11178, 0)*schedule_features.stride.2
      let t11198 = (relu1_0_d_def__.s19.w.wi + t11179)*f0_0_d_def__.n.extent_realized
      let t11195 = max(min(batch_size - t11189, 8), 0) + t11189
      let t11194 = max(min(relu1_0_d_def__.s19.n.ni.new_max$2.s, 8), 0) + max(min(t11189 - batch_size, 0), -8)
      let t11196 = (((relu1_0_d_def__.s19.w.wi + t11176)*relu1_0_d_def__.n.extent_realized)*32) + t11188
      for (relu1_0_d_def__.s19.n.ni.rebased, 0, t11194) {
       let t9576 = relu1_0_d_def__.s19.n.ni.rebased + t11195
       let t10026 = t11196 + t9576
       relu1_0_d_def__[t10026] = relu1_0_d_def__[t10026] + ((f0_0_d_def__[t11198 + t9576]*(schedule_features[(t11186 + t11197) + -1]*schedule_features[(t11187 + t11197) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11207 = schedule_features.min.2*schedule_features.stride.2
   let t11208 = schedule_features.min.1*schedule_features.stride.1
   let t11209 = schedule_features.stride.1*19
   let t11201 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11199 = (batch_size + 7)/8
   let t11203 = t11209 - t11207
   let t11204 = (t11207 + t11208) + schedule_features.min.0
   parallel (relu1_0_d_def__.s20.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s20.n.ni.base.s = relu1_0_d_def__.s20.n.n.n % t11199
    let relu1_0_d_def__.s20.w.wi.base.s = relu1_0_d_def__.s20.n.n.n/t11199
    let relu1_0_d_def__.s20.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s20.w.wi.base.s*2)
    let t11225 = relu1_0_d_def__.n.extent_realized*5
    let t11226 = relu1_0_d_def__.s20.n.ni.base.s*8
    let t11211 = (t11226 + 8) <= batch_size
    let t11210 = max(min(relu1_0_d_def__.s20.w.wi.epilogue.s, 2), 0)
    let t11213 = (relu1_0_d_def__.s20.w.wi.base.s - t11201)*2
    let t11216 = (relu1_0_d_def__.s20.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11215 = relu1_0_d_def__.s20.w.wi.base.s*2
    let t11220 = t11226 - t11204
    let t11218 = (t11203 - t11208) - schedule_features.min.0
    let t11224 = (batch_size + t11209) - t11204
    let t11223 = batch_size - t11204
    let t11221 = (t11209 - t11204) + t11226
    let t11217 = schedule_features.min.0 + t11208
    for (relu1_0_d_def__.s20.w.wi, 0, t11210) {
     if (t11211) {
      let t9581 = (((relu1_0_d_def__.s20.w.wi + t11213)*relu1_0_d_def__.n.extent_realized)*32) + (t11225 + t11226)
      let t9582 = min(ramp(t11226, 1, 8), x8(batch_size + -1))
      let t10028 = max(relu1_0_d_def__.s20.w.wi + t11215, 0)
      relu1_0_d_def__[ramp(t9581, 1, 8)] = relu1_0_d_def__[ramp(t9581, 1, 8)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s20.w.wi + t11216)*f0_0_d_def__.n.extent_realized) + t11226, 1, 8)]*(schedule_features[t9582 + x8(((t10028 - schedule_features.min.2)*schedule_features.stride.2) - t11217)]*schedule_features[t9582 + x8((schedule_features.stride.2*t10028) + t11218)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s20.n.ni.new_max.s = batch_size - t11226
      let t11227 = max(min(relu1_0_d_def__.s20.n.ni.new_max.s, 8), 0)
      let t11229 = max(relu1_0_d_def__.s20.w.wi + t11215, 0)*schedule_features.stride.2
      let t11228 = (((relu1_0_d_def__.s20.w.wi + t11213)*relu1_0_d_def__.n.extent_realized)*32) + (t11225 + t11226)
      let t11230 = ((relu1_0_d_def__.s20.w.wi + t11216)*f0_0_d_def__.n.extent_realized) + t11226
      for (relu1_0_d_def__.s20.n.ni, 0, t11227) {
       let t9587 = relu1_0_d_def__.s20.n.ni + t11228
       relu1_0_d_def__[t9587] = relu1_0_d_def__[t9587] + ((f0_0_d_def__[relu1_0_d_def__.s20.n.ni + t11230]*(schedule_features[(t11220 + t11229) + relu1_0_d_def__.s20.n.ni]*schedule_features[(t11221 + t11229) + relu1_0_d_def__.s20.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s20.n.ni.new_max$1.s = batch_size - t11226
      let t11234 = max(relu1_0_d_def__.s20.w.wi + t11215, 0)*schedule_features.stride.2
      let t11235 = (relu1_0_d_def__.s20.w.wi + t11216)*f0_0_d_def__.n.extent_realized
      let t11232 = max(min(batch_size - t11226, 8), 0) + t11226
      let t11231 = max(min(relu1_0_d_def__.s20.n.ni.new_max$1.s, 8), 0) + max(min(t11226 - batch_size, 0), -8)
      let t11233 = (((relu1_0_d_def__.s20.w.wi + t11213)*relu1_0_d_def__.n.extent_realized)*32) + t11225
      for (relu1_0_d_def__.s20.n.ni.rebased, 0, t11231) {
       let t9591 = relu1_0_d_def__.s20.n.ni.rebased + t11232
       let t10031 = t11233 + t9591
       relu1_0_d_def__[t10031] = relu1_0_d_def__[t10031] + ((f0_0_d_def__[t11235 + t9591]*(schedule_features[(t11223 + t11234) + -1]*schedule_features[(t11224 + t11234) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11248 = schedule_features.stride.1*9
   let t11249 = schedule_features.stride.1*10
   let t11250 = schedule_features.stride.1*12
   let t11251 = schedule_features.stride.1*30
   let t11238 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11236 = (batch_size + 7)/8
   let t11239 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s21.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s21.n.ni.base.s = relu1_0_d_def__.s21.n.n.n % t11236
    let relu1_0_d_def__.s21.w.wi.base.s = relu1_0_d_def__.s21.n.n.n/t11236
    let relu1_0_d_def__.s21.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s21.w.wi.base.s*2)
    let t11273 = relu1_0_d_def__.n.extent_realized*23
    let t11274 = relu1_0_d_def__.s21.n.ni.base.s*8
    let t11275 = t11248 - t11239
    let t11276 = t11249 - t11239
    let t11277 = t11250 - t11239
    let t11278 = t11251 - t11239
    let t11253 = (t11274 + 8) <= batch_size
    let t11252 = max(min(relu1_0_d_def__.s21.w.wi.epilogue.s, 2), 0)
    let t11255 = (relu1_0_d_def__.s21.w.wi.base.s - t11238)*2
    let t11259 = (relu1_0_d_def__.s21.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11258 = relu1_0_d_def__.s21.w.wi.base.s*2
    let t11272 = (batch_size + t11251) - t11239
    let t11271 = (batch_size + t11250) - t11239
    let t11270 = (batch_size + t11249) - t11239
    let t11269 = (batch_size + t11248) - t11239
    for (relu1_0_d_def__.s21.w.wi, 0, t11252) {
     if (t11253) {
      let t9596 = (((relu1_0_d_def__.s21.w.wi + t11255)*relu1_0_d_def__.n.extent_realized)*32) + (t11273 + t11274)
      let t9597 = min(ramp(t11274, 1, 8), x8(batch_size + -1))
      let t9600 = schedule_features[t9597 + x8((max(relu1_0_d_def__.s21.w.wi + t11258, 0)*schedule_features.stride.2) + t11275)]
      let t10033 = max(relu1_0_d_def__.s21.w.wi + t11258, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9596, 1, 8)] = relu1_0_d_def__[ramp(t9596, 1, 8)] + ((f0_0_d_def__[ramp(((relu1_0_d_def__.s21.w.wi + t11259)*f0_0_d_def__.n.extent_realized) + t11274, 1, 8)]*(schedule_features[t9597 + x8(t10033 + t11276)]*((schedule_features[t9597 + x8(t10033 + t11277)]*min(x8(4096.000000f)/max(schedule_features[t9597 + x8(t10033 + t11278)], x8(1.000000f)), t9600))*t9600)))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s21.n.ni.new_max$1.s = batch_size - t11274
      let t11287 = max(relu1_0_d_def__.s21.w.wi + t11258, 0)*schedule_features.stride.2
      let t11279 = max(min(relu1_0_d_def__.s21.n.ni.new_max$1.s, 8), 0)
      let t11281 = (t11274 + t11275) + t11287
      let t11280 = (((relu1_0_d_def__.s21.w.wi + t11255)*relu1_0_d_def__.n.extent_realized)*32) + (t11273 + t11274)
      let t11283 = ((relu1_0_d_def__.s21.w.wi + t11259)*f0_0_d_def__.n.extent_realized) + t11274
      let t11286 = t11274 + t11278
      let t11285 = t11274 + t11277
      let t11284 = t11274 + t11276
      for (relu1_0_d_def__.s21.n.ni, 0, t11279) {
       let t9603 = relu1_0_d_def__.s21.n.ni + t11280
       let t9606 = schedule_features[relu1_0_d_def__.s21.n.ni + t11281]
       relu1_0_d_def__[t9603] = relu1_0_d_def__[t9603] + ((f0_0_d_def__[relu1_0_d_def__.s21.n.ni + t11283]*(schedule_features[(t11284 + t11287) + relu1_0_d_def__.s21.n.ni]*((schedule_features[(t11285 + t11287) + relu1_0_d_def__.s21.n.ni]*min(4096.000000f/max(schedule_features[(t11286 + t11287) + relu1_0_d_def__.s21.n.ni], 1.000000f), t9606))*t9606)))*0.000000f)
      }
      let relu1_0_d_def__.s21.n.ni.new_max$2.s = batch_size - t11274
      let t11294 = max(relu1_0_d_def__.s21.w.wi + t11258, 0)*schedule_features.stride.2
      let t11293 = (relu1_0_d_def__.s21.w.wi + t11259)*f0_0_d_def__.n.extent_realized
      let t11289 = max(min(batch_size - t11274, 8), 0) + t11274
      let t11288 = max(min(relu1_0_d_def__.s21.n.ni.new_max$2.s, 8), 0) + max(min(t11274 - batch_size, 0), -8)
      let t11291 = t11269 + t11294
      let t11290 = (((relu1_0_d_def__.s21.w.wi + t11255)*relu1_0_d_def__.n.extent_realized)*32) + t11273
      for (relu1_0_d_def__.s21.n.ni.rebased, 0, t11288) {
       let t9608 = relu1_0_d_def__.s21.n.ni.rebased + t11289
       let t9612 = schedule_features[t11291 + -1]
       let t10035 = t11290 + t9608
       relu1_0_d_def__[t10035] = relu1_0_d_def__[t10035] + ((f0_0_d_def__[t11293 + t9608]*(schedule_features[(t11270 + t11294) + -1]*((schedule_features[(t11271 + t11294) + -1]*min(4096.000000f/max(schedule_features[(t11272 + t11294) + -1], 1.000000f), t9612))*t9612)))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11307 = schedule_features.stride.1*9
   let t11308 = schedule_features.stride.1*24
   let t11309 = schedule_features.stride.1*25
   let t11310 = schedule_features.stride.1*30
   let t11297 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11295 = (batch_size + 7)/8
   let t11298 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s22.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s22.n.ni.base.s = relu1_0_d_def__.s22.n.n.n % t11295
    let relu1_0_d_def__.s22.w.wi.base.s = relu1_0_d_def__.s22.n.n.n/t11295
    let relu1_0_d_def__.s22.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s22.w.wi.base.s*2)
    let t11332 = relu1_0_d_def__.n.extent_realized*22
    let t11333 = relu1_0_d_def__.s22.n.ni.base.s*8
    let t11334 = t11307 - t11298
    let t11335 = t11308 - t11298
    let t11336 = t11309 - t11298
    let t11337 = t11310 - t11298
    let t11312 = (t11333 + 8) <= batch_size
    let t11311 = max(min(relu1_0_d_def__.s22.w.wi.epilogue.s, 2), 0)
    let t11314 = (relu1_0_d_def__.s22.w.wi.base.s - t11297)*2
    let t11318 = (relu1_0_d_def__.s22.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11316 = relu1_0_d_def__.s22.w.wi.base.s*2
    let t11329 = (batch_size + t11310) - t11298
    let t11331 = (batch_size + t11309) - t11298
    let t11330 = (batch_size + t11308) - t11298
    let t11328 = (batch_size + t11307) - t11298
    for (relu1_0_d_def__.s22.w.wi, 0, t11311) {
     if (t11312) {
      let t9614 = (((relu1_0_d_def__.s22.w.wi + t11314)*relu1_0_d_def__.n.extent_realized)*32) + (t11332 + t11333)
      let t9615 = min(ramp(t11333, 1, 8), x8(batch_size + -1))
      let t10037 = max(relu1_0_d_def__.s22.w.wi + t11316, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9614, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t9614, 1, 8) aligned(2, 0)] + select(x8(1.000000f) < schedule_features[t9615 + x8(t10037 + t11334)], ((f0_0_d_def__[ramp(((relu1_0_d_def__.s22.w.wi + t11318)*f0_0_d_def__.n.extent_realized) + t11333, 1, 8)]*x8(0.000000f))/max(schedule_features[t9615 + x8(t10037 + t11337)], x8(1.000000f)))*(schedule_features[t9615 + x8(t10037 + t11335)] + schedule_features[t9615 + x8(t10037 + t11336)]), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s22.n.ni.new_max.s = batch_size - t11333
      let t11338 = max(min(relu1_0_d_def__.s22.n.ni.new_max.s, 8), 0)
      let t11340 = max(relu1_0_d_def__.s22.w.wi + t11316, 0)*schedule_features.stride.2
      let t11339 = (((relu1_0_d_def__.s22.w.wi + t11314)*relu1_0_d_def__.n.extent_realized)*32) + (t11332 + t11333)
      let t11342 = ((relu1_0_d_def__.s22.w.wi + t11318)*f0_0_d_def__.n.extent_realized) + t11333
      let t11343 = t11333 + t11337
      let t11345 = t11333 + t11336
      let t11344 = t11333 + t11335
      let t11341 = t11333 + t11334
      for (relu1_0_d_def__.s22.n.ni, 0, t11338) {
       let t9620 = relu1_0_d_def__.s22.n.ni + t11339
       relu1_0_d_def__[t9620] = relu1_0_d_def__[t9620] + select(1.000000f < schedule_features[(t11340 + t11341) + relu1_0_d_def__.s22.n.ni], ((f0_0_d_def__[relu1_0_d_def__.s22.n.ni + t11342]*0.000000f)/max(schedule_features[(t11340 + t11343) + relu1_0_d_def__.s22.n.ni], 1.000000f))*(schedule_features[(t11340 + t11344) + relu1_0_d_def__.s22.n.ni] + schedule_features[(t11340 + t11345) + relu1_0_d_def__.s22.n.ni]), 0.000000f)
      }
      let relu1_0_d_def__.s22.n.ni.new_max$1.s = batch_size - t11333
      let t11349 = max(relu1_0_d_def__.s22.w.wi + t11316, 0)*schedule_features.stride.2
      let t11350 = (relu1_0_d_def__.s22.w.wi + t11318)*f0_0_d_def__.n.extent_realized
      let t11347 = max(min(batch_size - t11333, 8), 0) + t11333
      let t11346 = max(min(relu1_0_d_def__.s22.n.ni.new_max$1.s, 8), 0) + max(min(t11333 - batch_size, 0), -8)
      let t11348 = (((relu1_0_d_def__.s22.w.wi + t11314)*relu1_0_d_def__.n.extent_realized)*32) + t11332
      for (relu1_0_d_def__.s22.n.ni.rebased, 0, t11346) {
       let t9624 = relu1_0_d_def__.s22.n.ni.rebased + t11347
       let t10039 = t11348 + t9624
       relu1_0_d_def__[t10039] = relu1_0_d_def__[t10039] + select(1.000000f < schedule_features[(t11328 + t11349) + -1], ((f0_0_d_def__[t11350 + t9624]*0.000000f)/max(schedule_features[(t11329 + t11349) + -1], 1.000000f))*(schedule_features[(t11330 + t11349) + -1] + schedule_features[(t11331 + t11349) + -1]), 0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11361 = schedule_features.min.1*schedule_features.stride.1
   let t11362 = schedule_features.stride.1*9
   let t11363 = schedule_features.stride.1*11
   let t11351 = (batch_size + 7)/8
   let t11353 = min(relu1_0_d_def__.w.min_realized.s, 0)*2
   let t11358 = f0_0_d_def__.w.min_realized.s*2
   let t11357 = schedule_features.min.0 + t11361
   let t11354 = ((schedule_features.min.2*schedule_features.stride.2) + t11361) + schedule_features.min.0
   parallel (relu1_0_d_def__.s23.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s23.n.ni.base.s = relu1_0_d_def__.s23.n.n.n % t11351
    let relu1_0_d_def__.s23.w.wi.base.s = relu1_0_d_def__.s23.n.n.n/t11351
    let relu1_0_d_def__.s23.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s23.w.wi.base.s*2)
    let relu1_0_d_def__.s23.w.wi.new_min.s = min(1 - (relu1_0_d_def__.s23.w.wi.base.s*2), relu1_0_d_def__.s23.w.wi.epilogue.s)
    let t11379 = relu1_0_d_def__.n.extent_realized*21
    let t11380 = relu1_0_d_def__.s23.n.ni.base.s*8
    let t11381 = t11362 - t11354
    let t11382 = t11363 - t11354
    let t11383 = max(min(relu1_0_d_def__.s23.w.wi.new_min.s, 2), 0)
    let t11365 = (t11380 + 8) <= batch_size
    let t11364 = max(min(relu1_0_d_def__.s23.w.wi.epilogue.s, 2), 0) - t11383
    let t11374 = t11380 - t11354
    let t11377 = (batch_size + t11363) - t11354
    let t11376 = (batch_size + t11362) - t11354
    let t11378 = batch_size - t11354
    let t11366 = (relu1_0_d_def__.s23.w.wi.base.s*2) + t11383
    for (relu1_0_d_def__.s23.w.wi.rebased, 0, t11364) {
     if (t11365) {
      let t9628 = relu1_0_d_def__.s23.w.wi.rebased + t11366
      let t9629 = (((t9628 - t11353)*relu1_0_d_def__.n.extent_realized)*32) + (t11379 + t11380)
      let t9630 = min(ramp(t11380, 1, 8), x8(batch_size + -1))
      let t10041 = schedule_features.stride.2*t9628
      relu1_0_d_def__[ramp(t9629, 1, 8)] = relu1_0_d_def__[ramp(t9629, 1, 8)] + select(x8(1.000000f) < schedule_features[t9630 + x8(t10041 + t11381)], x8(0.000000f), (schedule_features[t9630 + x8(t10041 + t11382)]*(schedule_features[t9630 + x8(((t9628 - schedule_features.min.2)*schedule_features.stride.2) - t11357)]*f0_0_d_def__[ramp(((t9628 - t11358)*f0_0_d_def__.n.extent_realized) + t11380, 1, 8)]))*x8(0.000000f))
     } else {
      let t11384 = max(min(batch_size - t11380, 8), 0)
      let t11388 = t11380 + t11382
      let t11387 = t11380 + t11381
      let t11386 = t11379 + t11380
      let t11385 = relu1_0_d_def__.s23.w.wi.rebased + t11366
      for (relu1_0_d_def__.s23.n.ni, 0, t11384) {
       let t9636 = ((((t11385 - t11353)*relu1_0_d_def__.n.extent_realized)*32) + t11386) + relu1_0_d_def__.s23.n.ni
       let t10042 = schedule_features.stride.2*t11385
       relu1_0_d_def__[t9636] = relu1_0_d_def__[t9636] + select(1.000000f < schedule_features[(t10042 + t11387) + relu1_0_d_def__.s23.n.ni], 0.000000f, (schedule_features[(t10042 + t11388) + relu1_0_d_def__.s23.n.ni]*(schedule_features[(t10042 + t11374) + relu1_0_d_def__.s23.n.ni]*f0_0_d_def__[(((t11385 - t11358)*f0_0_d_def__.n.extent_realized) + t11380) + relu1_0_d_def__.s23.n.ni]))*0.000000f)
      }
      let t11391 = max(min(batch_size - t11380, 8), 0) + t11380
      let t11390 = relu1_0_d_def__.s23.w.wi.rebased + t11366
      for (relu1_0_d_def__.s23.n.ni.rebased, 0, 0) {
       let t9640 = relu1_0_d_def__.s23.n.ni.rebased + t11391
       let t9641.s = (((t11390 - t11353)*relu1_0_d_def__.n.extent_realized)*32) + t11379
       let t10043 = t9640 + t9641.s
       let t10044 = schedule_features.stride.2*t11390
       relu1_0_d_def__[t10043] = relu1_0_d_def__[t10043] + select(1.000000f < schedule_features[(t10044 + t11376) + -1], 0.000000f, (schedule_features[(t10044 + t11377) + -1]*(schedule_features[(t10044 + t11378) + -1]*f0_0_d_def__[((t11390 - t11358)*f0_0_d_def__.n.extent_realized) + t9640]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11401 = schedule_features.min.2*schedule_features.stride.2
   let t11402 = schedule_features.min.1*schedule_features.stride.1
   let t11403 = schedule_features.stride.1*9
   let t11404 = schedule_features.stride.1*11
   let t11394 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11392 = (batch_size + 7)/8
   let t11398 = ((0 - t11401) - t11402) - schedule_features.min.0
   let t11395 = (t11401 + t11402) + schedule_features.min.0
   parallel (relu1_0_d_def__.s24.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s24.n.ni.base.s = relu1_0_d_def__.s24.n.n.n % t11392
    let relu1_0_d_def__.s24.w.wi.base.s = relu1_0_d_def__.s24.n.n.n/t11392
    let relu1_0_d_def__.s24.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s24.w.wi.base.s*2)
    let relu1_0_d_def__.s24.w.wi.new_max.s = min(1 - (relu1_0_d_def__.s24.w.wi.base.s*2), relu1_0_d_def__.s24.w.wi.epilogue.s)
    let t11421 = relu1_0_d_def__.n.extent_realized*20
    let t11422 = relu1_0_d_def__.s24.n.ni.base.s*8
    let t11423 = t11403 - t11395
    let t11424 = t11404 - t11395
    let t11406 = (t11422 + 8) <= batch_size
    let t11405 = max(min(relu1_0_d_def__.s24.w.wi.new_max.s, 2), 0)
    let t11408 = (relu1_0_d_def__.s24.w.wi.base.s - t11394)*2
    let t11412 = (relu1_0_d_def__.s24.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11416 = t11422 - t11395
    let t11419 = (batch_size + t11404) - t11395
    let t11418 = (batch_size + t11403) - t11395
    let t11420 = batch_size - t11395
    for (relu1_0_d_def__.s24.w.wi, 0, t11405) {
     if (t11406) {
      let t9645 = (((relu1_0_d_def__.s24.w.wi + t11408)*relu1_0_d_def__.n.extent_realized)*32) + (t11421 + t11422)
      let t9646 = min(ramp(t11422, 1, 8), x8(batch_size + -1))
      relu1_0_d_def__[ramp(t9645, 1, 8) aligned(4, 0)] = relu1_0_d_def__[ramp(t9645, 1, 8) aligned(4, 0)] + select(x8(1.000000f) < schedule_features[t9646 + x8(t11423)], x8(0.000000f), (schedule_features[t9646 + x8(t11424)]*(schedule_features[t9646 + x8(t11398)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s24.w.wi + t11412)*f0_0_d_def__.n.extent_realized) + t11422, 1, 8)]))*x8(0.000000f))
     } else {
      let t11425 = max(min(batch_size - t11422, 8), 0)
      let t11426 = (((relu1_0_d_def__.s24.w.wi + t11408)*relu1_0_d_def__.n.extent_realized)*32) + (t11421 + t11422)
      let t11429 = ((relu1_0_d_def__.s24.w.wi + t11412)*f0_0_d_def__.n.extent_realized) + t11422
      let t11428 = t11422 + t11424
      let t11427 = t11422 + t11423
      for (relu1_0_d_def__.s24.n.ni, 0, t11425) {
       let t9652 = relu1_0_d_def__.s24.n.ni + t11426
       relu1_0_d_def__[t9652] = relu1_0_d_def__[t9652] + select(1.000000f < schedule_features[relu1_0_d_def__.s24.n.ni + t11427], 0.000000f, (schedule_features[relu1_0_d_def__.s24.n.ni + t11428]*(schedule_features[relu1_0_d_def__.s24.n.ni + t11416]*f0_0_d_def__[relu1_0_d_def__.s24.n.ni + t11429]))*0.000000f)
      }
      let t11433 = (relu1_0_d_def__.s24.w.wi + t11412)*f0_0_d_def__.n.extent_realized
      let t11431 = max(min(batch_size - t11422, 8), 0) + t11422
      let t11432 = (((relu1_0_d_def__.s24.w.wi + t11408)*relu1_0_d_def__.n.extent_realized)*32) + t11421
      for (relu1_0_d_def__.s24.n.ni.rebased, 0, 0) {
       let t9655 = relu1_0_d_def__.s24.n.ni.rebased + t11431
       let t10045 = t11432 + t9655
       relu1_0_d_def__[t10045] = relu1_0_d_def__[t10045] + select(1.000000f < schedule_features[t11418 + -1], 0.000000f, (schedule_features[t11419 + -1]*(schedule_features[t11420 + -1]*f0_0_d_def__[t11433 + t9655]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11443 = schedule_features.min.1*schedule_features.stride.1
   let t11444 = schedule_features.stride.1*9
   let t11445 = schedule_features.stride.1*11
   let t11436 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11434 = (batch_size + 7)/8
   let t11440 = schedule_features.min.0 + t11443
   let t11437 = ((schedule_features.min.2*schedule_features.stride.2) + t11443) + schedule_features.min.0
   parallel (relu1_0_d_def__.s25.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s25.n.ni.base.s = relu1_0_d_def__.s25.n.n.n % t11434
    let relu1_0_d_def__.s25.w.wi.base.s = relu1_0_d_def__.s25.n.n.n/t11434
    let relu1_0_d_def__.s25.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s25.w.wi.base.s*2)
    let t11463 = relu1_0_d_def__.n.extent_realized*19
    let t11464 = relu1_0_d_def__.s25.n.ni.base.s*8
    let t11465 = t11444 - t11437
    let t11466 = t11445 - t11437
    let t11447 = (t11464 + 8) <= batch_size
    let t11446 = max(min(relu1_0_d_def__.s25.w.wi.epilogue.s, 2), 0)
    let t11449 = (relu1_0_d_def__.s25.w.wi.base.s - t11436)*2
    let t11454 = (relu1_0_d_def__.s25.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11451 = relu1_0_d_def__.s25.w.wi.base.s*2
    let t11458 = t11464 - t11437
    let t11461 = (batch_size + t11445) - t11437
    let t11460 = (batch_size + t11444) - t11437
    let t11462 = batch_size - t11437
    for (relu1_0_d_def__.s25.w.wi, 0, t11446) {
     if (t11447) {
      let t9659 = (((relu1_0_d_def__.s25.w.wi + t11449)*relu1_0_d_def__.n.extent_realized)*32) + (t11463 + t11464)
      let t9660 = min(ramp(t11464, 1, 8), x8(batch_size + -1))
      let t10046 = max(relu1_0_d_def__.s25.w.wi + t11451, 0)
      let t10047 = schedule_features.stride.2*t10046
      relu1_0_d_def__[ramp(t9659, 1, 8)] = relu1_0_d_def__[ramp(t9659, 1, 8)] + select(x8(1.000000f) < schedule_features[t9660 + x8(t10047 + t11465)], (schedule_features[t9660 + x8(t10047 + t11466)]*(schedule_features[t9660 + x8(((t10046 - schedule_features.min.2)*schedule_features.stride.2) - t11440)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s25.w.wi + t11454)*f0_0_d_def__.n.extent_realized) + t11464, 1, 8)]))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s25.n.ni.new_max.s = batch_size - t11464
      let t11467 = max(min(relu1_0_d_def__.s25.n.ni.new_max.s, 8), 0)
      let t11469 = max(relu1_0_d_def__.s25.w.wi + t11451, 0)*schedule_features.stride.2
      let t11468 = (((relu1_0_d_def__.s25.w.wi + t11449)*relu1_0_d_def__.n.extent_realized)*32) + (t11463 + t11464)
      let t11472 = ((relu1_0_d_def__.s25.w.wi + t11454)*f0_0_d_def__.n.extent_realized) + t11464
      let t11471 = t11464 + t11466
      let t11470 = t11464 + t11465
      for (relu1_0_d_def__.s25.n.ni, 0, t11467) {
       let t9667 = relu1_0_d_def__.s25.n.ni + t11468
       relu1_0_d_def__[t9667] = relu1_0_d_def__[t9667] + select(1.000000f < schedule_features[(t11469 + t11470) + relu1_0_d_def__.s25.n.ni], (schedule_features[(t11469 + t11471) + relu1_0_d_def__.s25.n.ni]*(schedule_features[(t11458 + t11469) + relu1_0_d_def__.s25.n.ni]*f0_0_d_def__[relu1_0_d_def__.s25.n.ni + t11472]))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s25.n.ni.new_max$1.s = batch_size - t11464
      let t11476 = max(relu1_0_d_def__.s25.w.wi + t11451, 0)*schedule_features.stride.2
      let t11477 = (relu1_0_d_def__.s25.w.wi + t11454)*f0_0_d_def__.n.extent_realized
      let t11474 = max(min(batch_size - t11464, 8), 0) + t11464
      let t11473 = max(min(relu1_0_d_def__.s25.n.ni.new_max$1.s, 8), 0) + max(min(t11464 - batch_size, 0), -8)
      let t11475 = (((relu1_0_d_def__.s25.w.wi + t11449)*relu1_0_d_def__.n.extent_realized)*32) + t11463
      for (relu1_0_d_def__.s25.n.ni.rebased, 0, t11473) {
       let t9671 = relu1_0_d_def__.s25.n.ni.rebased + t11474
       let t10049 = t11475 + t9671
       relu1_0_d_def__[t10049] = relu1_0_d_def__[t10049] + select(1.000000f < schedule_features[(t11460 + t11476) + -1], (schedule_features[(t11461 + t11476) + -1]*(schedule_features[(t11462 + t11476) + -1]*f0_0_d_def__[t11477 + t9671]))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11490 = schedule_features.min.1*schedule_features.stride.1
   let t11491 = schedule_features.stride.1*9
   let t11492 = schedule_features.stride.1*29
   let t11493 = schedule_features.stride.1*30
   let t11478 = (batch_size + 7)/8
   let t11480 = min(relu1_0_d_def__.w.min_realized.s, 0)*2
   let t11484 = f0_0_d_def__.w.min_realized.s*2
   let t11483 = schedule_features.min.0 + t11490
   let t11481 = ((schedule_features.min.2*schedule_features.stride.2) + t11490) + schedule_features.min.0
   parallel (relu1_0_d_def__.s26.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s26.n.ni.base.s = relu1_0_d_def__.s26.n.n.n % t11478
    let relu1_0_d_def__.s26.w.wi.base.s = relu1_0_d_def__.s26.n.n.n/t11478
    let relu1_0_d_def__.s26.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s26.w.wi.base.s*2)
    let relu1_0_d_def__.s26.w.wi.new_min.s = min(1 - (relu1_0_d_def__.s26.w.wi.base.s*2), relu1_0_d_def__.s26.w.wi.epilogue.s)
    let t11512 = relu1_0_d_def__.n.extent_realized*18
    let t11513 = relu1_0_d_def__.s26.n.ni.base.s*8
    let t11514 = t11491 - t11481
    let t11515 = t11492 - t11481
    let t11516 = t11493 - t11481
    let t11517 = max(min(relu1_0_d_def__.s26.w.wi.new_min.s, 2), 0)
    let t11495 = (t11513 + 8) <= batch_size
    let t11494 = max(min(relu1_0_d_def__.s26.w.wi.epilogue.s, 2), 0) - t11517
    let t11504 = t11513 - t11481
    let t11511 = (batch_size + t11493) - t11481
    let t11510 = (batch_size + t11492) - t11481
    let t11508 = (batch_size + t11491) - t11481
    let t11509 = batch_size - t11481
    let t11496 = (relu1_0_d_def__.s26.w.wi.base.s*2) + t11517
    for (relu1_0_d_def__.s26.w.wi.rebased, 0, t11494) {
     if (t11495) {
      let t9675 = relu1_0_d_def__.s26.w.wi.rebased + t11496
      let t9676 = (((t9675 - t11480)*relu1_0_d_def__.n.extent_realized)*32) + (t11512 + t11513)
      let t9677 = min(ramp(t11513, 1, 8), x8(batch_size + -1))
      let t9681 = schedule_features[t9677 + x8((schedule_features.stride.2*t9675) + t11514)]
      let t10051 = schedule_features.stride.2*t9675
      relu1_0_d_def__[ramp(t9676, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t9676, 1, 8) aligned(2, 0)] + select(x8(1.000000f) < t9681, x8(0.000000f), ((schedule_features[t9677 + x8(((t9675 - schedule_features.min.2)*schedule_features.stride.2) - t11483)]*f0_0_d_def__[ramp(((t9675 - t11484)*f0_0_d_def__.n.extent_realized) + t11513, 1, 8)])*((schedule_features[t9677 + x8(t10051 + t11515)]/max(schedule_features[t9677 + x8(t10051 + t11516)], x8(1.000000f)))*t9681))*x8(0.000000f))
     } else {
      let t11518 = max(min(batch_size - t11513, 8), 0)
      let t11523 = t11513 + t11516
      let t11522 = t11513 + t11515
      let t11521 = t11513 + t11514
      let t11520 = t11512 + t11513
      let t11519 = relu1_0_d_def__.s26.w.wi.rebased + t11496
      for (relu1_0_d_def__.s26.n.ni, 0, t11518) {
       let t9684 = ((((t11519 - t11480)*relu1_0_d_def__.n.extent_realized)*32) + t11520) + relu1_0_d_def__.s26.n.ni
       let t9687 = schedule_features[((schedule_features.stride.2*t11519) + t11521) + relu1_0_d_def__.s26.n.ni]
       let t10052 = schedule_features.stride.2*t11519
       relu1_0_d_def__[t9684] = relu1_0_d_def__[t9684] + select(1.000000f < t9687, 0.000000f, ((schedule_features[(t10052 + t11504) + relu1_0_d_def__.s26.n.ni]*f0_0_d_def__[(((t11519 - t11484)*f0_0_d_def__.n.extent_realized) + t11513) + relu1_0_d_def__.s26.n.ni])*((schedule_features[(t10052 + t11522) + relu1_0_d_def__.s26.n.ni]/max(schedule_features[(t10052 + t11523) + relu1_0_d_def__.s26.n.ni], 1.000000f))*t9687))*0.000000f)
      }
      let t11526 = max(min(batch_size - t11513, 8), 0) + t11513
      let t11525 = relu1_0_d_def__.s26.w.wi.rebased + t11496
      for (relu1_0_d_def__.s26.n.ni.rebased, 0, 0) {
       let t9689 = relu1_0_d_def__.s26.n.ni.rebased + t11526
       let t9690.s = (((t11525 - t11480)*relu1_0_d_def__.n.extent_realized)*32) + t11512
       let t9693 = schedule_features[((schedule_features.stride.2*t11525) + t11508) + -1]
       let t10053 = t9689 + t9690.s
       let t10054 = schedule_features.stride.2*t11525
       relu1_0_d_def__[t10053] = relu1_0_d_def__[t10053] + select(1.000000f < t9693, 0.000000f, ((schedule_features[(t10054 + t11509) + -1]*f0_0_d_def__[((t11525 - t11484)*f0_0_d_def__.n.extent_realized) + t9689])*((schedule_features[(t10054 + t11510) + -1]/max(schedule_features[(t10054 + t11511) + -1], 1.000000f))*t9693))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11538 = schedule_features.min.2*schedule_features.stride.2
   let t11539 = schedule_features.min.1*schedule_features.stride.1
   let t11540 = schedule_features.stride.1*9
   let t11541 = schedule_features.stride.1*29
   let t11542 = schedule_features.stride.1*30
   let t11529 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11527 = (batch_size + 7)/8
   let t11532 = ((0 - t11538) - t11539) - schedule_features.min.0
   let t11530 = (t11538 + t11539) + schedule_features.min.0
   parallel (relu1_0_d_def__.s27.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s27.n.ni.base.s = relu1_0_d_def__.s27.n.n.n % t11527
    let relu1_0_d_def__.s27.w.wi.base.s = relu1_0_d_def__.s27.n.n.n/t11527
    let relu1_0_d_def__.s27.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s27.w.wi.base.s*2)
    let relu1_0_d_def__.s27.w.wi.new_max.s = min(1 - (relu1_0_d_def__.s27.w.wi.base.s*2), relu1_0_d_def__.s27.w.wi.epilogue.s)
    let t11562 = relu1_0_d_def__.n.extent_realized*17
    let t11563 = relu1_0_d_def__.s27.n.ni.base.s*8
    let t11564 = t11540 - t11530
    let t11565 = t11541 - t11530
    let t11566 = t11542 - t11530
    let t11544 = (t11563 + 8) <= batch_size
    let t11543 = max(min(relu1_0_d_def__.s27.w.wi.new_max.s, 2), 0)
    let t11546 = (relu1_0_d_def__.s27.w.wi.base.s - t11529)*2
    let t11549 = (relu1_0_d_def__.s27.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11554 = t11563 - t11530
    let t11561 = (batch_size + t11542) - t11530
    let t11560 = (batch_size + t11541) - t11530
    let t11558 = (batch_size + t11540) - t11530
    let t11559 = batch_size - t11530
    for (relu1_0_d_def__.s27.w.wi, 0, t11543) {
     if (t11544) {
      let t9695 = (((relu1_0_d_def__.s27.w.wi + t11546)*relu1_0_d_def__.n.extent_realized)*32) + (t11562 + t11563)
      let t9696 = min(ramp(t11563, 1, 8), x8(batch_size + -1))
      let t9700 = schedule_features[t9696 + x8(t11564)]
      relu1_0_d_def__[ramp(t9695, 1, 8)] = relu1_0_d_def__[ramp(t9695, 1, 8)] + select(x8(1.000000f) < t9700, x8(0.000000f), ((schedule_features[t9696 + x8(t11532)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s27.w.wi + t11549)*f0_0_d_def__.n.extent_realized) + t11563, 1, 8)])*((schedule_features[t9696 + x8(t11565)]/max(schedule_features[t9696 + x8(t11566)], x8(1.000000f)))*t9700))*x8(0.000000f))
     } else {
      let t11567 = max(min(batch_size - t11563, 8), 0)
      let t11568 = (((relu1_0_d_def__.s27.w.wi + t11546)*relu1_0_d_def__.n.extent_realized)*32) + (t11562 + t11563)
      let t11570 = ((relu1_0_d_def__.s27.w.wi + t11549)*f0_0_d_def__.n.extent_realized) + t11563
      let t11572 = t11563 + t11566
      let t11571 = t11563 + t11565
      let t11569 = t11563 + t11564
      for (relu1_0_d_def__.s27.n.ni, 0, t11567) {
       let t9703 = relu1_0_d_def__.s27.n.ni + t11568
       let t9705 = schedule_features[relu1_0_d_def__.s27.n.ni + t11569]
       relu1_0_d_def__[t9703] = relu1_0_d_def__[t9703] + select(1.000000f < t9705, 0.000000f, ((schedule_features[relu1_0_d_def__.s27.n.ni + t11554]*f0_0_d_def__[relu1_0_d_def__.s27.n.ni + t11570])*((schedule_features[relu1_0_d_def__.s27.n.ni + t11571]/max(schedule_features[relu1_0_d_def__.s27.n.ni + t11572], 1.000000f))*t9705))*0.000000f)
      }
      let t11576 = (relu1_0_d_def__.s27.w.wi + t11549)*f0_0_d_def__.n.extent_realized
      let t11574 = max(min(batch_size - t11563, 8), 0) + t11563
      let t11575 = (((relu1_0_d_def__.s27.w.wi + t11546)*relu1_0_d_def__.n.extent_realized)*32) + t11562
      for (relu1_0_d_def__.s27.n.ni.rebased, 0, 0) {
       let t9707 = relu1_0_d_def__.s27.n.ni.rebased + t11574
       let t9710 = schedule_features[t11558 + -1]
       let t10055 = t11575 + t9707
       relu1_0_d_def__[t10055] = relu1_0_d_def__[t10055] + select(1.000000f < t9710, 0.000000f, ((schedule_features[t11559 + -1]*f0_0_d_def__[t11576 + t9707])*((schedule_features[t11560 + -1]/max(schedule_features[t11561 + -1], 1.000000f))*t9710))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11587 = schedule_features.min.1*schedule_features.stride.1
   let t11588 = schedule_features.stride.1*9
   let t11589 = schedule_features.stride.1*29
   let t11590 = schedule_features.stride.1*30
   let t11578 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11577 = (batch_size + 7)/8
   let t11581 = schedule_features.min.0 + t11587
   let t11579 = ((schedule_features.min.2*schedule_features.stride.2) + t11587) + schedule_features.min.0
   parallel (relu1_0_d_def__.s28.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s28.n.ni.base.s = relu1_0_d_def__.s28.n.n.n % t11577
    let relu1_0_d_def__.s28.w.wi.base.s = relu1_0_d_def__.s28.n.n.n/t11577
    let relu1_0_d_def__.s28.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s28.w.wi.base.s*2)
    let t11610 = relu1_0_d_def__.s28.n.ni.base.s*8
    let t11611 = t11588 - t11579
    let t11612 = t11589 - t11579
    let t11613 = t11590 - t11579
    let t11614 = relu1_0_d_def__.s28.w.wi.base.s - t11578
    let t11592 = (t11610 + 8) <= batch_size
    let t11591 = max(min(relu1_0_d_def__.s28.w.wi.epilogue.s, 2), 0)
    let t11597 = (relu1_0_d_def__.s28.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11596 = relu1_0_d_def__.s28.w.wi.base.s*2
    let t11603 = t11610 - t11579
    let t11609 = (batch_size + t11590) - t11579
    let t11608 = (batch_size + t11589) - t11579
    let t11606 = (batch_size + t11588) - t11579
    let t11607 = batch_size - t11579
    for (relu1_0_d_def__.s28.w.wi, 0, t11591) {
     if (t11592) {
      let t9713 = min(ramp(t11610, 1, 8), x8(batch_size + -1))
      let t9718 = schedule_features[t9713 + x8((max(relu1_0_d_def__.s28.w.wi + t11596, 0)*schedule_features.stride.2) + t11611)]
      let t10056 = ((((((t11614*2) + relu1_0_d_def__.s28.w.wi)*relu1_0_d_def__.n.extent_realized)*2) + relu1_0_d_def__.n.extent_realized)*2) + relu1_0_d_def__.s28.n.ni.base.s
      let t10057 = max(relu1_0_d_def__.s28.w.wi + t11596, 0)
      let t10058 = schedule_features.stride.2*t10057
      relu1_0_d_def__[ramp(t10056*8, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t10056*8, 1, 8) aligned(8, 0)] + select(x8(1.000000f) < t9718, ((schedule_features[t9713 + x8(((t10057 - schedule_features.min.2)*schedule_features.stride.2) - t11581)]*f0_0_d_def__[ramp(((relu1_0_d_def__.s28.w.wi + t11597)*f0_0_d_def__.n.extent_realized) + t11610, 1, 8)])*((schedule_features[t9713 + x8(t10058 + t11612)]/max(schedule_features[t9713 + x8(t10058 + t11613)], x8(1.000000f)))*t9718))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s28.n.ni.new_max.s = batch_size - t11610
      let t11622 = max(relu1_0_d_def__.s28.w.wi + t11596, 0)*schedule_features.stride.2
      let t11615 = max(min(relu1_0_d_def__.s28.n.ni.new_max.s, 8), 0)
      let t11617 = (t11610 + t11611) + t11622
      let t11616 = ((((((t11614*2) + relu1_0_d_def__.s28.w.wi)*relu1_0_d_def__.n.extent_realized)*2) + relu1_0_d_def__.n.extent_realized)*16) + t11610
      let t11619 = ((relu1_0_d_def__.s28.w.wi + t11597)*f0_0_d_def__.n.extent_realized) + t11610
      let t11621 = t11610 + t11613
      let t11620 = t11610 + t11612
      for (relu1_0_d_def__.s28.n.ni, 0, t11615) {
       let t9721 = relu1_0_d_def__.s28.n.ni + t11616
       let t9724 = schedule_features[relu1_0_d_def__.s28.n.ni + t11617]
       relu1_0_d_def__[t9721] = relu1_0_d_def__[t9721] + select(1.000000f < t9724, ((schedule_features[(t11603 + t11622) + relu1_0_d_def__.s28.n.ni]*f0_0_d_def__[relu1_0_d_def__.s28.n.ni + t11619])*((schedule_features[(t11620 + t11622) + relu1_0_d_def__.s28.n.ni]/max(schedule_features[(t11621 + t11622) + relu1_0_d_def__.s28.n.ni], 1.000000f))*t9724))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s28.n.ni.new_max$1.s = batch_size - t11610
      let t11629 = max(relu1_0_d_def__.s28.w.wi + t11596, 0)*schedule_features.stride.2
      let t11626 = (((((t11614*2) + relu1_0_d_def__.s28.w.wi)*relu1_0_d_def__.n.extent_realized)*2) + relu1_0_d_def__.n.extent_realized)*16
      let t11628 = (relu1_0_d_def__.s28.w.wi + t11597)*f0_0_d_def__.n.extent_realized
      let t11624 = max(min(batch_size - t11610, 8), 0) + t11610
      let t11623 = max(min(relu1_0_d_def__.s28.n.ni.new_max$1.s, 8), 0) + max(min(t11610 - batch_size, 0), -8)
      let t11625 = t11606 + t11629
      for (relu1_0_d_def__.s28.n.ni.rebased, 0, t11623) {
       let t9726 = relu1_0_d_def__.s28.n.ni.rebased + t11624
       let t9730 = schedule_features[t11625 + -1]
       let t10060 = t11626 + t9726
       relu1_0_d_def__[t10060] = relu1_0_d_def__[t10060] + select(1.000000f < t9730, ((schedule_features[(t11607 + t11629) + -1]*f0_0_d_def__[t11628 + t9726])*((schedule_features[(t11608 + t11629) + -1]/max(schedule_features[(t11609 + t11629) + -1], 1.000000f))*t9730))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11643 = schedule_features.stride.1*9
   let t11644 = schedule_features.stride.1*10
   let t11645 = schedule_features.stride.1*17
   let t11646 = schedule_features.stride.1*25
   let t11632 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11630 = (batch_size + 7)/8
   let t11633 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t11636 = float32(num_cores)
   parallel (relu1_0_d_def__.s29.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s29.n.ni.base.s = relu1_0_d_def__.s29.n.n.n % t11630
    let relu1_0_d_def__.s29.w.wi.base.s = relu1_0_d_def__.s29.n.n.n/t11630
    let relu1_0_d_def__.s29.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s29.w.wi.base.s*2)
    let t11668 = relu1_0_d_def__.n.extent_realized*3
    let t11669 = relu1_0_d_def__.s29.n.ni.base.s*8
    let t11670 = t11643 - t11633
    let t11671 = t11644 - t11633
    let t11672 = t11645 - t11633
    let t11673 = t11646 - t11633
    let t11648 = (t11669 + 8) <= batch_size
    let t11647 = max(min(relu1_0_d_def__.s29.w.wi.epilogue.s, 2), 0)
    let t11650 = (relu1_0_d_def__.s29.w.wi.base.s - t11632)*2
    let t11657 = (relu1_0_d_def__.s29.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11652 = relu1_0_d_def__.s29.w.wi.base.s*2
    let t11667 = (batch_size + t11646) - t11633
    let t11666 = (batch_size + t11645) - t11633
    let t11665 = (batch_size + t11644) - t11633
    let t11664 = (batch_size + t11643) - t11633
    for (relu1_0_d_def__.s29.w.wi, 0, t11647) {
     if (t11648) {
      let t9732 = (((relu1_0_d_def__.s29.w.wi + t11650)*relu1_0_d_def__.n.extent_realized)*32) + (t11668 + t11669)
      let t9733 = min(ramp(t11669, 1, 8), x8(batch_size + -1))
      let t9736 = max(schedule_features[t9733 + x8((max(relu1_0_d_def__.s29.w.wi + t11652, 0)*schedule_features.stride.2) + t11670)]*schedule_features[t9733 + x8((max(relu1_0_d_def__.s29.w.wi + t11652, 0)*schedule_features.stride.2) + t11671)], x8(1.000000f))/x8(t11636)
      let t10063 = max(relu1_0_d_def__.s29.w.wi + t11652, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9732, 1, 8)] = relu1_0_d_def__[ramp(t9732, 1, 8)] + select(schedule_features[t9733 + x8(t10063 + t11672)] == x8(0.000000f), x8(0.000000f), (schedule_features[t9733 + x8(t10063 + t11673)]*(f0_0_d_def__[ramp(((relu1_0_d_def__.s29.w.wi + t11657)*f0_0_d_def__.n.extent_realized) + t11669, 1, 8)]*((float32x8)ceil_f32(t9736)/max(t9736, x8(1.000000f)))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s29.n.ni.new_max.s = batch_size - t11669
      let t11674 = max(min(relu1_0_d_def__.s29.n.ni.new_max.s, 8), 0)
      let t11676 = max(relu1_0_d_def__.s29.w.wi + t11652, 0)*schedule_features.stride.2
      let t11675 = (((relu1_0_d_def__.s29.w.wi + t11650)*relu1_0_d_def__.n.extent_realized)*32) + (t11668 + t11669)
      let t11681 = ((relu1_0_d_def__.s29.w.wi + t11657)*f0_0_d_def__.n.extent_realized) + t11669
      let t11680 = t11669 + t11673
      let t11679 = t11669 + t11672
      let t11678 = t11669 + t11671
      let t11677 = t11669 + t11670
      for (relu1_0_d_def__.s29.n.ni, 0, t11674) {
       let t9739 = relu1_0_d_def__.s29.n.ni + t11675
       let t9742 = max(schedule_features[(t11676 + t11677) + relu1_0_d_def__.s29.n.ni]*schedule_features[(t11676 + t11678) + relu1_0_d_def__.s29.n.ni], 1.000000f)/t11636
       relu1_0_d_def__[t9739] = relu1_0_d_def__[t9739] + select(schedule_features[(t11676 + t11679) + relu1_0_d_def__.s29.n.ni] == 0.000000f, 0.000000f, (schedule_features[(t11676 + t11680) + relu1_0_d_def__.s29.n.ni]*(f0_0_d_def__[relu1_0_d_def__.s29.n.ni + t11681]*((float32)ceil_f32(t9742)/max(t9742, 1.000000f))))*0.000000f)
      }
      let relu1_0_d_def__.s29.n.ni.new_max$1.s = batch_size - t11669
      let t11685 = max(relu1_0_d_def__.s29.w.wi + t11652, 0)*schedule_features.stride.2
      let t11686 = (relu1_0_d_def__.s29.w.wi + t11657)*f0_0_d_def__.n.extent_realized
      let t11683 = max(min(batch_size - t11669, 8), 0) + t11669
      let t11682 = max(min(relu1_0_d_def__.s29.n.ni.new_max$1.s, 8), 0) + max(min(t11669 - batch_size, 0), -8)
      let t11684 = (((relu1_0_d_def__.s29.w.wi + t11650)*relu1_0_d_def__.n.extent_realized)*32) + t11668
      for (relu1_0_d_def__.s29.n.ni.rebased, 0, t11682) {
       let t9744 = relu1_0_d_def__.s29.n.ni.rebased + t11683
       let t9748 = max(schedule_features[(t11664 + t11685) + -1]*schedule_features[(t11665 + t11685) + -1], 1.000000f)/t11636
       let t10067 = t11684 + t9744
       relu1_0_d_def__[t10067] = relu1_0_d_def__[t10067] + select(schedule_features[(t11666 + t11685) + -1] == 0.000000f, 0.000000f, (schedule_features[(t11667 + t11685) + -1]*(f0_0_d_def__[t11686 + t9744]*((float32)ceil_f32(t9748)/max(t9748, 1.000000f))))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11701 = schedule_features.stride.1*9
   let t11702 = schedule_features.stride.1*10
   let t11703 = schedule_features.stride.1*17
   let t11704 = schedule_features.stride.1*22
   let t11705 = schedule_features.stride.1*24
   let t11688 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11687 = (batch_size + 7)/8
   let t11689 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t11692 = float32(num_cores)
   parallel (relu1_0_d_def__.s30.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s30.n.ni.base.s = relu1_0_d_def__.s30.n.n.n % t11687
    let relu1_0_d_def__.s30.w.wi.base.s = relu1_0_d_def__.s30.n.n.n/t11687
    let relu1_0_d_def__.s30.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s30.w.wi.base.s*2)
    let t11730 = relu1_0_d_def__.s30.n.ni.base.s*8
    let t11731 = t11701 - t11689
    let t11732 = t11702 - t11689
    let t11733 = t11703 - t11689
    let t11734 = t11704 - t11689
    let t11735 = t11705 - t11689
    let t11736 = relu1_0_d_def__.s30.w.wi.base.s - t11688
    let t11707 = (t11730 + 8) <= batch_size
    let t11706 = max(min(relu1_0_d_def__.s30.w.wi.epilogue.s, 2), 0)
    let t11715 = (relu1_0_d_def__.s30.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11711 = relu1_0_d_def__.s30.w.wi.base.s*2
    let t11729 = (batch_size + t11705) - t11689
    let t11728 = (batch_size + t11704) - t11689
    let t11727 = (batch_size + t11703) - t11689
    let t11726 = (batch_size + t11702) - t11689
    let t11725 = (batch_size + t11701) - t11689
    let t11708 = (relu1_0_d_def__.s30.n.ni.base.s*4) + relu1_0_d_def__.n.extent_realized
    for (relu1_0_d_def__.s30.w.wi, 0, t11706) {
     if (t11707) {
      let t9750 = ((((t11736*2) + relu1_0_d_def__.s30.w.wi)*relu1_0_d_def__.n.extent_realized)*16) + t11708
      let t9751 = min(ramp(t11730, 1, 8), x8(batch_size + -1))
      let t9754 = max(schedule_features[t9751 + x8((max(relu1_0_d_def__.s30.w.wi + t11711, 0)*schedule_features.stride.2) + t11731)]*schedule_features[t9751 + x8((max(relu1_0_d_def__.s30.w.wi + t11711, 0)*schedule_features.stride.2) + t11732)], x8(1.000000f))/x8(t11692)
      let t10070 = max(relu1_0_d_def__.s30.w.wi + t11711, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9750*2, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t9750*2, 1, 8) aligned(2, 0)] + select(schedule_features[t9751 + x8(t10070 + t11733)] == x8(0.000000f), x8(0.000000f), ((f0_0_d_def__[ramp(((relu1_0_d_def__.s30.w.wi + t11715)*f0_0_d_def__.n.extent_realized) + t11730, 1, 8)]*((float32x8)ceil_f32(t9754)/max(t9754, x8(1.000000f))))*(schedule_features[t9751 + x8(t10070 + t11734)]*schedule_features[t9751 + x8(t10070 + t11735)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s30.n.ni.new_max.s = batch_size - t11730
      let t11737 = max(min(relu1_0_d_def__.s30.n.ni.new_max.s, 8), 0)
      let t11739 = max(relu1_0_d_def__.s30.w.wi + t11711, 0)*schedule_features.stride.2
      let t11738 = ((((((t11736*2) + relu1_0_d_def__.s30.w.wi)*relu1_0_d_def__.n.extent_realized)*16) + relu1_0_d_def__.n.extent_realized)*2) + t11730
      let t11743 = ((relu1_0_d_def__.s30.w.wi + t11715)*f0_0_d_def__.n.extent_realized) + t11730
      let t11745 = t11730 + t11735
      let t11744 = t11730 + t11734
      let t11742 = t11730 + t11733
      let t11741 = t11730 + t11732
      let t11740 = t11730 + t11731
      for (relu1_0_d_def__.s30.n.ni, 0, t11737) {
       let t9757 = relu1_0_d_def__.s30.n.ni + t11738
       let t9760 = max(schedule_features[(t11739 + t11740) + relu1_0_d_def__.s30.n.ni]*schedule_features[(t11739 + t11741) + relu1_0_d_def__.s30.n.ni], 1.000000f)/t11692
       relu1_0_d_def__[t9757] = relu1_0_d_def__[t9757] + select(schedule_features[(t11739 + t11742) + relu1_0_d_def__.s30.n.ni] == 0.000000f, 0.000000f, ((f0_0_d_def__[relu1_0_d_def__.s30.n.ni + t11743]*((float32)ceil_f32(t9760)/max(t9760, 1.000000f)))*(schedule_features[(t11739 + t11744) + relu1_0_d_def__.s30.n.ni]*schedule_features[(t11739 + t11745) + relu1_0_d_def__.s30.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s30.n.ni.new_max$1.s = batch_size - t11730
      let t11748 = max(relu1_0_d_def__.s30.w.wi + t11711, 0)*schedule_features.stride.2
      let t11749 = (((((t11736*2) + relu1_0_d_def__.s30.w.wi)*relu1_0_d_def__.n.extent_realized)*16) + relu1_0_d_def__.n.extent_realized)*2
      let t11750 = (relu1_0_d_def__.s30.w.wi + t11715)*f0_0_d_def__.n.extent_realized
      let t11747 = max(min(batch_size - t11730, 8), 0) + t11730
      let t11746 = max(min(relu1_0_d_def__.s30.n.ni.new_max$1.s, 8), 0) + max(min(t11730 - batch_size, 0), -8)
      for (relu1_0_d_def__.s30.n.ni.rebased, 0, t11746) {
       let t9762 = relu1_0_d_def__.s30.n.ni.rebased + t11747
       let t9766 = max(schedule_features[(t11725 + t11748) + -1]*schedule_features[(t11726 + t11748) + -1], 1.000000f)/t11692
       let t10074 = t11749 + t9762
       relu1_0_d_def__[t10074] = relu1_0_d_def__[t10074] + select(schedule_features[(t11727 + t11748) + -1] == 0.000000f, 0.000000f, ((f0_0_d_def__[t11750 + t9762]*((float32)ceil_f32(t9766)/max(t9766, 1.000000f)))*(schedule_features[(t11728 + t11748) + -1]*schedule_features[(t11729 + t11748) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11763 = schedule_features.stride.1*9
   let t11764 = schedule_features.stride.1*10
   let t11765 = schedule_features.stride.1*17
   let t11766 = schedule_features.stride.1*25
   let t11752 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11751 = (batch_size + 7)/8
   let t11753 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t11756 = float32(num_cores)
   parallel (relu1_0_d_def__.s31.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s31.n.ni.base.s = relu1_0_d_def__.s31.n.n.n % t11751
    let relu1_0_d_def__.s31.w.wi.base.s = relu1_0_d_def__.s31.n.n.n/t11751
    let relu1_0_d_def__.s31.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s31.w.wi.base.s*2)
    let t11788 = relu1_0_d_def__.s31.n.ni.base.s*8
    let t11789 = t11763 - t11753
    let t11790 = t11764 - t11753
    let t11791 = t11765 - t11753
    let t11792 = t11766 - t11753
    let t11793 = relu1_0_d_def__.s31.w.wi.base.s - t11752
    let t11768 = (t11788 + 8) <= batch_size
    let t11767 = max(min(relu1_0_d_def__.s31.w.wi.epilogue.s, 2), 0)
    let t11777 = (relu1_0_d_def__.s31.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11772 = relu1_0_d_def__.s31.w.wi.base.s*2
    let t11787 = (batch_size + t11766) - t11753
    let t11786 = (batch_size + t11765) - t11753
    let t11785 = (batch_size + t11764) - t11753
    let t11784 = (batch_size + t11763) - t11753
    for (relu1_0_d_def__.s31.w.wi, 0, t11767) {
     if (t11768) {
      let t9768 = ((((t11793*2) + relu1_0_d_def__.s31.w.wi)*relu1_0_d_def__.n.extent_realized)*32) + (relu1_0_d_def__.n.extent_realized + t11788)
      let t9769 = min(ramp(t11788, 1, 8), x8(batch_size + -1))
      let t9772 = max(schedule_features[t9769 + x8((max(relu1_0_d_def__.s31.w.wi + t11772, 0)*schedule_features.stride.2) + t11789)]*schedule_features[t9769 + x8((max(relu1_0_d_def__.s31.w.wi + t11772, 0)*schedule_features.stride.2) + t11790)], x8(1.000000f))/x8(t11756)
      let t10077 = max(relu1_0_d_def__.s31.w.wi + t11772, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t9768, 1, 8)] = relu1_0_d_def__[ramp(t9768, 1, 8)] + select(schedule_features[t9769 + x8(t10077 + t11791)] == x8(0.000000f), (schedule_features[t9769 + x8(t10077 + t11792)]*(f0_0_d_def__[ramp(((relu1_0_d_def__.s31.w.wi + t11777)*f0_0_d_def__.n.extent_realized) + t11788, 1, 8)]*((float32x8)ceil_f32(t9772)/max(t9772, x8(1.000000f)))))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s31.n.ni.new_max.s = batch_size - t11788
      let t11794 = max(min(relu1_0_d_def__.s31.n.ni.new_max.s, 8), 0)
      let t11796 = max(relu1_0_d_def__.s31.w.wi + t11772, 0)*schedule_features.stride.2
      let t11795 = ((((t11793*2) + relu1_0_d_def__.s31.w.wi)*relu1_0_d_def__.n.extent_realized)*32) + (relu1_0_d_def__.n.extent_realized + t11788)
      let t11801 = ((relu1_0_d_def__.s31.w.wi + t11777)*f0_0_d_def__.n.extent_realized) + t11788
      let t11800 = t11788 + t11792
      let t11799 = t11788 + t11791
      let t11798 = t11788 + t11790
      let t11797 = t11788 + t11789
      for (relu1_0_d_def__.s31.n.ni, 0, t11794) {
       let t9775 = relu1_0_d_def__.s31.n.ni + t11795
       let t9778 = max(schedule_features[(t11796 + t11797) + relu1_0_d_def__.s31.n.ni]*schedule_features[(t11796 + t11798) + relu1_0_d_def__.s31.n.ni], 1.000000f)/t11756
       relu1_0_d_def__[t9775] = relu1_0_d_def__[t9775] + select(schedule_features[(t11796 + t11799) + relu1_0_d_def__.s31.n.ni] == 0.000000f, (schedule_features[(t11796 + t11800) + relu1_0_d_def__.s31.n.ni]*(f0_0_d_def__[relu1_0_d_def__.s31.n.ni + t11801]*((float32)ceil_f32(t9778)/max(t9778, 1.000000f))))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s31.n.ni.new_max$1.s = batch_size - t11788
      let t11804 = max(relu1_0_d_def__.s31.w.wi + t11772, 0)*schedule_features.stride.2
      let t11806 = (relu1_0_d_def__.s31.w.wi + t11777)*f0_0_d_def__.n.extent_realized
      let t11803 = max(min(batch_size - t11788, 8), 0) + t11788
      let t11802 = max(min(relu1_0_d_def__.s31.n.ni.new_max$1.s, 8), 0) + max(min(t11788 - batch_size, 0), -8)
      let t11805 = ((((t11793*2) + relu1_0_d_def__.s31.w.wi)*relu1_0_d_def__.n.extent_realized)*32) + relu1_0_d_def__.n.extent_realized
      for (relu1_0_d_def__.s31.n.ni.rebased, 0, t11802) {
       let t9780 = relu1_0_d_def__.s31.n.ni.rebased + t11803
       let t9784 = max(schedule_features[(t11784 + t11804) + -1]*schedule_features[(t11785 + t11804) + -1], 1.000000f)/t11756
       let t10081 = t11805 + t9780
       relu1_0_d_def__[t10081] = relu1_0_d_def__[t10081] + select(schedule_features[(t11786 + t11804) + -1] == 0.000000f, (schedule_features[(t11787 + t11804) + -1]*(f0_0_d_def__[t11806 + t9780]*((float32)ceil_f32(t9784)/max(t9784, 1.000000f))))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f0_0_d_def__ {
   let t11821 = schedule_features.stride.1*9
   let t11822 = schedule_features.stride.1*10
   let t11823 = schedule_features.stride.1*17
   let t11824 = schedule_features.stride.1*22
   let t11825 = schedule_features.stride.1*24
   let t11808 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t11807 = (batch_size + 7)/8
   let t11809 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t11812 = float32(num_cores)
   parallel (relu1_0_d_def__.s32.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s32.n.ni.base.s = relu1_0_d_def__.s32.n.n.n % t11807
    let relu1_0_d_def__.s32.w.wi.base.s = relu1_0_d_def__.s32.n.n.n/t11807
    let relu1_0_d_def__.s32.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s32.w.wi.base.s*2)
    let t11849 = relu1_0_d_def__.s32.n.ni.base.s*8
    let t11850 = t11821 - t11809
    let t11851 = t11822 - t11809
    let t11852 = t11823 - t11809
    let t11853 = t11824 - t11809
    let t11854 = t11825 - t11809
    let t11855 = relu1_0_d_def__.s32.w.wi.base.s - t11808
    let t11827 = (t11849 + 8) <= batch_size
    let t11826 = max(min(relu1_0_d_def__.s32.w.wi.epilogue.s, 2), 0)
    let t11834 = (relu1_0_d_def__.s32.w.wi.base.s - f0_0_d_def__.w.min_realized.s)*2
    let t11830 = relu1_0_d_def__.s32.w.wi.base.s*2
    let t11848 = (batch_size + t11825) - t11809
    let t11847 = (batch_size + t11824) - t11809
    let t11846 = (batch_size + t11823) - t11809
    let t11845 = (batch_size + t11822) - t11809
    let t11844 = (batch_size + t11821) - t11809
    for (relu1_0_d_def__.s32.w.wi, 0, t11826) {
     if (t11827) {
      let t9787 = min(ramp(t11849, 1, 8), x8(batch_size + -1))
      let t9790 = max(schedule_features[t9787 + x8((max(relu1_0_d_def__.s32.w.wi + t11830, 0)*schedule_features.stride.2) + t11850)]*schedule_features[t9787 + x8((max(relu1_0_d_def__.s32.w.wi + t11830, 0)*schedule_features.stride.2) + t11851)], x8(1.000000f))/x8(t11812)
      let t10084 = ((((t11855*2) + relu1_0_d_def__.s32.w.wi)*relu1_0_d_def__.n.extent_realized)*4) + relu1_0_d_def__.s32.n.ni.base.s
      let t10085 = max(relu1_0_d_def__.s32.w.wi + t11830, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t10084*8, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t10084*8, 1, 8) aligned(8, 0)] + select(schedule_features[t9787 + x8(t10085 + t11852)] == x8(0.000000f), ((f0_0_d_def__[ramp(((relu1_0_d_def__.s32.w.wi + t11834)*f0_0_d_def__.n.extent_realized) + t11849, 1, 8)]*((float32x8)ceil_f32(t9790)/max(t9790, x8(1.000000f))))*(schedule_features[t9787 + x8(t10085 + t11853)]*schedule_features[t9787 + x8(t10085 + t11854)]))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s32.n.ni.new_max.s = batch_size - t11849
      let t11856 = max(min(relu1_0_d_def__.s32.n.ni.new_max.s, 8), 0)
      let t11858 = max(relu1_0_d_def__.s32.w.wi + t11830, 0)*schedule_features.stride.2
      let t11857 = ((((t11855*2) + relu1_0_d_def__.s32.w.wi)*relu1_0_d_def__.n.extent_realized)*32) + t11849
      let t11862 = ((relu1_0_d_def__.s32.w.wi + t11834)*f0_0_d_def__.n.extent_realized) + t11849
      let t11864 = t11849 + t11854
      let t11863 = t11849 + t11853
      let t11861 = t11849 + t11852
      let t11860 = t11849 + t11851
      let t11859 = t11849 + t11850
      for (relu1_0_d_def__.s32.n.ni, 0, t11856) {
       let t9793 = relu1_0_d_def__.s32.n.ni + t11857
       let t9796 = max(schedule_features[(t11858 + t11859) + relu1_0_d_def__.s32.n.ni]*schedule_features[(t11858 + t11860) + relu1_0_d_def__.s32.n.ni], 1.000000f)/t11812
       relu1_0_d_def__[t9793] = relu1_0_d_def__[t9793] + select(schedule_features[(t11858 + t11861) + relu1_0_d_def__.s32.n.ni] == 0.000000f, ((f0_0_d_def__[relu1_0_d_def__.s32.n.ni + t11862]*((float32)ceil_f32(t9796)/max(t9796, 1.000000f)))*(schedule_features[(t11858 + t11863) + relu1_0_d_def__.s32.n.ni]*schedule_features[(t11858 + t11864) + relu1_0_d_def__.s32.n.ni]))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s32.n.ni.new_max$1.s = batch_size - t11849
      let t11867 = max(relu1_0_d_def__.s32.w.wi + t11830, 0)*schedule_features.stride.2
      let t11868 = (((t11855*2) + relu1_0_d_def__.s32.w.wi)*relu1_0_d_def__.n.extent_realized)*32
      let t11869 = (relu1_0_d_def__.s32.w.wi + t11834)*f0_0_d_def__.n.extent_realized
      let t11866 = max(min(batch_size - t11849, 8), 0) + t11849
      let t11865 = max(min(relu1_0_d_def__.s32.n.ni.new_max$1.s, 8), 0) + max(min(t11849 - batch_size, 0), -8)
      for (relu1_0_d_def__.s32.n.ni.rebased, 0, t11865) {
       let t9798 = relu1_0_d_def__.s32.n.ni.rebased + t11866
       let t9802 = max(schedule_features[(t11844 + t11867) + -1]*schedule_features[(t11845 + t11867) + -1], 1.000000f)/t11812
       let t10089 = t11868 + t9798
       relu1_0_d_def__[t10089] = relu1_0_d_def__[t10089] + select(schedule_features[(t11846 + t11867) + -1] == 0.000000f, ((f0_0_d_def__[t11869 + t9798]*((float32)ceil_f32(t9802)/max(t9802, 1.000000f)))*(schedule_features[(t11847 + t11867) + -1]*schedule_features[(t11848 + t11867) + -1]))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  free f0_0_d_def__
 }
 allocate sum_1_d_def__[float32 * relu1_0_d_def__.n.extent_realized]
 produce sum_1_d_def__ {
  consume sum$1_1_d_def__ {
   let t11870 = max((batch_size + 7)/8, 0)
   let t11871 = max(batch_size/8, 0)
   parallel (sum_1_d_def__.s0.n.n, 0, t11870) {
    if (sum_1_d_def__.s0.n.n < t11871) {
     sum_1_d_def__[ramp(sum_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)] = select(x8(batch_size) < ramp((sum_1_d_def__.s0.n.n*8) + 1, 1, 8), x8(0.000000f), x8(sum$1_1_d_def__[0]))*x8(0.000010f)
    } else {
     let sum_1_d_def__.s0.n.ni.new_max.s = batch_size - (sum_1_d_def__.s0.n.n*8)
     let t11872 = max(min(sum_1_d_def__.s0.n.ni.new_max.s, 8), 0)
     let t11873 = sum_1_d_def__.s0.n.n*8
     for (sum_1_d_def__.s0.n.ni, 0, t11872) {
      sum_1_d_def__[sum_1_d_def__.s0.n.ni + t11873] = sum$1_1_d_def__[0]*0.000010f
     }
    }
   }
  }
 }
 free sum$1_1_d_def__
 allocate conv1_stage2_1_d_def__[float32 * 32 * num_stages * batch_size]
 produce conv1_stage2_1_d_def__ {
  consume sum_1_d_def__ {
   consume relu1_0_d_def__ {
    consume conv1_stage2 {
     let t11880 = batch_size/8
     let t11881 = max(t11880, 0)
     let t11878 = max(((batch_size + 7)/8) - t11881, 0)
     let t11874 = max(num_stages, 0)
     let t11876 = min(prediction_output.min.0, 0)
     let t11877 = min(relu1_0_d_def__.w.min_realized.s, 0)*2
     parallel (conv1_stage2_1_d_def__.s0.c.c, 0, 16) {
      let t11882 = conv1_stage2_1_d_def__.s0.c.c*2
      for (conv1_stage2_1_d_def__.s0.w, 0, t11874) {
       let t11890 = (conv1_stage2.n.extent_realized*conv1_stage2_1_d_def__.s0.w)*32
       let t11891 = (min(num_stages + -1, conv1_stage2_1_d_def__.s0.w)*conv1_stage2.n.extent_realized)*32
       let t11884 = (conv1_stage2_1_d_def__.s0.w + 1) <= num_stages
       let t11886 = ((conv1_stage2_1_d_def__.s0.w - t11877)*relu1_0_d_def__.n.extent_realized)*32
       let t11887 = (batch_size*conv1_stage2_1_d_def__.s0.w)*32
       for (conv1_stage2_1_d_def__.s0.c.ci, 0, 2) {
        let t11893 = t11891 - t11876
        let t11894 = t11890 - t11876
        let t11892 = conv1_stage2_1_d_def__.s0.c.ci + t11882
        for (conv1_stage2_1_d_def__.s0.n.n, 0, t11881) {
         let t10093 = conv1_stage2.n.extent_realized*t11892
         conv1_stage2_1_d_def__[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + ((batch_size*t11892) + t11887), 1, 8)] = select((conv1_stage2[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + (t10093 + t11893), 1, 8)] <= x8(0.000000f)) && x8(t11884), x8(0.000000f) - sum_1_d_def__[ramp(conv1_stage2_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)], x8(0.000000f)) + select(conv1_stage2[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + (t10093 + t11894), 1, 8)] < x8(0.000000f), x8(0.000000f), relu1_0_d_def__[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + ((relu1_0_d_def__.n.extent_realized*t11892) + t11886), 1, 8)])
        }
        let t11895 = conv1_stage2_1_d_def__.s0.c.ci + t11882
        for (conv1_stage2_1_d_def__.s0.n.n.rebased, 0, t11878) {
         if ((((conv1_stage2_1_d_def__.s0.n.n.rebased + t11881)*8) + 8) <= batch_size) {
          let t9806 = min(ramp((conv1_stage2_1_d_def__.s0.n.n.rebased + t11880)*8, 1, 8), x8(batch_size + -1))
          let t10096 = conv1_stage2.n.extent_realized*t11895
          let t10097 = conv1_stage2_1_d_def__.s0.n.n.rebased + t11880
          conv1_stage2_1_d_def__[ramp((t10097*8) + ((batch_size*t11895) + t11887), 1, 8)] = select((conv1_stage2[t9806 + x8((t11891 - t11876) + t10096)] <= x8(0.000000f)) && x8(t11884), x8(0.000000f) - sum_1_d_def__[ramp(t10097*8, 1, 8) aligned(8, 0)], x8(0.000000f)) + select(conv1_stage2[t9806 + x8((t11890 - t11876) + t10096)] < x8(0.000000f), x8(0.000000f), relu1_0_d_def__[ramp((t10097*8) + ((relu1_0_d_def__.n.extent_realized*t11895) + t11886), 1, 8)])
         } else {
          let conv1_stage2_1_d_def__.s0.n.ni.new_max.s = batch_size - ((conv1_stage2_1_d_def__.s0.n.n.rebased + t11881)*8)
          let t11904 = conv1_stage2_1_d_def__.s0.n.n.rebased + t11881
          let t11898 = min(conv1_stage2_1_d_def__.s0.n.ni.new_max.s, 8)
          let t11900 = conv1_stage2.n.extent_realized*t11895
          let t11899 = (t11904*8) - t11876
          let t11902 = (relu1_0_d_def__.n.extent_realized*t11895) + t11886
          let t11903 = (batch_size*t11895) + t11887
          for (conv1_stage2_1_d_def__.s0.n.ni, 0, t11898) {
           let t9811 = conv1_stage2_1_d_def__.s0.n.ni + t11899
           conv1_stage2_1_d_def__[((t11904*8) + t11903) + conv1_stage2_1_d_def__.s0.n.ni] = select((conv1_stage2[(t11891 + t11900) + t9811] <= 0.000000f) && t11884, 0.000000f - sum_1_d_def__[(t11904*8) + conv1_stage2_1_d_def__.s0.n.ni], 0.000000f) + select(conv1_stage2[(t11890 + t11900) + t9811] < 0.000000f, 0.000000f, relu1_0_d_def__[((t11904*8) + t11902) + conv1_stage2_1_d_def__.s0.n.ni])
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 free relu1_0_d_def__
 free sum_1_d_def__
 allocate conv1_stage1_1_d_def__[float32 * 32 * num_stages]
 produce conv1_stage1_1_d_def__ {
  let t11907 = max(num_stages/8, 0)
  let t11906 = max(((num_stages + 7)/8) - t11907, 0)
  parallel (conv1_stage1_1_d_def__.s0.c, 0, 32) {
   let t11908 = conv1_stage1_1_d_def__.s0.c*num_stages
   for (conv1_stage1_1_d_def__.s0.w.w, 0, t11907) {
    conv1_stage1_1_d_def__[ramp((conv1_stage1_1_d_def__.s0.w.w*8) + t11908, 1, 8)] = x8(0.000000f)
   }
   let t11909 = conv1_stage1_1_d_def__.s0.c*num_stages
   for (conv1_stage1_1_d_def__.s0.w.w.rebased, 0, t11906) {
    let conv1_stage1_1_d_def__.s0.w.wi.new_max.s = num_stages - ((conv1_stage1_1_d_def__.s0.w.w.rebased + t11907)*8)
    let t11910 = min(conv1_stage1_1_d_def__.s0.w.wi.new_max.s, 8)
    let t11911 = ((conv1_stage1_1_d_def__.s0.w.w.rebased + t11907)*8) + t11909
    for (conv1_stage1_1_d_def__.s0.w.wi, 0, t11910) {
     conv1_stage1_1_d_def__[conv1_stage1_1_d_def__.s0.w.wi + t11911] = 0.000000f
    }
   }
  }
  consume conv1_stage2_1_d_def__ {
   let t11918 = (batch_size + 1)/2
   let t11919 = max(batch_size/2, 0)
   let t11920 = max(num_stages/8, 0)
   let t11917 = max(t11918, 0)
   let t11916 = max(((num_stages + 7)/8) - t11920, 0)
   let t11915 = max(t11918 - t11919, 0)
   parallel (conv1_stage1_1_d_def__.s1.c, 0, 32) {
    let t11923 = conv1_stage1_1_d_def__.s1.c*num_stages
    let t11921 = batch_size*conv1_stage1_1_d_def__.s1.c
    for (conv1_stage1_1_d_def__.s1.w.w, 0, t11920) {
     let t11928 = conv1_stage1_1_d_def__.s1.w.w*8
     let t11924 = t11928 < num_stages
     let t11926 = batch_size*32
     let t11925 = ((batch_size*conv1_stage1_1_d_def__.s1.w.w)*256) + t11921
     let t11927 = t11923 + t11928
     for (conv1_stage1_1_d_def__.s1.r982$x.r982$x, 0, t11919) {
      allocate conv1_stage2_0_d_def__$1[float32 * 8] in Stack
      let t11929 = (conv1_stage1_1_d_def__.s1.r982$x.r982$x*2) + t11925
      for (conv1_stage1_1_d_def__.s1.r982$x.r1029$xi, 0, 2) {
       if (t11924) {
        produce conv1_stage2_0_d_def__$1 {
         conv1_stage2_0_d_def__$1[ramp(0, 1, 8)] = conv1_stage2_1_d_def__[ramp(conv1_stage1_1_d_def__.s1.r982$x.r1029$xi + t11929, t11926, 8)]
        }
       }
       consume conv1_stage2_0_d_def__$1 {
        conv1_stage1_1_d_def__[ramp(t11927, 1, 8)] = conv1_stage1_1_d_def__[ramp(t11927, 1, 8)] + conv1_stage2_0_d_def__$1[ramp(0, 1, 8)]
       }
      }
      free conv1_stage2_0_d_def__$1
     }
     let t11934 = conv1_stage1_1_d_def__.s1.w.w*8
     let t11930 = t11934 < num_stages
     let t11931 = ((batch_size*conv1_stage1_1_d_def__.s1.w.w)*256) + t11921
     let t11933 = t11923 + t11934
     for (conv1_stage1_1_d_def__.s1.r982$x.r982$x.rebased, 0, t11915) {
      allocate conv1_stage2_0_d_def__$1[float32 * 8] in Stack
      let conv1_stage1_1_d_def__.s1.r982$x.r1029$xi.new_max.s = batch_size - ((conv1_stage1_1_d_def__.s1.r982$x.r982$x.rebased + t11919)*2)
      let t11935 = min(conv1_stage1_1_d_def__.s1.r982$x.r1029$xi.new_max.s, 2)
      let t11937 = batch_size*32
      let t11936 = ((conv1_stage1_1_d_def__.s1.r982$x.r982$x.rebased + t11919)*2) + t11931
      for (conv1_stage1_1_d_def__.s1.r982$x.r1029$xi, 0, t11935) {
       if (t11930) {
        produce conv1_stage2_0_d_def__$1 {
         conv1_stage2_0_d_def__$1[ramp(0, 1, 8)] = conv1_stage2_1_d_def__[ramp(conv1_stage1_1_d_def__.s1.r982$x.r1029$xi + t11936, t11937, 8)]
        }
       }
       consume conv1_stage2_0_d_def__$1 {
        conv1_stage1_1_d_def__[ramp(t11933, 1, 8)] = conv1_stage1_1_d_def__[ramp(t11933, 1, 8)] + conv1_stage2_0_d_def__$1[ramp(0, 1, 8)]
       }
      }
      free conv1_stage2_0_d_def__$1
     }
    }
    let t11939 = conv1_stage1_1_d_def__.s1.c*num_stages
    let t11938 = batch_size*conv1_stage1_1_d_def__.s1.c
    for (conv1_stage1_1_d_def__.s1.w.w.rebased, 0, t11916) {
     let t11943 = (conv1_stage1_1_d_def__.s1.w.w.rebased + t11920)*8
     let t11940 = num_stages - t11943
     let t11942 = t11939 + t11943
     for (conv1_stage1_1_d_def__.s1.r982$x.r982$x, 0, t11917) {
      allocate conv1_stage2_0_d_def__$1[float32 * 8] in Stack
      let conv1_stage1_1_d_def__.s1.r982_x.r1029_xi.new_max$1.s = batch_size - (conv1_stage1_1_d_def__.s1.r982$x.r982$x*2)
      let t11945 = min(t11940, 8)
      let t11944 = min(conv1_stage1_1_d_def__.s1.r982_x.r1029_xi.new_max$1.s, 2)
      let t11946 = (conv1_stage1_1_d_def__.s1.r982$x.r982$x*2) + t11938
      for (conv1_stage1_1_d_def__.s1.r982$x.r1029$xi, 0, t11944) {
       produce conv1_stage2_0_d_def__$1 {
        let t11947 = conv1_stage1_1_d_def__.s1.r982$x.r1029$xi + t11946
        for (conv1_stage2_0_d_def__$1.s0.w.wi, 0, t11945) {
         conv1_stage2_0_d_def__$1[conv1_stage2_0_d_def__$1.s0.w.wi] = conv1_stage2_1_d_def__[(((conv1_stage2_0_d_def__$1.s0.w.wi + t11943)*batch_size)*32) + t11947]
        }
       }
       consume conv1_stage2_0_d_def__$1 {
        for (conv1_stage1_1_d_def__.s1.w.wi, 0, t11945) {
         let t9816 = conv1_stage1_1_d_def__.s1.w.wi + t11942
         conv1_stage1_1_d_def__[t9816] = conv1_stage1_1_d_def__[t9816] + conv1_stage2_0_d_def__$1[conv1_stage1_1_d_def__.s1.w.wi]
        }
       }
      }
      free conv1_stage2_0_d_def__$1
     }
    }
   }
  }
 }
 allocate head1_conv_1_d_def__[float32 * 8 * num_stages]
 produce head1_conv_1_d_def__ {
  parallel (head1_conv_1_d_def__.s0.w, 0, num_stages) {
   head1_conv_1_d_def__[ramp(head1_conv_1_d_def__.s0.w*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
  }
  consume conv1_stage1_1_d_def__ {
   parallel (head1_conv_1_d_def__.s1.w, 0, num_stages) {
    for (head1_conv_1_d_def__.s1.r1137$x, 0, 32) {
     head1_conv_1_d_def__[ramp(head1_conv_1_d_def__.s1.w*8, 1, 8) aligned(8, 0)] = head1_conv_1_d_def__[ramp(head1_conv_1_d_def__.s1.w*8, 1, 8) aligned(8, 0)] + (filter1[ramp(head1_conv_1_d_def__.s1.r1137$x, filter1.stride.1, 8)]*x8(conv1_stage1_1_d_def__[(head1_conv_1_d_def__.s1.r1137$x*num_stages) + head1_conv_1_d_def__.s1.w]))
    }
   }
  }
 }
 produce updated_head1_filter {
  consume head1_conv_1_d_def__ {
   let t11955 = pipeline_features.min.2*pipeline_features.stride.2
   let t11949 = max(num_stages, 0)
   let t11954 = ((updated_head1_filter.stride.2*2) + updated_head1_filter.stride.3)*3
   let t11951 = updated_head1_filter.stride.3*3
   let t11952 = (((6 - pipeline_features.min.1)*pipeline_features.stride.1) - t11955) - pipeline_features.min.0
   let t11950 = ((pipeline_features.min.1*pipeline_features.stride.1) + t11955) + pipeline_features.min.0
   parallel (updated_head1_filter.s1.v235.v235.v235, 0, 80) {
    if (updated_head1_filter.s1.v235.v235.v235 < 60) {
     let t11959 = (updated_head1_filter.s1.v235.v235.v235 % 20)*2
     let t11957 = (updated_head1_filter.s1.v235.v235.v235/20)*2
     let t11956 = t11959 - t11950
     for (updated_head1_filter.s1.v236.v209i, 0, 2) {
      let t11963 = t11957 + updated_head1_filter.s1.v236.v209i
      let t11961 = head1_filter.stride.2*t11963
      let t11962 = (t11963*updated_head1_filter.stride.2) + t11951
      let t11960 = (pipeline_features.stride.1*t11963) + t11956
      for (updated_head1_filter.s1.v235.v208i, 0, 2) {
       allocate squashed_head1_filter_0_d_def__[float32 * 8] in Stack
       produce squashed_head1_filter_0_d_def__ {
        squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
        let t11964 = t11960 + updated_head1_filter.s1.v235.v208i
        for (squashed_head1_filter_0_d_def__.s1.r1260$x, 0, t11949) {
         squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] + (head1_conv_1_d_def__[ramp(squashed_head1_filter_0_d_def__.s1.r1260$x*8, 1, 8) aligned(8, 0)]*x8(pipeline_features[(pipeline_features.stride.2*squashed_head1_filter_0_d_def__.s1.r1260$x) + t11964]))
        }
       }
       consume squashed_head1_filter_0_d_def__ {
        let t9819 = (float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp(((t11959 + updated_head1_filter.s1.v235.v208i)*head1_filter.stride.1) + t11961, 1, 8)])
        updated_head1_filter[ramp(((t11959 + updated_head1_filter.s1.v235.v208i)*updated_head1_filter.stride.1) + t11962, 1, 8)] = x8(0.000000f) - (((x8(0.000000f) - squashed_head1_filter_0_d_def__[ramp(0, 1, 8)])/((t9819 + x8(1.000000f))*(t9819 + x8(1.000000f))))*t9819)
       }
       free squashed_head1_filter_0_d_def__
      }
     }
    } else {
     let t11968 = (updated_head1_filter.s1.v235.v235.v235 % 20)*2
     let t11966 = head1_filter.stride.2*6
     let t11965 = t11952 + t11968
     for (updated_head1_filter.s1.v235.v208i, 0, 2) {
      allocate squashed_head1_filter_0_d_def__[float32 * 8] in Stack
      produce squashed_head1_filter_0_d_def__ {
       squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
       let t11969 = t11965 + updated_head1_filter.s1.v235.v208i
       for (squashed_head1_filter_0_d_def__.s1.r1260$x, 0, num_stages) {
        squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] + (head1_conv_1_d_def__[ramp(squashed_head1_filter_0_d_def__.s1.r1260$x*8, 1, 8) aligned(8, 0)]*x8(pipeline_features[(pipeline_features.stride.2*squashed_head1_filter_0_d_def__.s1.r1260$x) + t11969]))
       }
      }
      consume squashed_head1_filter_0_d_def__ {
       let t9821 = (float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp(((t11968 + updated_head1_filter.s1.v235.v208i)*head1_filter.stride.1) + t11966, 1, 8)])
       updated_head1_filter[ramp(((t11968 + updated_head1_filter.s1.v235.v208i)*updated_head1_filter.stride.1) + t11954, 1, 8)] = x8(0.000000f) - (((x8(0.000000f) - squashed_head1_filter_0_d_def__[ramp(0, 1, 8)])/((t9821 + x8(1.000000f))*(t9821 + x8(1.000000f))))*t9821)
      }
      free squashed_head1_filter_0_d_def__
     }
    }
   }
  }
  parallel (updated_head1_filter.s2.v235.v235.v235, 0, 80) {
   if (updated_head1_filter.s2.v235.v235.v235 < 60) {
    let t11972 = (updated_head1_filter.s2.v235.v235.v235/20)*2
    let t11973 = (updated_head1_filter.s2.v235.v235.v235 % 20)*2
    for (updated_head1_filter.s2.v236.v209i, 0, 2) {
     let t11975 = (t11972 + updated_head1_filter.s2.v236.v209i)*updated_head1_filter.stride.2
     for (updated_head1_filter.s2.v235.v208i, 0, 2) {
      let t9822 = ((t11973 + updated_head1_filter.s2.v235.v208i)*updated_head1_filter.stride.1) + t11975
      let t10101 = t9822 + updated_head1_filter.stride.3
      updated_head1_filter[ramp(t10101, 1, 8)] = (updated_head1_filter[ramp(t10101, 1, 8)]*x8(0.900000f)) + (updated_head1_filter[ramp((updated_head1_filter.stride.3*3) + t9822, 1, 8)]*x8(0.100000f))
     }
    }
   } else {
    let t11978 = (updated_head1_filter.s2.v235.v235.v235 % 20)*2
    let t11977 = updated_head1_filter.stride.2*6
    for (updated_head1_filter.s2.v235.v208i, 0, 2) {
     let t9824 = ((t11978 + updated_head1_filter.s2.v235.v208i)*updated_head1_filter.stride.1) + t11977
     let t10102 = t9824 + updated_head1_filter.stride.3
     updated_head1_filter[ramp(t10102, 1, 8)] = (updated_head1_filter[ramp(t10102, 1, 8)]*x8(0.900000f)) + (updated_head1_filter[ramp((updated_head1_filter.stride.3*3) + t9824, 1, 8)]*x8(0.100000f))
    }
   }
  }
  let t11980 = updated_head1_filter.stride.3*3
  let t11981 = updated_head1_filter.stride.3*2
  parallel (updated_head1_filter.s3.v235.v235.v235, 0, 80) {
   if (updated_head1_filter.s3.v235.v235.v235 < 60) {
    let t11983 = (updated_head1_filter.s3.v235.v235.v235/20)*2
    let t11984 = (updated_head1_filter.s3.v235.v235.v235 % 20)*2
    for (updated_head1_filter.s3.v236.v209i, 0, 2) {
     let t11985 = (t11983 + updated_head1_filter.s3.v236.v209i)*updated_head1_filter.stride.2
     for (updated_head1_filter.s3.v235.v208i, 0, 2) {
      let t9826 = ((t11984 + updated_head1_filter.s3.v235.v208i)*updated_head1_filter.stride.1) + t11985
      let t9828 = updated_head1_filter[ramp(t11980 + t9826, 1, 8)]
      let t10103 = t11981 + t9826
      updated_head1_filter[ramp(t10103, 1, 8)] = (updated_head1_filter[ramp(t10103, 1, 8)]*x8(0.999000f)) + ((t9828*t9828)*x8(0.001000f))
     }
    }
   } else {
    let t11987 = (updated_head1_filter.s3.v235.v235.v235 % 20)*2
    let t11986 = updated_head1_filter.stride.2*6
    for (updated_head1_filter.s3.v235.v208i, 0, 2) {
     let t9829 = ((t11987 + updated_head1_filter.s3.v235.v208i)*updated_head1_filter.stride.1) + t11986
     let t9831 = updated_head1_filter[ramp(t11980 + t9829, 1, 8)]
     let t10104 = t11981 + t9829
     updated_head1_filter[ramp(t10104, 1, 8)] = (updated_head1_filter[ramp(t10104, 1, 8)]*x8(0.999000f)) + ((t9831*t9831)*x8(0.001000f))
    }
   }
  }
  let t11993 = float32((timestep + 1))
  let t11990 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t11993))
  let t11988 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t11993))
  parallel (updated_head1_filter.s4.v235.v235.v235, 0, 80) {
   if (updated_head1_filter.s4.v235.v235.v235 < 60) {
    let t11994 = (updated_head1_filter.s4.v235.v235.v235/20)*2
    let t11995 = (updated_head1_filter.s4.v235.v235.v235 % 20)*2
    for (updated_head1_filter.s4.v236.v209i, 0, 2) {
     let t12000 = t11994 + updated_head1_filter.s4.v236.v209i
     let t11997 = t12000*updated_head1_filter.stride.2
     let t11998 = head1_filter.stride.2*t12000
     for (updated_head1_filter.s4.v235.v208i, 0, 2) {
      let t9834 = ((t11995 + updated_head1_filter.s4.v235.v208i)*updated_head1_filter.stride.1) + t11997
      updated_head1_filter[ramp(t9834, 1, 8)] = head1_filter[ramp(((t11995 + updated_head1_filter.s4.v235.v208i)*head1_filter.stride.1) + t11998, 1, 8)] - (((updated_head1_filter[ramp(t9834 + updated_head1_filter.stride.3, 1, 8)]*x8((float32)learning_rate))*x8(t11988))/((float32x8)sqrt_f32(updated_head1_filter[ramp((updated_head1_filter.stride.3*2) + t9834, 1, 8)]*x8(t11990)) + x8(0.000010f)))
     }
    }
   } else {
    let t12002 = (updated_head1_filter.s4.v235.v235.v235 % 20)*2
    let t12001 = updated_head1_filter.stride.2*6
    let t12003 = head1_filter.stride.2*6
    for (updated_head1_filter.s4.v235.v208i, 0, 2) {
     let t9836 = ((t12002 + updated_head1_filter.s4.v235.v208i)*updated_head1_filter.stride.1) + t12001
     updated_head1_filter[ramp(t9836, 1, 8)] = head1_filter[ramp(((t12002 + updated_head1_filter.s4.v235.v208i)*head1_filter.stride.1) + t12003, 1, 8)] - (((updated_head1_filter[ramp(t9836 + updated_head1_filter.stride.3, 1, 8)]*x8((float32)learning_rate))*x8(t11988))/((float32x8)sqrt_f32(updated_head1_filter[ramp((updated_head1_filter.stride.3*2) + t9836, 1, 8)]*x8(t11990)) + x8(0.000010f)))
    }
   }
  }
 }
 allocate head1_bias_im_0_d_def__[float32 * 8]
 produce head1_bias_im_0_d_def__ {
  head1_bias_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
  consume head1_conv_1_d_def__ {
   for (head1_bias_im_0_d_def__.s1.r1240$x, 0, num_stages) {
    head1_bias_im_0_d_def__[ramp(0, 1, 8)] = head1_bias_im_0_d_def__[ramp(0, 1, 8)] + head1_conv_1_d_def__[ramp(head1_bias_im_0_d_def__.s1.r1240$x*8, 1, 8) aligned(8, 0)]
   }
  }
  free head1_conv_1_d_def__
 }
 produce updated_head1_bias {
  consume head1_bias_im_0_d_def__ {
   updated_head1_bias[ramp(updated_head1_bias.stride.1*3, 1, 8) aligned(3, 0)] = head1_bias_im_0_d_def__[ramp(0, 1, 8)]
  }
  free head1_bias_im_0_d_def__
  updated_head1_bias[ramp(updated_head1_bias.stride.1, 1, 8)] = (updated_head1_bias[ramp(updated_head1_bias.stride.1, 1, 8)]*x8(0.900000f)) + (updated_head1_bias[ramp(updated_head1_bias.stride.1*3, 1, 8) aligned(3, 0)]*x8(0.100000f))
  let t9837 = updated_head1_bias[ramp(updated_head1_bias.stride.1*3, 1, 8) aligned(3, 0)]
  updated_head1_bias[ramp(updated_head1_bias.stride.1*2, 1, 8) aligned(2, 0)] = (updated_head1_bias[ramp(updated_head1_bias.stride.1*2, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t9837*t9837)*x8(0.001000f))
  updated_head1_bias[ramp(0, 1, 8)] = head1_bias[ramp(0, 1, 8)] - (((updated_head1_bias[ramp(updated_head1_bias.stride.1, 1, 8)]*x8((float32)learning_rate))*x8(1.000000f/(1.000000f - (float32)pow_f32(0.900000f, float32((timestep + 1))))))/((float32x8)sqrt_f32(updated_head1_bias[ramp(updated_head1_bias.stride.1*2, 1, 8) aligned(2, 0)]*x8(1.000000f/(1.000000f - (float32)pow_f32(0.999000f, float32((timestep + 1)))))) + x8(0.000010f)))
 }
 allocate head2_conv_1_d_def__[float32 * 24 * num_stages * batch_size]
 produce head2_conv_1_d_def__ {
  consume conv1_stage2_1_d_def__ {
   consume head2_conv {
    let t12005 = max((batch_size + 4)/5, 0)
    let t12006 = max(batch_size/5, 0)
    let t12007 = max(num_stages, 0)
    let t12008 = min(prediction_output.min.0, 0)
    parallel (head2_conv_1_d_def__.s0.n.n, 0, t12005) {
     if (head2_conv_1_d_def__.s0.n.n < t12006) {
      let t12012 = head2_conv_1_d_def__.s0.n.n*5
      let t12011 = t12012 - t12008
      for (head2_conv_1_d_def__.s0.w, 0, t12007) {
       let t12013 = min(batch_size - t12012, 5)
       let t12015 = (head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.w)*3
       let t12016 = head2_conv_1_d_def__.s0.w*3
       let t12014 = ((batch_size*head2_conv_1_d_def__.s0.w)*32) + t12012
       for (head2_conv_1_d_def__.s0.c.c, 0, 3) {
        allocate head2_relu_0_d_def__[float32 * 40] in Stack
        produce head2_relu_0_d_def__ {
         for (head2_relu_0_d_def__.s0.n.rebased, 0, t12013) {
          head2_relu_0_d_def__[ramp(head2_relu_0_d_def__.s0.n.rebased*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
         }
         let t12017 = ((head2_conv_1_d_def__.s0.c.c*8) + 8)*filter1.stride.1
         for (head2_relu_0_d_def__.s1.r940$x, 0, 32) {
          let t12019 = (batch_size*head2_relu_0_d_def__.s1.r940$x) + t12014
          let t12018 = head2_relu_0_d_def__.s1.r940$x + t12017
          for (head2_relu_0_d_def__.s1.n.rebased, 0, t12013) {
           head2_relu_0_d_def__[ramp(head2_relu_0_d_def__.s1.n.rebased*8, 1, 8) aligned(8, 0)] = head2_relu_0_d_def__[ramp(head2_relu_0_d_def__.s1.n.rebased*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t12018, filter1.stride.1, 8)]*x8(conv1_stage2_1_d_def__[head2_relu_0_d_def__.s1.n.rebased + t12019]))
          }
         }
        }
        consume head2_relu_0_d_def__ {
         let t12020 = (((head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.c.c) + t12015)*8) + t12011
         let t12021 = head2_conv_1_d_def__.s0.c.c + t12016
         for (head2_conv_1_d_def__.s0.n.ni, 0, 5) {
          head2_conv_1_d_def__[ramp(((((head2_conv_1_d_def__.s0.n.ni + t12012)*num_stages)*3) + t12021)*8, 1, 8) aligned(8, 0)] = select(head2_conv[ramp(head2_conv_1_d_def__.s0.n.ni + t12020, head2_conv.n.extent_realized, 8)] < x8(0.000000f), x8(0.000000f), head2_relu_0_d_def__[ramp(head2_conv_1_d_def__.s0.n.ni*8, 1, 8) aligned(8, 0)])
         }
        }
        free head2_relu_0_d_def__
       }
      }
     } else {
      let t12025 = head2_conv_1_d_def__.s0.n.n*5
      let t12024 = t12025 - t12008
      for (head2_conv_1_d_def__.s0.w, 0, num_stages) {
       let t12031 = min(batch_size - t12025, 5)
       let t12028 = max(t12031, 0)
       let t12029 = (head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.w)*3
       let t12030 = head2_conv_1_d_def__.s0.w*3
       let t12027 = ((batch_size*head2_conv_1_d_def__.s0.w)*32) + t12025
       for (head2_conv_1_d_def__.s0.c.c, 0, 3) {
        allocate head2_relu_0_d_def__[float32 * 40] in Stack
        produce head2_relu_0_d_def__ {
         for (head2_relu_0_d_def__.s0.n.rebased, 0, t12031) {
          head2_relu_0_d_def__[ramp(head2_relu_0_d_def__.s0.n.rebased*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
         }
         let t12032 = ((head2_conv_1_d_def__.s0.c.c*8) + 8)*filter1.stride.1
         for (head2_relu_0_d_def__.s1.r940$x, 0, 32) {
          let t12034 = (batch_size*head2_relu_0_d_def__.s1.r940$x) + t12027
          let t12033 = head2_relu_0_d_def__.s1.r940$x + t12032
          for (head2_relu_0_d_def__.s1.n.rebased, 0, t12031) {
           head2_relu_0_d_def__[ramp(head2_relu_0_d_def__.s1.n.rebased*8, 1, 8) aligned(8, 0)] = head2_relu_0_d_def__[ramp(head2_relu_0_d_def__.s1.n.rebased*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t12033, filter1.stride.1, 8)]*x8(conv1_stage2_1_d_def__[head2_relu_0_d_def__.s1.n.rebased + t12034]))
          }
         }
        }
        consume head2_relu_0_d_def__ {
         let t12035 = (((head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.c.c) + t12029)*8) + t12024
         let t12036 = head2_conv_1_d_def__.s0.c.c + t12030
         for (head2_conv_1_d_def__.s0.n.ni, 0, t12028) {
          head2_conv_1_d_def__[ramp(((((head2_conv_1_d_def__.s0.n.ni + t12025)*num_stages)*3) + t12036)*8, 1, 8) aligned(8, 0)] = select(head2_conv[ramp(head2_conv_1_d_def__.s0.n.ni + t12035, head2_conv.n.extent_realized, 8)] < x8(0.000000f), x8(0.000000f), head2_relu_0_d_def__[ramp(head2_conv_1_d_def__.s0.n.ni*8, 1, 8) aligned(8, 0)])
         }
        }
        free head2_relu_0_d_def__
       }
      }
     }
    }
   }
  }
 }
 free head2_conv
 produce updated_head2_filter {
  consume head2_conv_1_d_def__ {
   consume normalized_schedule_features {
    let t12041 = updated_head2_filter.stride.2*3
    let t12042 = min(prediction_output.min.0, 0)
    let t12039 = (normalized_schedule_features.n.extent_realized*38) - t12042
    let t12040 = (updated_head2_filter.stride.1*38) + t12041
    parallel (updated_head2_filter.s1.v240.v240.v240, 0, 60) {
     if (updated_head2_filter.s1.v240.v240.v240 < 57) {
      let t12046 = updated_head2_filter.s1.v240.v240.v240 % 3
      let t12044 = (updated_head2_filter.s1.v240.v240.v240/3)*2
      let t12045 = (t12046*8) + t12041
      for (updated_head2_filter.s1.v241.v214i, 0, 2) {
       allocate head2_filter_im_0_d_def__[float32 * 8] in Stack
       produce head2_filter_im_0_d_def__ {
        head2_filter_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
        let t12047 = ((t12044 + updated_head2_filter.s1.v241.v214i)*normalized_schedule_features.n.extent_realized) - t12042
        for (head2_filter_im_0_d_def__.s1.r1046$y, 0, batch_size) {
         let t12048 = ((head2_filter_im_0_d_def__.s1.r1046$y*num_stages)*3) + t12046
         let t12049 = head2_filter_im_0_d_def__.s1.r1046$y + t12047
         for (head2_filter_im_0_d_def__.s1.r1046$x, 0, num_stages) {
          head2_filter_im_0_d_def__[ramp(0, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)] + (head2_conv_1_d_def__[ramp(((head2_filter_im_0_d_def__.s1.r1046$x*3) + t12048)*8, 1, 8) aligned(8, 0)]*x8(normalized_schedule_features[((head2_filter_im_0_d_def__.s1.r1046$x*normalized_schedule_features.n.extent_realized)*39) + t12049]))
         }
        }
       }
       consume head2_filter_im_0_d_def__ {
        updated_head2_filter[ramp(((t12044 + updated_head2_filter.s1.v241.v214i)*updated_head2_filter.stride.1) + t12045, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)]
       }
       free head2_filter_im_0_d_def__
      }
     } else {
      allocate head2_filter_im_0_d_def__[float32 * 8] in Stack
      produce head2_filter_im_0_d_def__ {
       head2_filter_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
       let t12050 = updated_head2_filter.s1.v240.v240.v240 % 3
       for (head2_filter_im_0_d_def__.s1.r1046$y, 0, batch_size) {
        let t12051 = ((head2_filter_im_0_d_def__.s1.r1046$y*num_stages)*3) + t12050
        let t12052 = head2_filter_im_0_d_def__.s1.r1046$y + t12039
        for (head2_filter_im_0_d_def__.s1.r1046$x, 0, num_stages) {
         head2_filter_im_0_d_def__[ramp(0, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)] + (head2_conv_1_d_def__[ramp(((head2_filter_im_0_d_def__.s1.r1046$x*3) + t12051)*8, 1, 8) aligned(8, 0)]*x8(normalized_schedule_features[((head2_filter_im_0_d_def__.s1.r1046$x*normalized_schedule_features.n.extent_realized)*39) + t12052]))
        }
       }
      }
      consume head2_filter_im_0_d_def__ {
       updated_head2_filter[ramp(((updated_head2_filter.s1.v240.v240.v240 % 3)*8) + t12040, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)]
      }
      free head2_filter_im_0_d_def__
     }
    }
   }
  }
  free normalized_schedule_features
  parallel (updated_head2_filter.s2.v240.v240.v240, 0, 60) {
   if (updated_head2_filter.s2.v240.v240.v240 < 57) {
    let t12056 = (updated_head2_filter.s2.v240.v240.v240/3)*2
    let t12055 = (updated_head2_filter.s2.v240.v240.v240 % 3)*8
    for (updated_head2_filter.s2.v241.v214i, 0, 2) {
     let t9840 = ((t12056 + updated_head2_filter.s2.v241.v214i)*updated_head2_filter.stride.1) + t12055
     let t10105 = t9840 + updated_head2_filter.stride.2
     updated_head2_filter[ramp(t10105, 1, 8)] = (updated_head2_filter[ramp(t10105, 1, 8)]*x8(0.900000f)) + (updated_head2_filter[ramp((updated_head2_filter.stride.2*3) + t9840, 1, 8)]*x8(0.100000f))
    }
   } else {
    let t9842 = (updated_head2_filter.stride.1*38) + ((updated_head2_filter.s2.v240.v240.v240 % 3)*8)
    let t10106 = t9842 + updated_head2_filter.stride.2
    updated_head2_filter[ramp(t10106, 1, 8)] = (updated_head2_filter[ramp(t10106, 1, 8)]*x8(0.900000f)) + (updated_head2_filter[ramp((updated_head2_filter.stride.2*3) + t9842, 1, 8)]*x8(0.100000f))
   }
  }
  let t12058 = updated_head2_filter.stride.2*3
  let t12059 = updated_head2_filter.stride.2*2
  parallel (updated_head2_filter.s3.v240.v240.v240, 0, 60) {
   if (updated_head2_filter.s3.v240.v240.v240 < 57) {
    let t12062 = (updated_head2_filter.s3.v240.v240.v240/3)*2
    let t12061 = (updated_head2_filter.s3.v240.v240.v240 % 3)*8
    for (updated_head2_filter.s3.v241.v214i, 0, 2) {
     let t9844 = ((t12062 + updated_head2_filter.s3.v241.v214i)*updated_head2_filter.stride.1) + t12061
     let t9846 = updated_head2_filter[ramp(t12058 + t9844, 1, 8)]
     let t10107 = t12059 + t9844
     updated_head2_filter[ramp(t10107, 1, 8)] = (updated_head2_filter[ramp(t10107, 1, 8)]*x8(0.999000f)) + ((t9846*t9846)*x8(0.001000f))
    }
   } else {
    let t9847 = (updated_head2_filter.stride.1*38) + ((updated_head2_filter.s3.v240.v240.v240 % 3)*8)
    let t9849 = updated_head2_filter[ramp(t12058 + t9847, 1, 8)]
    let t10108 = t12059 + t9847
    updated_head2_filter[ramp(t10108, 1, 8) aligned(2, 0)] = (updated_head2_filter[ramp(t10108, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t9849*t9849)*x8(0.001000f))
   }
  }
  let t12068 = float32((timestep + 1))
  let t12065 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t12068))
  let t12063 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t12068))
  parallel (updated_head2_filter.s4.v240.v240.v240, 0, 60) {
   if (updated_head2_filter.s4.v240.v240.v240 < 57) {
    let t12070 = (updated_head2_filter.s4.v240.v240.v240/3)*2
    let t12069 = (updated_head2_filter.s4.v240.v240.v240 % 3)*8
    for (updated_head2_filter.s4.v241.v214i, 0, 2) {
     let t9852 = ((t12070 + updated_head2_filter.s4.v241.v214i)*updated_head2_filter.stride.1) + t12069
     updated_head2_filter[ramp(t9852, 1, 8)] = head2_filter[ramp(((t12070 + updated_head2_filter.s4.v241.v214i)*head2_filter.stride.1) + t12069, 1, 8)] - (((updated_head2_filter[ramp(t9852 + updated_head2_filter.stride.2, 1, 8)]*x8((float32)learning_rate))*x8(t12063))/((float32x8)sqrt_f32(updated_head2_filter[ramp((updated_head2_filter.stride.2*2) + t9852, 1, 8)]*x8(t12065)) + x8(0.000010f)))
    }
   } else {
    let t9854 = (updated_head2_filter.stride.1*38) + ((updated_head2_filter.s4.v240.v240.v240 % 3)*8)
    updated_head2_filter[ramp(t9854, 1, 8) aligned(2, 0)] = head2_filter[ramp((head2_filter.stride.1*38) + ((updated_head2_filter.s4.v240.v240.v240 % 3)*8), 1, 8) aligned(2, 0)] - (((updated_head2_filter[ramp(t9854 + updated_head2_filter.stride.2, 1, 8)]*x8((float32)learning_rate))*x8(t12063))/((float32x8)sqrt_f32(updated_head2_filter[ramp((updated_head2_filter.stride.2*2) + t9854, 1, 8) aligned(2, 0)]*x8(t12065)) + x8(0.000010f)))
   }
  }
 }
 produce updated_head2_bias {
  consume head2_conv_1_d_def__ {
   let t12072 = updated_head2_bias.stride.1*3
   parallel (updated_head2_bias.s1.v243.v243, 0, 3) {
    allocate head2_bias_im_0_d_def__[float32 * 8]
    produce head2_bias_im_0_d_def__ {
     head2_bias_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
     for (head2_bias_im_0_d_def__.s1.r1067$y, 0, batch_size) {
      let t12073 = ((head2_bias_im_0_d_def__.s1.r1067$y*num_stages)*3) + updated_head2_bias.s1.v243.v243
      for (head2_bias_im_0_d_def__.s1.r1067$x, 0, num_stages) {
       allocate head2_conv_0_d_def__$1[float32 * 8] in Stack
       produce head2_conv_0_d_def__$1 {
        head2_conv_0_d_def__$1[ramp(0, 1, 8)] = head2_conv_1_d_def__[ramp(((head2_bias_im_0_d_def__.s1.r1067$x*3) + t12073)*8, 1, 8) aligned(8, 0)]
       }
       consume head2_conv_0_d_def__$1 {
        head2_bias_im_0_d_def__[ramp(0, 1, 8)] = head2_bias_im_0_d_def__[ramp(0, 1, 8)] + head2_conv_0_d_def__$1[ramp(0, 1, 8)]
       }
       free head2_conv_0_d_def__$1
      }
     }
    }
    consume head2_bias_im_0_d_def__ {
     updated_head2_bias[ramp((updated_head2_bias.s1.v243.v243*8) + t12072, 1, 8)] = head2_bias_im_0_d_def__[ramp(0, 1, 8)]
    }
    free head2_bias_im_0_d_def__
   }
  }
  free head2_conv_1_d_def__
  parallel (updated_head2_bias.s2.v243.v243, 0, 3) {
   let t10109 = (updated_head2_bias.s2.v243.v243*8) + updated_head2_bias.stride.1
   updated_head2_bias[ramp(t10109, 1, 8)] = (updated_head2_bias[ramp(t10109, 1, 8)]*x8(0.900000f)) + (updated_head2_bias[ramp((updated_head2_bias.stride.1*3) + (updated_head2_bias.s2.v243.v243*8), 1, 8)]*x8(0.100000f))
  }
  parallel (updated_head2_bias.s3.v243.v243, 0, 3) {
   let t9857 = updated_head2_bias[ramp((updated_head2_bias.stride.1*3) + (updated_head2_bias.s3.v243.v243*8), 1, 8)]
   let t10110 = (updated_head2_bias.s3.v243.v243*4) + updated_head2_bias.stride.1
   updated_head2_bias[ramp(t10110*2, 1, 8) aligned(2, 0)] = (updated_head2_bias[ramp(t10110*2, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t9857*t9857)*x8(0.001000f))
  }
  let t12078 = float32((timestep + 1))
  let t12077 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t12078))
  let t12076 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t12078))
  parallel (updated_head2_bias.s4.v243.v243, 0, 3) {
   updated_head2_bias[ramp(updated_head2_bias.s4.v243.v243*8, 1, 8) aligned(8, 0)] = head2_bias[ramp(updated_head2_bias.s4.v243.v243*8, 1, 8) aligned(8, 0)] - (((updated_head2_bias[ramp((updated_head2_bias.s4.v243.v243*8) + updated_head2_bias.stride.1, 1, 8)]*x8((float32)learning_rate))*x8(t12076))/((float32x8)sqrt_f32(updated_head2_bias[ramp(((updated_head2_bias.s4.v243.v243*4) + updated_head2_bias.stride.1)*2, 1, 8) aligned(2, 0)]*x8(t12077)) + x8(0.000010f)))
  }
 }
 allocate filter1_im_0_d_def__[float32 * 32 * 32]
 produce filter1_im_0_d_def__ {
  parallel (filter1_im_0_d_def__.s0.v12, 0, 32) {
   let t12079 = filter1_im_0_d_def__.s0.v12*4
   for (filter1_im_0_d_def__.s0.v13.v13, 0, 4) {
    filter1_im_0_d_def__[ramp((filter1_im_0_d_def__.s0.v13.v13 + t12079)*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
   }
  }
  consume conv1_stage2_1_d_def__ {
   consume head2_relu {
    let t12080 = min(prediction_output.min.0, 0)
    parallel (filter1_im_0_d_def__.s1.v12, 0, 32) {
     let t12081 = filter1_im_0_d_def__.s1.v12*32
     let t12082 = batch_size*filter1_im_0_d_def__.s1.v12
     for (filter1_im_0_d_def__.s1.r962$z, 0, 24) {
      let t12084 = (filter1_im_0_d_def__.s1.r962$z*head2_relu.n.extent_realized) - t12080
      let t12083 = filter1_im_0_d_def__.s1.r962$z + t12081
      for (filter1_im_0_d_def__.s1.r962$y, 0, batch_size) {
       let t12086 = filter1_im_0_d_def__.s1.r962$y + t12084
       let t12085 = filter1_im_0_d_def__.s1.r962$y + t12082
       for (filter1_im_0_d_def__.s1.r962$x, 0, num_stages) {
        filter1_im_0_d_def__[t12083 + 8] = filter1_im_0_d_def__[t12083 + 8] + (conv1_stage2_1_d_def__[((batch_size*filter1_im_0_d_def__.s1.r962$x)*32) + t12085]*head2_relu[((filter1_im_0_d_def__.s1.r962$x*head2_relu.n.extent_realized)*24) + t12086])
       }
      }
     }
    }
   }
  }
  free head2_relu
  free conv1_stage2_1_d_def__
  consume conv1_stage1_1_d_def__ {
   consume head1_conv {
    parallel (filter1_im_0_d_def__.s2.v12, 0, 32) {
     let t12088 = filter1_im_0_d_def__.s2.v12*num_stages
     let t12087 = filter1_im_0_d_def__.s2.v12*32
     for (filter1_im_0_d_def__.s2.r1158$y, 0, 8) {
      let t12089 = filter1_im_0_d_def__.s2.r1158$y + t12087
      for (filter1_im_0_d_def__.s2.r1158$x, 0, num_stages) {
       filter1_im_0_d_def__[t12089] = filter1_im_0_d_def__[t12089] + (conv1_stage1_1_d_def__[filter1_im_0_d_def__.s2.r1158$x + t12088]*head1_conv[(filter1_im_0_d_def__.s2.r1158$x*8) + filter1_im_0_d_def__.s2.r1158$y])
      }
     }
    }
   }
  }
  free head1_conv
 }
 produce updated_filter1 {
  consume filter1_im_0_d_def__ {
   let t12090 = updated_filter1.stride.2*3
   parallel (updated_filter1.s1.v245.v245.v245, 0, 32) {
    let t12091 = (updated_filter1.s1.v245.v245.v245/2)*2
    let t12092 = (updated_filter1.s1.v245.v245.v245 % 2)*2
    for (updated_filter1.s1.v246.v219i, 0, 2) {
     let t12093 = t12091 + updated_filter1.s1.v246.v219i
     for (updated_filter1.s1.v245.v218i.v218i, 0, 2) {
      let t10114 = t12092 + updated_filter1.s1.v245.v218i.v218i
      updated_filter1[ramp((t10114*8) + ((t12093*updated_filter1.stride.1) + t12090), 1, 8)] = filter1_im_0_d_def__[ramp((t10114*256) + t12093, 32, 8)]
     }
    }
   }
  }
  free filter1_im_0_d_def__
  parallel (updated_filter1.s2.v245.v245.v245, 0, 32) {
   let t12095 = (updated_filter1.s2.v245.v245.v245/2)*2
   let t12096 = (updated_filter1.s2.v245.v245.v245 % 2)*2
   for (updated_filter1.s2.v246.v219i, 0, 2) {
    let t12098 = (t12095 + updated_filter1.s2.v246.v219i)*updated_filter1.stride.1
    for (updated_filter1.s2.v245.v218i.v218i, 0, 2) {
     let t9862 = ((t12096 + updated_filter1.s2.v245.v218i.v218i)*8) + t12098
     let t10115 = t9862 + updated_filter1.stride.2
     updated_filter1[ramp(t10115, 1, 8)] = (updated_filter1[ramp(t10115, 1, 8)]*x8(0.900000f)) + (updated_filter1[ramp((updated_filter1.stride.2*3) + t9862, 1, 8)]*x8(0.100000f))
    }
   }
  }
  let t12101 = updated_filter1.stride.2*3
  let t12100 = updated_filter1.stride.2*2
  parallel (updated_filter1.s3.v245.v245.v245, 0, 32) {
   let t12102 = (updated_filter1.s3.v245.v245.v245/2)*2
   let t12103 = (updated_filter1.s3.v245.v245.v245 % 2)*2
   for (updated_filter1.s3.v246.v219i, 0, 2) {
    let t12106 = (t12102 + updated_filter1.s3.v246.v219i)*updated_filter1.stride.1
    let t12105 = t12101 + t12106
    let t12104 = t12100 + t12106
    for (updated_filter1.s3.v245.v218i.v218i, 0, 2) {
     let t9866 = ((t12103 + updated_filter1.s3.v245.v218i.v218i)*8) + t12104
     let t9867 = updated_filter1[ramp(((t12103 + updated_filter1.s3.v245.v218i.v218i)*8) + t12105, 1, 8)]
     updated_filter1[ramp(t9866, 1, 8)] = (updated_filter1[ramp(t9866, 1, 8)]*x8(0.999000f)) + ((t9867*t9867)*x8(0.001000f))
    }
   }
  }
  let t12110 = float32((timestep + 1))
  let t12109 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t12110))
  let t12107 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t12110))
  parallel (updated_filter1.s4.v245.v245.v245, 0, 32) {
   let t12111 = (updated_filter1.s4.v245.v245.v245/2)*2
   let t12112 = (updated_filter1.s4.v245.v245.v245 % 2)*2
   for (updated_filter1.s4.v246.v219i, 0, 2) {
    let t12117 = t12111 + updated_filter1.s4.v246.v219i
    let t12114 = t12117*updated_filter1.stride.1
    let t12115 = filter1.stride.1*t12117
    for (updated_filter1.s4.v245.v218i.v218i, 0, 2) {
     let t9870 = ((t12112 + updated_filter1.s4.v245.v218i.v218i)*8) + t12114
     updated_filter1[ramp(t9870, 1, 8)] = filter1[ramp(((t12112 + updated_filter1.s4.v245.v218i.v218i)*8) + t12115, 1, 8)] - (((updated_filter1[ramp(t9870 + updated_filter1.stride.2, 1, 8)]*x8((float32)learning_rate))*x8(t12107))/((float32x8)sqrt_f32(updated_filter1[ramp((updated_filter1.stride.2*2) + t9870, 1, 8)]*x8(t12109)) + x8(0.000010f)))
    }
   }
  }
 }
 produce updated_bias1 {
  consume conv1_stage1_1_d_def__ {
   let t12118 = updated_bias1.stride.1*3
   parallel (updated_bias1.s1.v248.v248, 0, 4) {
    allocate bias1_im_0_d_def__[float32 * 8]
    produce bias1_im_0_d_def__ {
     bias1_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
     let t12119 = (num_stages*updated_bias1.s1.v248.v248)*8
     for (bias1_im_0_d_def__.s1.r1178$x, 0, num_stages) {
      bias1_im_0_d_def__[ramp(0, 1, 8)] = bias1_im_0_d_def__[ramp(0, 1, 8)] + conv1_stage1_1_d_def__[ramp(bias1_im_0_d_def__.s1.r1178$x + t12119, num_stages, 8)]
     }
    }
    consume bias1_im_0_d_def__ {
     updated_bias1[ramp((updated_bias1.s1.v248.v248*8) + t12118, 1, 8)] = bias1_im_0_d_def__[ramp(0, 1, 8)]
    }
    free bias1_im_0_d_def__
   }
  }
  free conv1_stage1_1_d_def__
  parallel (updated_bias1.s2.v248.v248, 0, 4) {
   let t10116 = (updated_bias1.s2.v248.v248*8) + updated_bias1.stride.1
   updated_bias1[ramp(t10116, 1, 8)] = (updated_bias1[ramp(t10116, 1, 8)]*x8(0.900000f)) + (updated_bias1[ramp((updated_bias1.stride.1*3) + (updated_bias1.s2.v248.v248*8), 1, 8)]*x8(0.100000f))
  }
  parallel (updated_bias1.s3.v248.v248, 0, 4) {
   let t9873 = updated_bias1[ramp((updated_bias1.stride.1*3) + (updated_bias1.s3.v248.v248*8), 1, 8)]
   let t10117 = (updated_bias1.s3.v248.v248*4) + updated_bias1.stride.1
   updated_bias1[ramp(t10117*2, 1, 8) aligned(2, 0)] = (updated_bias1[ramp(t10117*2, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t9873*t9873)*x8(0.001000f))
  }
  let t12124 = float32((timestep + 1))
  let t12123 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t12124))
  let t12122 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t12124))
  parallel (updated_bias1.s4.v248.v248, 0, 4) {
   updated_bias1[ramp(updated_bias1.s4.v248.v248*8, 1, 8) aligned(8, 0)] = bias1[ramp(updated_bias1.s4.v248.v248*8, 1, 8) aligned(8, 0)] - (((updated_bias1[ramp((updated_bias1.s4.v248.v248*8) + updated_bias1.stride.1, 1, 8)]*x8((float32)learning_rate))*x8(t12122))/((float32x8)sqrt_f32(updated_bias1[ramp(((updated_bias1.s4.v248.v248*4) + updated_bias1.stride.1)*2, 1, 8) aligned(2, 0)]*x8(t12123)) + x8(0.000010f)))
  }
 }
 produce prediction_output {
  consume f1 {
   let t12127 = max(prediction_output.min.0, 0)
   let t12125 = (prediction_output.extent.0 + 7)/8
   let t12126 = prediction_output.extent.0/8
   parallel (prediction_output.s0.n.n, 0, t12125) {
    if (prediction_output.s0.n.n < t12126) {
     prediction_output[ramp(prediction_output.s0.n.n*8, 1, 8) aligned(8, 0)] = f1[ramp((prediction_output.s0.n.n*8) + t12127, 1, 8)]
    } else {
     let prediction_output.s0.n.ni.new_max.s = prediction_output.extent.0 - (prediction_output.s0.n.n*8)
     let t12131 = prediction_output.s0.n.n*8
     let t12128 = min(prediction_output.s0.n.ni.new_max.s, 8)
     let t12129 = t12127 + t12131
     for (prediction_output.s0.n.ni, 0, t12128) {
      prediction_output[prediction_output.s0.n.ni + t12131] = f1[prediction_output.s0.n.ni + t12129]
     }
    }
   }
  }
 }
 allocate sum[float32 * batch_size]
 produce sum {
  let t12132 = max((batch_size + 7)/8, 0)
  let t12133 = max(batch_size/8, 0)
  parallel (sum.s0.n.n, 0, t12132) {
   if (sum.s0.n.n < t12133) {
    sum[ramp(sum.s0.n.n*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
   } else {
    let sum.s0.n.ni.new_max.s = batch_size - (sum.s0.n.n*8)
    let t12134 = max(min(sum.s0.n.ni.new_max.s, 8), 0)
    let t12135 = sum.s0.n.n*8
    for (sum.s0.n.ni, 0, t12134) {
     sum[sum.s0.n.ni + t12135] = 0.000000f
    }
   }
  }
  consume conv1_stage2 {
   let t12136 = max((batch_size + 7)/8, 0)
   let t12137 = max(batch_size/8, 0)
   let t12138 = min(prediction_output.min.0, 0)
   parallel (sum.s1.n.n, 0, t12136) {
    if (sum.s1.n.n < t12137) {
     let t12141 = sum.s1.n.n*8
     let t12140 = t12141 - t12138
     for (sum.s1.r92$y, 0, num_stages) {
      let t12142 = ((conv1_stage2.n.extent_realized*sum.s1.r92$y)*32) + t12140
      for (sum.s1.r92$x, 0, 32) {
       sum[ramp(t12141, 1, 8) aligned(8, 0)] = sum[ramp(t12141, 1, 8) aligned(8, 0)] - min(conv1_stage2[ramp((conv1_stage2.n.extent_realized*sum.s1.r92$x) + t12142, 1, 8)], x8(0.000000f))
      }
     }
    } else {
     let t12146 = sum.s1.n.n*8
     let t12145 = t12146 - t12138
     let t12143 = batch_size - t12146
     for (sum.s1.r92$y, 0, num_stages) {
      let t12147 = max(min(t12143, 8), 0)
      let t12148 = ((conv1_stage2.n.extent_realized*sum.s1.r92$y)*32) + t12145
      for (sum.s1.r92$x, 0, 32) {
       let t12149 = (conv1_stage2.n.extent_realized*sum.s1.r92$x) + t12148
       for (sum.s1.n.ni, 0, t12147) {
        let t10118 = sum.s1.n.ni + t12146
        sum[t10118] = sum[t10118] - min(conv1_stage2[sum.s1.n.ni + t12149], 0.000000f)
       }
      }
     }
    }
   }
  }
  free conv1_stage2
 }
 allocate sum$1[float32 * 1]
 produce sum$1 {
  sum$1[0] = 0.000000f
  consume sum {
   consume f1 {
    let t12151 = min(prediction_output.min.0, 0)
    let t12150 = max(min(batch_size + -1, reference), 0) - true_runtime.min.0
    for (sum$1.s1.r87$x, 0, batch_size) {
     let t9875 = true_runtime[t12150]
     let t9876 = (1.000000f/max(f1[sum$1.s1.r87$x - t12151]*(1.000000f/t9875), 0.000000f)) - (1.000000f/(true_runtime[sum$1.s1.r87$x - true_runtime.min.0]*(1.000000f/t9875)))
     sum$1[0] = sum$1[0] + ((t9876*t9876) + (sum[sum$1.s1.r87$x]*0.000010f))
    }
   }
  }
  free f1
  free sum
 }
 produce loss_output {
  consume sum$1 {
   loss_output[0] = sum$1[0]
  }
 }
 free sum$1
}
}


