export HL_ENABLE_RAKE=1 && \
	c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -g conv3x3_a32_generator.cpp /Users/aroot/projects/Halide-trs/distrib/tools/GenGen.cpp -o bin/host/conv3x3_a32_rake.generator -Wl,-rpath,/Users/aroot/projects/Halide-trs/distrib/lib/ -L /Users/aroot/projects/Halide-trs/distrib/lib/ -lHalide  -ldl -lpthread -lz -Wl,-force_load /Users/aroot/projects/Halide-trs/distrib/lib/libautoschedule_mullapudi2016.so
c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -g conv3x3_a32_generator.cpp /Users/aroot/projects/Halide-trs/distrib/tools/GenGen.cpp -o bin/host/conv3x3_a32.generator -Wl,-rpath,/Users/aroot/projects/Halide-trs/distrib/lib/ -L /Users/aroot/projects/Halide-trs/distrib/lib/ -lHalide  -ldl -lpthread -lz -Wl,-force_load /Users/aroot/projects/Halide-trs/distrib/lib/libautoschedule_mullapudi2016.so
export HL_ENABLE_RAKE=1 && \
	export HL_ENABLE_RAKE_RULES=1 && \
	export HL_DISABLE_INTRINISICS=0 && \
	export HL_DISABLE_ARM_LOWERING=0 && \
	bin/host/conv3x3_a32_rake.generator -g conv3x3 -f conv3x3_a32_rake -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
ArmOptimize Add: ((((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t121, 1, 16)], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[ramp(t121 + 1, 1, 16)], x16((int8)mask[t145 + 2])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t122)], x16((int8)mask[t147])), (int16x16)widening_mul((uint8x16)input[ramp(t124, 1, 16)], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: (((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t121, 1, 16)], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[ramp(t121 + 1, 1, 16)], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150]))) + int32x16((int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))))
ArmOptimize Add: ((int32x16)t117 + x16(t116))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145]))))
ArmOptimize Add: ((int32x16)t117 + x16(t120))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[ramp(t121, 1, 16)], x16((int8)mask[t145 + 1]))) + int32x16((int16x16)widening_mul((uint8x16)input[ramp(t121 + 1, 1, 16)], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t122)], x16((int8)mask[t147]))) + int32x16((int16x16)widening_mul((uint8x16)input[ramp(t124, 1, 16)], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: ((int32x16)t117 + x16(t122))
ArmOptimize Add: ((((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t131], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t130 + (int32x16)t131], x16((int8)mask[t145 + 2])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t132], x16((int8)mask[t147])), (int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t132], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: (((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t131], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t130 + (int32x16)t131], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))))
ArmOptimize Add: ((int32x16)t126 + (int32x16)t127)
ArmOptimize Add: ((int32x16)t126 + (int32x16)t129)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145]))))
ArmOptimize Add: ((int32x16)t126 + (int32x16)t130)
ArmOptimize Add: ((int32x16)t127 + (int32x16)t131)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t131], x16((int8)mask[t145 + 1]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t130 + (int32x16)t131], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)t129 + (int32x16)t131)
ArmOptimize Add: ((int32x16)t130 + (int32x16)t131)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t132], x16((int8)mask[t147]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t132], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: ((int32x16)t127 + (int32x16)t132)
ArmOptimize Add: ((int32x16)t129 + (int32x16)t132)
ArmOptimize Add: ((int32x16)t130 + (int32x16)t132)
ArmOptimize Add: ((((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157])), (int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159])), (int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t139], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t138 + (int32x16)t139], x16((int8)mask[t145 + 2])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t140], x16((int8)mask[t147])), (int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t140], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: (((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157])), (int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159])), (int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t139], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t138 + (int32x16)t139], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157])), (int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159])), (int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))))
ArmOptimize Add: ((int32x16)t134 + (int32x16)t135)
ArmOptimize Add: ((int32x16)t134 + (int32x16)t137)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145]))))
ArmOptimize Add: ((int32x16)t134 + (int32x16)t138)
ArmOptimize Add: ((int32x16)t135 + (int32x16)t139)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t139], x16((int8)mask[t145 + 1]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t138 + (int32x16)t139], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)t137 + (int32x16)t139)
ArmOptimize Add: ((int32x16)t138 + (int32x16)t139)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t140], x16((int8)mask[t147]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t140], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: ((int32x16)t135 + (int32x16)t140)
ArmOptimize Add: ((int32x16)t137 + (int32x16)t140)
ArmOptimize Add: ((int32x16)t138 + (int32x16)t140)
export HL_ENABLE_RAKE=0 && \
	export HL_ENABLE_RAKE_RULES=1 && \
	export HL_DISABLE_INTRINISICS=0 && \
	export HL_DISABLE_ARM_LOWERING=0 && \
	bin/host/conv3x3_a32.generator -g conv3x3 -f conv3x3_a32_pitchfork -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
ArmOptimize Add: ((((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t121, 1, 16)], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[ramp(t121 + 1, 1, 16)], x16((int8)mask[t145 + 2])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t122)], x16((int8)mask[t147])), (int16x16)widening_mul((uint8x16)input[ramp(t124, 1, 16)], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: (((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t121, 1, 16)], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[ramp(t121 + 1, 1, 16)], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t116)], x16((int8)mask[t150]))) + int32x16((int16x16)widening_mul((uint8x16)input[ramp(t119, 1, 16)], x16((int8)mask[t151]))))
ArmOptimize Add: ((int32x16)t117 + x16(t116))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[ramp(t119 + 1, 1, 16)], x16((int8)mask[t152]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t120)], x16((int8)mask[t145]))))
ArmOptimize Add: ((int32x16)t117 + x16(t120))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[ramp(t121, 1, 16)], x16((int8)mask[t145 + 1]))) + int32x16((int16x16)widening_mul((uint8x16)input[ramp(t121 + 1, 1, 16)], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t117 + x16(t122)], x16((int8)mask[t147]))) + int32x16((int16x16)widening_mul((uint8x16)input[ramp(t124, 1, 16)], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: ((int32x16)t117 + x16(t122))
ArmOptimize Add: ((((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t131], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t130 + (int32x16)t131], x16((int8)mask[t145 + 2])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t132], x16((int8)mask[t147])), (int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t132], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: (((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t131], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t130 + (int32x16)t131], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150])), (int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152])), (int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t127], x16((int8)mask[t150]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t129], x16((int8)mask[t151]))))
ArmOptimize Add: ((int32x16)t126 + (int32x16)t127)
ArmOptimize Add: ((int32x16)t126 + (int32x16)t129)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t126 + (int32x16)t130], x16((int8)mask[t152]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t131], x16((int8)mask[t145]))))
ArmOptimize Add: ((int32x16)t126 + (int32x16)t130)
ArmOptimize Add: ((int32x16)t127 + (int32x16)t131)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t131], x16((int8)mask[t145 + 1]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t130 + (int32x16)t131], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)t129 + (int32x16)t131)
ArmOptimize Add: ((int32x16)t130 + (int32x16)t131)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t127 + (int32x16)t132], x16((int8)mask[t147]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t129 + (int32x16)t132], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: ((int32x16)t127 + (int32x16)t132)
ArmOptimize Add: ((int32x16)t129 + (int32x16)t132)
ArmOptimize Add: ((int32x16)t130 + (int32x16)t132)
ArmOptimize Add: ((((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157])), (int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159])), (int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t139], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t138 + (int32x16)t139], x16((int8)mask[t145 + 2])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t140], x16((int8)mask[t147])), (int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t140], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: (((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157])), (int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159])), (int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145])))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t139], x16((int8)mask[t145 + 1])), (int16x16)widening_mul((uint8x16)input[(int32x16)t138 + (int32x16)t139], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157])), (int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))) + (int32x16)widening_add((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159])), (int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145]))))
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t135], x16((int8)mask[t157]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t137], x16((int8)mask[t158]))))
ArmOptimize Add: ((int32x16)t134 + (int32x16)t135)
ArmOptimize Add: ((int32x16)t134 + (int32x16)t137)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t134 + (int32x16)t138], x16((int8)mask[t159]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t139], x16((int8)mask[t145]))))
ArmOptimize Add: ((int32x16)t134 + (int32x16)t138)
ArmOptimize Add: ((int32x16)t135 + (int32x16)t139)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t139], x16((int8)mask[t145 + 1]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t138 + (int32x16)t139], x16((int8)mask[t145 + 2]))))
ArmOptimize Add: ((int32x16)t137 + (int32x16)t139)
ArmOptimize Add: ((int32x16)t138 + (int32x16)t139)
ArmOptimize Add: (int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t135 + (int32x16)t140], x16((int8)mask[t147]))) + int32x16((int16x16)widening_mul((uint8x16)input[(int32x16)t137 + (int32x16)t140], x16((int8)mask[t147 + 1]))))
ArmOptimize Add: ((int32x16)t135 + (int32x16)t140)
ArmOptimize Add: ((int32x16)t137 + (int32x16)t140)
ArmOptimize Add: ((int32x16)t138 + (int32x16)t140)
export HL_ENABLE_RAKE=0 && \
	export HL_ENABLE_RAKE_RULES=0 && \
	export HL_DISABLE_INTRINISICS=1 && \
	export HL_DISABLE_ARM_LOWERING=1 && \
	bin/host/conv3x3_a32.generator -g conv3x3 -f conv3x3_a32_llvm -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
bin/host/conv3x3_a32.generator -r runtime -o bin/host target=host
c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -Ibin/host -Wall -O3 filter.cpp bin/host/conv3x3_a32_rake.a bin/host/conv3x3_a32_pitchfork.a bin/host/conv3x3_a32_llvm.a bin/host/runtime.a -o bin/host/filter  -ldl -lpthread -lz -L/opt/homebrew/Cellar/libpng/1.6.37/lib -lpng16 -L/opt/homebrew/lib -ljpeg -I/opt/homebrew/Cellar/libpng/1.6.37/include/libpng16 -I/opt/homebrew/include  
HL_NUM_THREADS=1 bin/host/filter 1024 1024 100
LLVM time: 1.26582ms
Pitchfork time: 1.16088ms
Rake time: 1.16074ms
Success!
rm bin/host/conv3x3_a32_llvm.a bin/host/runtime.a bin/host/conv3x3_a32_rake.a bin/host/conv3x3_a32_pitchfork.a
