export HL_ENABLE_RAKE=1 && \
	c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -g gaussian7x7_generator.cpp /Users/aroot/projects/Halide-trs/distrib/tools/GenGen.cpp -o bin/host/gaussian7x7_rake.generator -Wl,-rpath,/Users/aroot/projects/Halide-trs/distrib/lib/ -L /Users/aroot/projects/Halide-trs/distrib/lib/ -lHalide  -ldl -lpthread -lz -Wl,-force_load /Users/aroot/projects/Halide-trs/distrib/lib/libautoschedule_mullapudi2016.so
c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -g gaussian7x7_generator.cpp /Users/aroot/projects/Halide-trs/distrib/tools/GenGen.cpp -o bin/host/gaussian7x7.generator -Wl,-rpath,/Users/aroot/projects/Halide-trs/distrib/lib/ -L /Users/aroot/projects/Halide-trs/distrib/lib/ -lHalide  -ldl -lpthread -lz -Wl,-force_load /Users/aroot/projects/Halide-trs/distrib/lib/libautoschedule_mullapudi2016.so
export HL_ENABLE_RAKE=1 && \
	export HL_ENABLE_RAKE_RULES=1 && \
	export HL_DISABLE_INTRINISICS=0 && \
	export HL_DISABLE_ARM_LOWERING=0 && \
	bin/host/gaussian7x7_rake.generator -g gaussian7x7 -f gaussian7x7_rake -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
ArmOptimize Add: (max(min(ramp((bounded_input.s0.x.x*16) + -3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(t102))
ArmOptimize Add: (max(min(ramp(-3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(((bounded_input.s0.y.prologue.s + bounded_input.s0.y.rebased) + -3)*input.stride.1))
ArmOptimize Add: (max(min(ramp(((bounded_input.s0.x.x.rebased + t109)*16) + -3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(t112))
ArmOptimize Add: (max(min(ramp((bounded_input.s0.x.x*16) + -3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(t118))
ArmOptimize Add: ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp(rows.s0.x.x*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)])) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t122)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp(rows.s0.x.x*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t122)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)20), x16((uint8)15), x16((uint8)6), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16((uint16x16)widening_add((uint8x16)bounded_input[ramp(rows.s0.x.x*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: (uint16x16((uint8x16)bounded_input[ramp(rows.s0.x.x*16, 1, 16) aligned(16, 0)]) + uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)]))
ArmOptimize Add: ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t122)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)])) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t122)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)20), x16((uint8)15), x16((uint8)6), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16((uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t122)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: (uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t122)*16, 1, 16) aligned(16, 0)]) + uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)]))
ArmOptimize Add: ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t128)*16, 1, 16) aligned(16, 0)])) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t128)*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)20), x16((uint8)15), x16((uint8)6), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16((uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t128)*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: (uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t123)*16, 1, 16) aligned(16, 0)]) + uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t128)*16, 1, 16) aligned(16, 0)]))
ArmOptimize Add: ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + ((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t128)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t130)*16, 1, 16) aligned(16, 0)])) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t128)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t130)*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t121)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t126)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t125)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t120)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)20), x16((uint8)15), x16((uint8)6), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t128)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16((uint16x16)widening_add((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t130)*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: (uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t124)*16, 1, 16) aligned(16, 0)]) + uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t130)*16, 1, 16) aligned(16, 0)]))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 1, 1, 16) aligned(16, 1)], x16((uint16)6)) + ((uint32x16)rows[ramp(output.s0.x.x*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))))
ArmOptimize Add: ((uint32x16)rows[ramp(output.s0.x.x*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))
ArmOptimize Add: ((uint32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 1, 1, 16) aligned(16, 1)], x16((uint16)6)) + ((uint32x16)rows[ramp(t77*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t77*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))))
ArmOptimize Add: ((uint32x16)rows[ramp(t77*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t77*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t77*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t77*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t77*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))
ArmOptimize Add: ((uint32x16)rows[ramp((t77*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t77*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 1, 1, 16) aligned(16, 1)], x16((uint16)6)) + ((uint32x16)rows[ramp(t78*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t78*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))))
ArmOptimize Add: ((uint32x16)rows[ramp(t78*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t78*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t78*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t78*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t78*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))
ArmOptimize Add: ((uint32x16)rows[ramp((t78*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t78*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 1, 1, 16) aligned(16, 1)], x16((uint16)6)) + ((uint32x16)rows[ramp(t79*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t79*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))))
ArmOptimize Add: ((uint32x16)rows[ramp(t79*16, 1, 16) aligned(16, 0)] + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t79*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 2, 1, 16) aligned(16, 2)], x16((uint16)15)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t79*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 3, 1, 16) aligned(16, 3)], x16((uint16)20)) + ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t79*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))))
ArmOptimize Add: ((uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 4, 1, 16) aligned(16, 4)], x16((uint16)15)) + ((uint32x16)rows[ramp((t79*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6))))
ArmOptimize Add: ((uint32x16)rows[ramp((t79*16) + 6, 1, 16) aligned(16, 6)] + (uint32x16)widen_right_mul((uint32x16)rows[ramp((t79*16) + 5, 1, 16) aligned(16, 5)], x16((uint16)6)))
export HL_ENABLE_RAKE=0 && \
	export HL_ENABLE_RAKE_RULES=1 && \
	export HL_DISABLE_INTRINISICS=0 && \
	export HL_DISABLE_ARM_LOWERING=0 && \
	bin/host/gaussian7x7.generator -g gaussian7x7 -f gaussian7x7_pitchfork -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
ArmOptimize Add: (max(min(ramp((bounded_input.s0.x.x*16) + -3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(t66))
ArmOptimize Add: (max(min(ramp(-3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(((bounded_input.s0.y.prologue.s + bounded_input.s0.y.rebased) + -3)*input.stride.1))
ArmOptimize Add: (max(min(ramp(((bounded_input.s0.x.x.rebased + t73)*16) + -3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(t76))
ArmOptimize Add: (max(min(ramp((bounded_input.s0.x.x*16) + -3, 1, 16), x16(input.extent.0 + -1)), x16(0)) + x16(t82))
ArmOptimize Add: (((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t88)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp(rows.s0.x.x*16, 1, 16) aligned(16, 0)])))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t88)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp(rows.s0.x.x*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)6), x16((uint8)15), x16((uint8)20), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t88)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16(uint16x16((uint8x16)bounded_input[ramp(rows.s0.x.x*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: (((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t89)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t88)*16, 1, 16) aligned(16, 0)])))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t88)*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t89)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)6), x16((uint8)15), x16((uint8)20), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16(uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t88)*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: (((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t90)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t89)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)])))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t90)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t89)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)6), x16((uint8)15), x16((uint8)20), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16(uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t87)*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: (((uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t92)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t90)*16, 1, 16) aligned(16, 0)], x16((uint8)15))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t89)*16, 1, 16) aligned(16, 0)], x16((uint8)20)), (uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)], x16((uint8)15)))) + (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)])))
matched! (uint32x16)vector_instruction("dot_product", (uint32x16)widening_add((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], x16((uint8)6)), uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)])), interleave_vectors((uint8x16)bounded_input[ramp((rows.s0.x.x + t92)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t90)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t89)*16, 1, 16) aligned(16, 0)], (uint8x16)bounded_input[ramp((rows.s0.x.x + t84)*16, 1, 16) aligned(16, 0)]), interleave_vectors(x16((uint8)6), x16((uint8)15), x16((uint8)20), x16((uint8)15)))
ArmOptimize Add: (uint32x16((uint16x16)widening_mul((uint8x16)bounded_input[ramp((rows.s0.x.x + t85)*16, 1, 16) aligned(16, 0)], x16((uint8)6))) + uint32x16(uint16x16((uint8x16)bounded_input[ramp((rows.s0.x.x + t86)*16, 1, 16) aligned(16, 0)])))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 1, 1, 16) aligned(16, 1)], x16((int16)6)) + ((int32x16)rows[ramp(output.s0.x.x*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))))
ArmOptimize Add: ((int32x16)rows[ramp(output.s0.x.x*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))
ArmOptimize Add: ((int32x16)rows[ramp((output.s0.x.x*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((output.s0.x.x*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 1, 1, 16) aligned(16, 1)], x16((int16)6)) + ((int32x16)rows[ramp(t41*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t41*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))))
ArmOptimize Add: ((int32x16)rows[ramp(t41*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t41*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t41*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t41*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t41*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))
ArmOptimize Add: ((int32x16)rows[ramp((t41*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t41*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 1, 1, 16) aligned(16, 1)], x16((int16)6)) + ((int32x16)rows[ramp(t42*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t42*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))))
ArmOptimize Add: ((int32x16)rows[ramp(t42*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t42*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t42*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t42*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t42*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))
ArmOptimize Add: ((int32x16)rows[ramp((t42*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t42*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 1, 1, 16) aligned(16, 1)], x16((int16)6)) + ((int32x16)rows[ramp(t43*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t43*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))))
ArmOptimize Add: ((int32x16)rows[ramp(t43*16, 1, 16) aligned(16, 0)] + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t43*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 2, 1, 16) aligned(16, 2)], x16((int16)15)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t43*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 3, 1, 16) aligned(16, 3)], x16((int16)20)) + ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t43*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))))
ArmOptimize Add: ((int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 4, 1, 16) aligned(16, 4)], x16((int16)15)) + ((int32x16)rows[ramp((t43*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6))))
ArmOptimize Add: ((int32x16)rows[ramp((t43*16) + 6, 1, 16) aligned(16, 6)] + (int32x16)widen_right_mul((int32x16)rows[ramp((t43*16) + 5, 1, 16) aligned(16, 5)], x16((int16)6)))
export HL_ENABLE_RAKE=0 && \
	export HL_ENABLE_RAKE_RULES=0 && \
	export HL_DISABLE_INTRINISICS=1 && \
	export HL_DISABLE_ARM_LOWERING=1 && \
	bin/host/gaussian7x7.generator -g gaussian7x7 -f gaussian7x7_llvm -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
bin/host/gaussian7x7.generator -r runtime -o bin/host target=host
c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -Ibin/host -Wall -O3 filter.cpp bin/host/gaussian7x7_rake.a bin/host/gaussian7x7_pitchfork.a bin/host/gaussian7x7_llvm.a bin/host/runtime.a -o bin/host/filter  -ldl -lpthread -lz -L/opt/homebrew/Cellar/libpng/1.6.37/lib -lpng16 -L/opt/homebrew/lib -ljpeg -I/opt/homebrew/Cellar/libpng/1.6.37/include/libpng16 -I/opt/homebrew/include  
bin/host/filter ../images/gray.png 100 bin/host/out.png
LLVM time: 1.85765ms
Pitchfork time: 1.39196ms
Rake time: 1.28012ms
Success!
rm bin/host/gaussian7x7_pitchfork.a bin/host/runtime.a bin/host/gaussian7x7_llvm.a bin/host/gaussian7x7_rake.a
