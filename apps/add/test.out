export HL_ENABLE_RAKE=1 && \
	c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -g add_generator.cpp /Users/aroot/projects/Halide-trs/distrib/tools/GenGen.cpp -o bin/host/add_rake.generator -Wl,-rpath,/Users/aroot/projects/Halide-trs/distrib/lib/ -L /Users/aroot/projects/Halide-trs/distrib/lib/ -lHalide  -ldl -lpthread -lz -Wl,-force_load /Users/aroot/projects/Halide-trs/distrib/lib/libautoschedule_mullapudi2016.so
c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -g add_generator.cpp /Users/aroot/projects/Halide-trs/distrib/tools/GenGen.cpp -o bin/host/add.generator -Wl,-rpath,/Users/aroot/projects/Halide-trs/distrib/lib/ -L /Users/aroot/projects/Halide-trs/distrib/lib/ -lHalide  -ldl -lpthread -lz -Wl,-force_load /Users/aroot/projects/Halide-trs/distrib/lib/libautoschedule_mullapudi2016.so
export HL_ENABLE_RAKE=1 && \
	export HL_ENABLE_RAKE_RULES=1 && \
	export HL_DISABLE_INTRINISICS=0 && \
	export HL_DISABLE_ARM_LOWERING=0 && \
	bin/host/add_rake.generator -g add -f add_rake -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64))
matched! (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64))
matched! (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + x16(widening_mul((int16((uint8)input2[t88]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)))
matched! (x16(widening_mul((int16((uint8)input2[t88]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (x16(widening_mul((int16((uint8)input2[t88]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + x16(widening_mul((int16((uint8)input2[(output.s0.y.rebased + t76)*input2.stride.1]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)))
matched! (x16(widening_mul((int16((uint8)input2[(output.s0.y.rebased + t76)*input2.stride.1]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (x16(widening_mul((int16((uint8)input2[(output.s0.y.rebased + t76)*input2.stride.1]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
export HL_ENABLE_RAKE=0 && \
	export HL_ENABLE_RAKE_RULES=1 && \
	export HL_DISABLE_INTRINISICS=0 && \
	export HL_DISABLE_ARM_LOWERING=0 && \
	bin/host/add.generator -g add -f add_pitchfork -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t73) + t60), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64))
matched! (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((output.s0.x.x*16) + ((input2.stride.1*t73) + t61), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t55) + ((t64 - t71) - input1.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, x16((uint8)6))) + x16(int16((uint8)input2_zero)*(int16)-64))
matched! (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input2_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input2[ramp((input2.stride.1*t55) + ((t64 - t72) - input2.min.0), 1, 16)] if (uint1x16)t42, (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + x16(widening_mul((int16((uint8)input2[t88]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)))
matched! (x16(widening_mul((int16((uint8)input2[t88]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (x16(widening_mul((int16((uint8)input2[t88]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((output.s0.x.x*16) + ((input1.stride.1*t87) + t77), 1, 16)], (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: ((int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + x16(widening_mul((int16((uint8)input2[(output.s0.y.rebased + t76)*input2.stride.1]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)))
matched! (x16(widening_mul((int16((uint8)input2[(output.s0.y.rebased + t76)*input2.stride.1]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (x16(widening_mul((int16((uint8)input2[(output.s0.y.rebased + t76)*input2.stride.1]) - int16((uint8)input2_zero))*(int16)64, (int16)input2_multiplier)) + (int32x16)widening_mul(int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)))
ArmOptimize Add: (int16x16((uint16x16)widening_shift_left((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), x16((uint8)6))) + x16(int16((uint8)input1_zero)*(int16)-64))
matched! (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
ArmOptimize Add: (x16(int16((uint8)input1_zero)*(int16)-64) + (int16x16)widening_mul((uint8x16)input1[ramp((input1.stride.1*t58) + ((t80 - t86) - input1.min.0), 1, 16)] if (ramp(t80 + 1, 1, 16) <= x16(t81)), (int8x16)shift_left(x16((int8)1), x16((uint8)6))))
export HL_ENABLE_RAKE=0 && \
	export HL_ENABLE_RAKE_RULES=0 && \
	export HL_DISABLE_INTRINISICS=1 && \
	export HL_DISABLE_ARM_LOWERING=1 && \
	bin/host/add.generator -g add -f add_llvm -e stmt,assembly,static_library,c_header -o bin/host target=host-no_runtime-arm_dot_prod
bin/host/add.generator -r runtime -o bin/host target=host
c++ -O3 -std=c++17 -I /Users/aroot/projects/Halide-trs/distrib/include/ -I /Users/aroot/projects/Halide-trs/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi  -fvisibility=hidden -Ibin/host -Wall -O3 filter.cpp bin/host/add_rake.a bin/host/add_pitchfork.a bin/host/add_llvm.a bin/host/runtime.a -o bin/host/filter  -ldl -lpthread -lz -L/opt/homebrew/Cellar/libpng/1.6.37/lib -lpng16 -L/opt/homebrew/lib -ljpeg -I/opt/homebrew/Cellar/libpng/1.6.37/include/libpng16 -I/opt/homebrew/include  
bin/host/filter ../images/gray.png ../images/gray.png bin/host/out.png 100
LLVM time: 0.7995ms
Pitchfork time: 0.509925ms
Rake time: 0.499896ms
Success!
rm bin/host/runtime.a bin/host/add_llvm.a bin/host/add_rake.a bin/host/add_pitchfork.a
