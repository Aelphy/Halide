# Relevant GHA docs links:
# https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container
# https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio

name: Build PyPI package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: '${{ github.workflow }}-${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  pip-linux:
    name: Package Halide Python bindings on Linux

    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [ x86_64, aarch64 ]

    steps:
      - uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.10.2
        env:
          CIBW_ARCHS_LINUX: "${{ matrix.arch }}"
          CIBW_BUILD: "cp38-manylinux* cp39-manylinux* cp310-manylinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/halide/manylinux2014_x86_64-llvm:15.0.1
          # CIBW_MANYLINUX_I686_IMAGE: ghcr.io/halide/manylinux2014_i686-llvm:15.0.1
          CIBW_MANYLINUX_AARCH64_IMAGE: ghcr.io/halide/manylinux2014_aarch64-llvm:15.0.1
          CIBW_BEFORE_ALL_LINUX: >
            cmake -G Ninja -S . -B build
            -DCMAKE_BUILD_TYPE=Release -DWITH_DOCS=NO -DWITH_PYTHON_BINDINGS=NO -DWITH_TESTS=NO
            -DWITH_TUTORIALS=NO -DWITH_UTILS=NO &&
            cmake --build build --target install

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build-llvm:
    name: Build LLVM for ${{ matrix.runner }}

    runs-on: ${{ matrix.runner }}

    env:
      LLVM_REF: llvmorg-15.0.1

    strategy:
      fail-fast: false
      matrix:
        runner: [ windows-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v3
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_REF }}

      - uses: ilammy/msvc-dev-cmd@v1
      - uses: lukka/get-cmake@latest

      - name: Cache LLVM build folder
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: local
          key: ${{ env.LLVM_REF }}-${{ runner.os }}

      - name: Configure LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: >
          cmake -G Ninja -S llvm -B build
          -DCMAKE_BUILD_TYPE=Release
          "-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64"
          "-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips;Hexagon;WebAssembly"
          "-DLLVM_ENABLE_PROJECTS=clang;lld"
          -DLLVM_ENABLE_ASSERTIONS=ON
          -DLLVM_ENABLE_RTTI=ON
          -DLLVM_ENABLE_EH=ON
          -DLLVM_ENABLE_LIBXML2=OFF
          -DLLVM_ENABLE_TERMINFO=OFF
          -DLLVM_ENABLE_ZSTD=OFF
          -DLLVM_ENABLE_ZLIB=OFF

      - name: Build LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: cmake --build build

      - name: Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: cmake --install build --prefix local

      - run: tar zcvf llvm.tgz local

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.LLVM_REF }}-${{ runner.os }}
          path: llvm.tgz

  pip-no-docker:
    name: Package Halide Python bindings

    runs-on: ${{ matrix.runner }}

    needs: build-llvm

    env:
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/local
      LLVM_REF: llvmorg-15.0.1

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: windows-latest
            pytag: win_amd64
            arch: x64

          - runner: macos-latest
            pytag: macosx_x86_64
            arch: x86_64

          - runner: macos-latest
            pytag: macosx_arm64
            arch: arm64

    steps:
      - uses: actions/checkout@v3

      - uses: ilammy/msvc-dev-cmd@v1
      - uses: lukka/get-cmake@latest

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.LLVM_REF }}-${{ runner.os }}

      - run: tar zxvf llvm.tgz

      - name: Configure Halide
        if: runner.os == 'Windows'
        run: >
          cmake -G "Visual Studio 17 2022" -T ClangCL -A "${{ matrix.arch }}" -S . -B build
          -DWITH_DOCS=NO
          -DWITH_PYTHON_BINDINGS=NO
          -DWITH_TESTS=NO
          -DWITH_TUTORIALS=NO
          -DWITH_UTILS=NO

      - name: Configure Halide
        if: runner.os != 'Windows'
        run: >
          cmake -G Ninja -S . -B build
          -DCMAKE_BUILD_TYPE=Release
          "-DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}"
          -DWITH_DOCS=NO
          -DWITH_PYTHON_BINDINGS=NO
          -DWITH_TESTS=NO
          -DWITH_TUTORIALS=NO
          -DWITH_UTILS=NO

      - name: Build Halide
        run: cmake --build build --config Release

      - name: Install Halide
        run: cmake --install build --config Release --prefix local

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.10.2
        env:
          CIBW_BUILD: "cp38-${{ matrix.pytag }} cp39-${{ matrix.pytag }} cp310-${{ matrix.pytag }}"

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl
